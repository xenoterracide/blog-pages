<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/security/index.xml</link>
    <description>Recent content in Security on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Log (CRLF) Injection with SLF4J</title>
      <link>http://blog.xenoterracide.com/post/log-crlf-injection-with-slf4j/</link>
      <pubDate>Mon, 27 Feb 2017 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/log-crlf-injection-with-slf4j/</guid>
      <description>&lt;p&gt;At my job we have a CIO installed policy of remediating issues found by a static analysis tool  and what it finds are
 most targeted at finding security issues. Currently this tool  is Veracode, and I don&amp;rsquo;t recommend it, it misses more
 problems than it finds, and what it finds, including this issue, are often false positives. Our most common issue, is
  CRLF (Carriage Return Line Feed) or other log injection, which we have mitigated in a custom log appender (which
  Veracode doesn&amp;rsquo;t recognize).&lt;/p&gt;

&lt;p&gt;So in order to educate people, I&amp;rsquo;ve made a sample app to demo what you can do, here&amp;rsquo;s the code, if you&amp;rsquo;re familiar with
 SLF4J it should be pretty obvious. We&amp;rsquo;re logging the arguments in various ways passed to the program (note: there&amp;rsquo;s a
  &lt;code&gt;README.md&lt;/code&gt; on how to build it in &lt;a href=&#34;https://bitbucket.org/xenoterracide/loginjectionexample&#34;&gt;repo&lt;/a&gt; )&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com.xenoterracide.log_injection_example&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.Arrays&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.boot.CommandLineRunner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Logger&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LoggerFactory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getLogger&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Application&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;STARTING&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Runner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpringApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Application&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;@Component&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Runner&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CommandLineRunner&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;running with args &amp;#39;{}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;running {}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Arrays&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run the code, it has 2 outputs, one with default SLF4J settings, and the other with Spring Boot&amp;rsquo;s default SLF4J settings. If you run this application with &lt;code&gt;hello&lt;/code&gt; as an argument you&amp;rsquo;d get the following output, there&amp;rsquo;s no injection here, this is obviously what the developer intends for it to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;15:06:16.266 [main] INFO com.xenoterracide.log_injection_example.Application - STARTING
15:06:16.271 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: hello
15:06:16.273 [main] DEBUG com.xenoterracide.log_injection_example.Application - running &#39;hello&#39;
15:06:16.276 [main] ERROR com.xenoterracide.log_injection_example.Application - 
java.lang.IllegalArgumentException: [hello]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31)
 at com.xenoterracide.log_injection_example.Application.main(Application.java:19)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

  .   ____          _            __ _ _
 /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.1.RELEASE)

2017-02-22 15:06:17.138  INFO 41153 --- [           main] c.x.log_injection_example.Application    : Starting Application v1.0-SNAPSHOT on Calebs-MacBook-Pro.local with PID 41153 (/Users/calebcushing/IdeaProjects/loginjectionexample/target/log-injection-example-1.0-SNAPSHOT.jar started by calebcushing in /Users/calebcushing/IdeaProjects/loginjectionexample)
2017-02-22 15:06:17.139  INFO 41153 --- [           main] c.x.log_injection_example.Application    : No active profile set, falling back to default profiles: default
2017-02-22 15:06:17.208  INFO 41153 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:06:17 CST 2017]; root of context hierarchy
2017-02-22 15:06:17.848  INFO 41153 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-02-22 15:06:17.861  INFO 41153 --- [           main] c.x.log_injection_example.Application    : running with args: hello
2017-02-22 15:06:17.864 ERROR 41153 --- [           main] c.x.log_injection_example.Application    : 

java.lang.IllegalArgumentException: [hello]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31) ~[classes!/:1.0-SNAPSHOT]
 at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:776) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:760) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:747) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at com.xenoterracide.log_injection_example.Application.main(Application.java:20) [classes!/:1.0-SNAPSHOT]
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112]
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112]
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112]
 at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]

2017-02-22 15:06:17.868  INFO 41153 --- [           main] c.x.log_injection_example.Application    : Started Application in 1.422 seconds (JVM running for 1.839)
2017-02-22 15:06:17.869  INFO 41153 --- [       Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:06:17 CST 2017]; root of context hierarchy
2017-02-22 15:06:17.870  INFO 41153 --- [       Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to notice here is that Spring Boot doesn&amp;rsquo;t log debug by default, so no help there. Ok, so now let&amp;rsquo;s see what happens if I inject a log by inputing. The newline, after the quote, below is very important.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar target/log-injection-example-1.0-SNAPSHOT.jar &amp;quot;
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that will generate this output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar&amp;quot;
15:13:31.162 [main] INFO com.xenoterracide.log_injection_example.Application - STARTING
15:13:31.167 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: 
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar
15:13:31.168 [main] DEBUG com.xenoterracide.log_injection_example.Application - running &#39;
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar&#39;
15:13:31.170 [main] ERROR com.xenoterracide.log_injection_example.Application - 
java.lang.IllegalArgumentException: [
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31)
 at com.xenoterracide.log_injection_example.Application.main(Application.java:19)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

  .   ____          _            __ _ _
 /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.1.RELEASE)

2017-02-22 15:13:31.782  INFO 41187 --- [           main] c.x.log_injection_example.Application    : Starting Application v1.0-SNAPSHOT on Calebs-MacBook-Pro.local with PID 41187 (/Users/calebcushing/IdeaProjects/loginjectionexample/target/log-injection-example-1.0-SNAPSHOT.jar started by calebcushing in /Users/calebcushing/IdeaProjects/loginjectionexample)
2017-02-22 15:13:31.783  INFO 41187 --- [           main] c.x.log_injection_example.Application    : No active profile set, falling back to default profiles: default
2017-02-22 15:13:31.863  INFO 41187 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:13:31 CST 2017]; root of context hierarchy
2017-02-22 15:13:32.504  INFO 41187 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-02-22 15:13:32.516  INFO 41187 --- [           main] c.x.log_injection_example.Application    : running with args: 
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar
2017-02-22 15:13:32.520 ERROR 41187 --- [           main] c.x.log_injection_example.Application    : 

java.lang.IllegalArgumentException: [
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31) ~[classes!/:1.0-SNAPSHOT]
 at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:776) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:760) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:747) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at com.xenoterracide.log_injection_example.Application.main(Application.java:20) [classes!/:1.0-SNAPSHOT]
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112]
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112]
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112]
 at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]

2017-02-22 15:13:32.524  INFO 41187 --- [           main] c.x.log_injection_example.Application    : Started Application in 1.168 seconds (JVM running for 1.594)
2017-02-22 15:13:32.525  INFO 41187 --- [       Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:13:31 CST 2017]; root of context hierarchy
2017-02-22 15:13:32.526  INFO 41187 --- [       Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that in the default SLF4J output we&amp;rsquo;ve created a convincing message, It looks like we have empty string argument, and a second log statement. If you look at the debug message though, it has an unbalanced quote, which will tip your hat to the idea that something strange has happened. This debug statement is not run in our &amp;ldquo;production&amp;rdquo; spring boot. However if you look at the spring boot output the formatting is significantly different. Also this may seem obvious in this contrived example, but would you really notice it if you were reading thousands of lines of logs?&lt;/p&gt;

&lt;p&gt;Log injection gets dangerous in a few scenario&amp;rsquo;s. The first would be if you&amp;rsquo;re using a log analysis tool, it might not pick up the second log line as a fraud, and instead treat it as a real log and the former log as only having an empty string. If they get the log format wrong (like with boot) then the analysis tool might not match the pattern and throw it out. The next danger in log injection is XSS (or other types of injection). Take Docker Cloud (I don&amp;rsquo;t know if it is or isn&amp;rsquo;t vulnerable) it allows you to view your containers logs in a web browser, now imagine I put javascript code that pushes a malicious pdf (or something) to your computer &amp;ldquo;onload&amp;rdquo;. When the system administrator goes in to view these logs this pdf might download and then be opened in a vulnerable viewer. Now you have an admin with a trojan horse on his computer. To be said other types of injection come in if you&amp;rsquo;re saving logs to a database in an unsafe way, or for some reason passing them to a parser that might interpret the content (like regex injection).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celebrity nude scandal, on security, an analogy</title>
      <link>http://blog.xenoterracide.com/post/celebrity-nude-scandal-on-security-an-analogy/</link>
      <pubDate>Sat, 20 Sep 2014 11:25:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/celebrity-nude-scandal-on-security-an-analogy/</guid>
      <description>&lt;p&gt;Though I won&amp;rsquo;t say they aren&amp;rsquo;t victims of a crime&amp;hellip;  What the victims did is fundamentally the equivalent of using skeleton keys in the modern day. What apple did or rather didn&amp;rsquo;t do, is prevent that. Apple could have used a tool like cracklib, and said at the time of password creation, this is too short, this is not random enough, we are refusing to allow you to put this skeleton key lock on your front door.  So while I think that the perp should be prosecuted to the full extend of the law, it should be like a Breaking &amp;amp; Entering where the door was left unlocked.   Apple should be sued for not requiring secure passwords. Imagine if your lock company installed them wrong, and because of that you got broken into, they didn&amp;rsquo;t do their job correctly. Would people just stand for that? No, I don&amp;rsquo;t think so. Somehow physical locks are seen as easier to understand, and all this computer mumbo jumbo is hard, event though I suspect most people can&amp;rsquo;t tell you why a deadbolt is a better lock.   People should realize Skeleton keys are no longer secure, even if they look cool, and are easy to use, it&amp;rsquo;s better to use a password manager (&lt;a href=&#34;http://lastpass.com&#34;&gt;http://lastpass.com&lt;/a&gt; is what I use) with a randomly generated password for all other sites (I&amp;rsquo;d say 16 characters, though I think 12 is the current suggested). Fundamentally this setup is a deadbolt with a different key required for each door, but one keychain. You can also do multifactor, which is like a key with a chip in it that will refuse to start your car if it&amp;rsquo;s the wrong chip, so making a physical copy of the key (password) isn&amp;rsquo;t enough.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making Secure Recoverable Passwords ( part 3 )</title>
      <link>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords--part-3-/</link>
      <pubDate>Wed, 03 Nov 2010 08:12:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords--part-3-/</guid>
      <description>&lt;p&gt;If you haven&amp;rsquo;t read &lt;a href=&#34;http://www.xenoterracide.com/2008/04/making-secure-recoverable-passwords.html&#34;&gt;Part 1&lt;/a&gt; please do so.&lt;br /&gt;&lt;br /&gt;Although the criticism of &lt;a href=&#34;http://www.xenoterracide.com/2010/07/making-secure-recoverable-passwords.html&#34;&gt;Part 2&lt;/a&gt; should be taken with a grain of &lt;a href=&#34;http://xkcd.com/538/&#34;&gt;XKCD Salt&lt;/a&gt;, and even the primary plaintiff admitted that it would take him 2 months to crack the final salted sha512. Usually your attacker shouldn&amp;rsquo;t have your shadow file, and having stored them as anything less is just plain not secure. I will acknowledge it has some merit.&lt;br /&gt;&lt;br /&gt;Doing a base64 transformation on hex only digits is a bad, idea, and does not have nearly enough possible combinations. Nothing is going to be more secure than random, but random isn&amp;rsquo;t really recoverable, if you lose it. That&amp;rsquo;s why I do some kind of transformation.&lt;br /&gt;&lt;br /&gt;I believe that somewhere someone suggested that it would be better to convert from the binary digest into base64 as it would be more random than from hex. I believe this is accurate, but the method suggested was in Perl, which is kind of messy, and more importantly hard to remember. So &lt;a href=&#34;http://unix.stackexchange.com/questions/3675/how-can-i-get-a-base64-encoded-shax-on-the-cli&#34;&gt;I asked, on unix.stackexchange.com, how I could do this on the command line&lt;/a&gt;. Here&amp;rsquo;s the answer I decided to accept:&lt;br /&gt;&lt;br /&gt;&lt;code&gt;echo -n &lt;code&gt;date&lt;/code&gt; | openssl dgst -binary -sha512 | base64&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;Remember you should slightly modify the result in a way that you can remember in your head to make it random, and probably use something in place of the &amp;ldquo;date&amp;rdquo; command, since it&amp;rsquo;s not reproduce-able.&lt;br /&gt;&lt;br /&gt;Again: this is not meant to be as secure as random passwords, just secure enough compared to &lt;i&gt;non random&lt;/i&gt; alternatives.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making secure recoverable Passwords (Part 2)</title>
      <link>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords-part-2/</link>
      <pubDate>Fri, 23 Jul 2010 21:32:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords-part-2/</guid>
      <description>&lt;p&gt;This has been prompted by &lt;a href=&#34;http://varlogrant.blogspot.com/2010/07/quick-code-post-genpasswordpl.html&#34;&gt;Dave Jacoby&amp;rsquo;s post on generating passwords&lt;/a&gt; and the fact that I&amp;rsquo;ve learned a new trick since my &lt;a href=&#34;http://xenoterracide.blogspot.com/2008/04/making-secure-recoverable-passwords.html&#34;&gt;my first article in 2008&lt;/a&gt;; which you should read first (it&amp;rsquo;s a prereq).&lt;br /&gt;&lt;br /&gt;Some might point out that using a hex digest limits the characters that will be generated too much, do this then.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;echo -n &amp;ldquo;date&amp;rdquo; | &lt;digest&gt;sum | base64&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;So let&amp;rsquo;s say you have to change your password every month. Pick a day, let&amp;rsquo;s say the second Tuesday of the month. Since your memory sucks write this down &amp;ldquo;Pipes on second Tuesday @ 5:08!&amp;ldquo;. Sounds like an event reminder right? Here&amp;rsquo;s your actual password algorithm for this month. First you want to has the &amp;lsquo;second Tuesday of the month&amp;rsquo;.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;echo -n &amp;ldquo;2010/07/12&amp;rdquo; | sha1sum | base64&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;which outputs&lt;br /&gt;&lt;br /&gt;&lt;code&gt;NTFhMTY4NmJkNWQyZmIzNWJlZTlmYmQxYzEwN2FjNGE1MjUyYjI1OCAgLQo=&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;So what was the rest of that reminder for? Now you&amp;rsquo;re going to make it as good as random, take the first 8 characters &amp;lsquo;&lt;code&gt;NTFhMTY4&lt;/code&gt;&amp;rsquo; and insert a pipe &amp;lsquo;&lt;code&gt;|&lt;/code&gt;&amp;rsquo; at the 5th character, resulting in &amp;lsquo;&lt;code&gt;NTFh|MTY4&lt;/code&gt;&amp;rsquo;. Now you have a &amp;lsquo;good as random, but recoverable&amp;rsquo; 9 character password.&lt;br /&gt;&lt;br /&gt;Given if you work with really clever people they might be able to figure it out if they know you use this kind of process. But I&amp;rsquo;m sure having read this article and my previous one you&amp;rsquo;ll come up with something even better, but just as reproducible.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;&lt;br /&gt;I do not believe that anyone can seriously prove (after having read both articles) that you could crack this with anything less than a brute force attack. Because I&amp;rsquo;ve suggested inserting 1 or more characters into the final outcome, chances are those are anything in the 94 printable characters of ASCII. Yes you might limit the end possibilities but after seeing passwords that most people have&amp;hellip; this makes you a hard enough target that no one is going to bother. Basically all assumptions that using this is bad revolves around someone knowing exactly what you do (so in reality it&amp;rsquo;s probably only bad for me).&lt;br /&gt;&lt;br /&gt;I should also note that my personal system encrypts passwords with a salted sha512 and I&amp;rsquo;m having trouble find a password cracking tool that can even try to brute force that.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;&lt;br /&gt;oh and just in case you forgot&amp;hellip; no one is trying to brute force your password. Remeber this &lt;a href=&#34;http://xkcd.com/538/&#34;&gt;XKCD&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PostgreSQL initial setup (authentication) Part 2</title>
      <link>http://blog.xenoterracide.com/post/postgresql-initial-setup-authentication-part-2/</link>
      <pubDate>Tue, 19 Jan 2010 11:37:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/postgresql-initial-setup-authentication-part-2/</guid>
      <description>&lt;p&gt;I ran into so problems and lack of information with my last &lt;a href=&#34;http://xenoterracide.blogspot.com/2009/08/postgresql-initial-setup-authentication.html&#34;&gt;post on this topic&lt;/a&gt;. Firstly my syntax for &lt;code&gt;local all all to local all all ident devel&lt;br /&gt;&lt;/code&gt; doesn&amp;rsquo;t seem to work in my current setup. It&amp;rsquo;s possible that it has something to do with the configuration of the Debian/Ubuntu server I was basing that against, and now my targets are Arch Linux and Slackware.&lt;br /&gt;&lt;br /&gt;So our goal here will be to provide an alternate user that can log in as postgres via ident. why would you want to do this? maybe you&amp;rsquo;re tired of su - to the postgres unix user after logging in as your administrative user (root?).&lt;br /&gt;&lt;br /&gt;First we need to open our pg_ident.conf and add the following line.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;admin root postgres&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;So as I said in the last post on this: &amp;ldquo;admin&amp;rdquo; is an arbitrary identifier, root is the system user, and postgres is the database user. Now let&amp;rsquo;s go ahead and make sure the postgres system user can still login.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;admin postgres postgres&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;ok that&amp;rsquo;s all we need to do in the pg_ident.conf. Go ahead and open pg_hba.conf and add this line above the default 3 lines in the file.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;local all postgres ident map=admin&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;as a breakdown: local is for socket connections, all means all databases, ident means it&amp;rsquo;s checking for local users, and map=admin says look at the users in the admin identifier in pg_ident.conf.&lt;br /&gt;&lt;br /&gt;Now you should be able to run psql dname postgres as root. You will not be able to use the db postgres user as any system user not in the admin map.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bypassing disabled accounts with KDM</title>
      <link>http://blog.xenoterracide.com/post/bypassing-disabled-accounts-with-kdm/</link>
      <pubDate>Mon, 16 Nov 2009 19:06:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/bypassing-disabled-accounts-with-kdm/</guid>
      <description>&lt;p&gt;So the most common way of disabling an account in a unix system is changing the users shell in /etc/passwd to /bin/false or /sbin/nologin. However, I&amp;rsquo;ve discovered on Arch Linux that if I do this only shell login&amp;rsquo;s are disabled, I was still able to log the user in with gui via kdm. I also tried using usermod &amp;ndash;expiredate 1. this was not effective either however. the only way I found to lock the account from kdm login was to do a passwd -l accountname, which only locks password authentication. This means key and token authentication should still work. My real concern is that if the user was set to login without a password that it would still be bypass-able. My personal opinion is that I shouldn&amp;rsquo;t have to do more than 1 thing  to disable a user account in a 100% effective manner. Currently Arch Linux (and maybe more) fails at this. I&amp;rsquo;ll post a fix later as I investigate further.&lt;br /&gt;&lt;br /&gt;Bugs I filed are at &lt;a href=&#34;https://bugs.kde.org/show_bug.cgi?id=214616&#34;&gt;kde&lt;/a&gt; and &lt;a href=&#34;http://bugs.archlinux.org/task/17157&#34;&gt;Arch Linux&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;EDIT: expire date worked&amp;hellip; just not immediately, very odd.&lt;br /&gt;&lt;br /&gt;EDIT: Here&amp;rsquo;s a proper /etc/pam.d/kde&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;#%PAM-1.0&lt;br /&gt;auth        required    pam_nologin.so&lt;br /&gt;auth        required    pam_unix.so nullok&lt;br /&gt;auth        required    pam_shells.so&lt;br /&gt;auth required pam_tally.so onerr=succeedfile=/var/log/faillog&lt;br /&gt;account     required    pam_access.so&lt;br /&gt;account     required    pam_time.so&lt;br /&gt;account     required    pam_unix.so&lt;br /&gt;password    required    pam_unix.so&lt;br /&gt;session     required    pam_unix.so&lt;br /&gt;session     required    pam_env.so&lt;br /&gt;session     required    pam_limits.so&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Port forwarding in OpenWRT</title>
      <link>http://blog.xenoterracide.com/post/port-forwarding-in-openwrt/</link>
      <pubDate>Sat, 03 Oct 2009 19:34:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/port-forwarding-in-openwrt/</guid>
      <description>&lt;p&gt;So you need the outside world to have access to some box&amp;rsquo;s on your internal network. first you should use &lt;a href=&#34;http://xenoterracide.blogspot.com/2009/07/openwrt-static-dhcp.html&#34;&gt;Static DHCP&lt;/a&gt; to tell static the IP&amp;rsquo;s of the computer you&amp;rsquo;re routing to. Then you of course need to know the inbound from the outside world and the port on the computer you are forwarding too. For this example we&amp;rsquo;ll forward WAN (Wide Area Network (or (probably) the Internet)) port 8080  to a local dev box running Apache on httpd (we assume you know how to set apache up and make sure it&amp;rsquo;s working on the LAN(Local Area Network)).&lt;br /&gt;&lt;br /&gt;edit &lt;code&gt;/etc/config/firewall&lt;/code&gt;. note: /etc/firewall.user is for manual iptables commands and is basically a shell script. I only recommend this if /etc/config/firewall doesn&amp;rsquo;t do what you want (like multiport).&lt;br /&gt;&lt;code&gt;&lt;pre&gt;config redirect&lt;br /&gt;        option src              wan&lt;br /&gt;        option src_dport        8080&lt;br /&gt;        option dest             lan&lt;br /&gt;        option dest_ip          192.168.1.3&lt;br /&gt;        option dest_port        80&lt;br /&gt;        option proto            tcp&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;So options src and dest merely define the too and from interfaces (to be honest I&amp;rsquo;m not sure they actually do anything. as I&amp;rsquo;m not seeing any changes to what&amp;rsquo;s in iptables). src_dport is what external port you want to listen on. dest_port is what you want it to go to. dest_ip is what ip you want it to go to and proto is the protocol it listens on (yes you have to specify separately for udp if what you&amp;rsquo;re forwarding uses both tcp and udp).&lt;br /&gt;&lt;br /&gt;After you&amp;rsquo;ve edited and saved the file to fit your case run &lt;code&gt;/etc/init.d/firewall restart&lt;/code&gt; and it should work&lt;br /&gt;&lt;br /&gt;IMPORTANT: there&amp;rsquo;s a bug in 7.x and pre 8.09.2 with 2.4-bcrm kernels and netfilter code&amp;hellip; it &amp;lsquo;causes port drift. if the bug is affecting you. (it did me) reboot the system. you will be able to see it with a -j LOG iptables rule. the output was thus for me &lt;code&gt;&lt;br /&gt;IN=eth0.1 OUT=br-lan SRC=66.98.131.131 DST=192.168.1.3 LEN=44 TOS=0x00 PREC=0x20 TTL=47 ID=63450 DF PROTO=TCP SPT=54402 DPT=82 WINDOW=5840 RES=0x00 SYN URGP=0&lt;/code&gt; as you can see the destination port(DPT) is 82 instead of 80 like it&amp;rsquo;s supposed to be. 8.09.2 should be out in a few weeks it&amp;rsquo;s currently at rc2.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick sha1sum with Crypto&#43;&#43;</title>
      <link>http://blog.xenoterracide.com/post/quick-sha1sum-with-crypto/</link>
      <pubDate>Tue, 22 Sep 2009 01:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/quick-sha1sum-with-crypto/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on &lt;a href=&#34;http://github.com/xenoterracide/korama&#34;&gt;Korama&lt;/a&gt;. I was originally planning on hashing each music file and using the sha1 for the track primary key. However, after benchmarking an actual implementation. I&amp;rsquo;ve decided that it&amp;rsquo;s too slow, 20 minutes for 3k+ tracks, also my program was about 5 minutes slower than &lt;code&gt;find &amp;hellip; -exec sha1sum&lt;/code&gt; not sure on the reason why. However, since I had problems figuring out how to do it I figure I&amp;rsquo;ll post a basic sha1sum program that I made with the help of people on the &lt;a href=&#34;http://www.cryptopp.com/&#34;&gt;Crypto++&lt;/a&gt; Mailing List.&lt;br /&gt;&lt;br /&gt;Include&amp;rsquo;s are mangled due to blogger filtering&lt;br /&gt;&lt;code&gt;&lt;pre&gt;&lt;br /&gt;#include &amp;lt; cryptopp/sha.h &amp;gt;&lt;br /&gt;#include &amp;lt; cryptopp/hex.h &amp;gt;&lt;br /&gt;#include &amp;lt; cryptopp/files.h &amp;gt;&lt;br /&gt;#include &amp;lt; string &amp;gt;&lt;br /&gt;#include &amp;lt; iostream &amp;gt;&lt;br /&gt;&lt;br /&gt;using namespace std;&lt;br /&gt;&lt;br /&gt;int main(int argc, char *argv[])&lt;br /&gt;{&lt;br /&gt;    char *file = argv[1];&lt;br /&gt;    string result;&lt;br /&gt;    CryptoPP::SHA1 hash;&lt;br /&gt;&lt;br /&gt;    CryptoPP::FileSource( ( file ),true,&lt;br /&gt;        new CryptoPP::HashFilter(&lt;br /&gt;            hash, new CryptoPP::HexEncoder(&lt;br /&gt;                new CryptoPP::StringSink(result), false)&lt;br /&gt;        )&lt;br /&gt;    );&lt;br /&gt;    cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;&lt;br /&gt;    return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;it can be built with.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;g++ sha1.cpp -lcryptopp -o sha1sum&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;and tested with&lt;br /&gt;&lt;br /&gt;&lt;code&gt;./sha1sum filename&lt;/code&gt;&lt;br /&gt;It&amp;rsquo;s not meant to be a exactly compatible implementation of sha1sum. it doesn&amp;rsquo;t output the filename, it isn&amp;rsquo;t capable of handling more than one file argument, and if no argument is provided it crashes. I know I haven&amp;rsquo;t actually explained how the crypo++ code works, but I hope just posting this here will help someone in the future.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FSDaily security fail (see image)</title>
      <link>http://blog.xenoterracide.com/post/fsdaily-security-fail-see-image/</link>
      <pubDate>Sat, 05 Sep 2009 17:01:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/fsdaily-security-fail-see-image/</guid>
      <description>&lt;p&gt;&lt;a onblur=&#34;try {parent.deselectBloggerImageGracefully();} catch(e) {}&#34; href=&#34;http://2.bp.blogspot.com/_3oPDnpvYrb4/SqLUMaJclwI/AAAAAAAAABY/o-xV9JVASss/s1600-h/fs_daily_fail2.png&#34;&gt;&lt;img style=&#34;display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 334px;&#34; src=&#34;http://2.bp.blogspot.com/_3oPDnpvYrb4/SqLUMaJclwI/AAAAAAAAABY/o-xV9JVASss/s400/fs_daily_fail2.png&#34; border=&#34;0&#34; alt=&#34;&#34;id=&#34;BLOGGER_PHOTO_ID_5378094214676256514&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Hint, Hint! FSDaily don&amp;rsquo;t access your db with the root account. and definitely make sure that, that error page doesn&amp;rsquo;t show that to users.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PostgreSQL initial setup (authentication)</title>
      <link>http://blog.xenoterracide.com/post/postgresql-initial-setup-authentication/</link>
      <pubDate>Mon, 24 Aug 2009 01:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/postgresql-initial-setup-authentication/</guid>
      <description>&lt;p&gt;If you followed my &lt;a href=&#34;http://xenoterracide.blogspot.com/2009/03/postgresql-initial-setup-users-and.html&#34;&gt;last initial setup&lt;/a&gt; post on creating users and are running a default install of postgres you currently should be able to access the database on your cli. However, many distributions do not install postgres in a default manner. A great many distributions make the default authentication for sockets &lt;code&gt;ident sameuser&lt;/code&gt;. This is technically much more secure than &lt;code&gt;trust&lt;/code&gt; which is the default. However, you may find yourself locked out of your database on the local cli if you make the database name different. I personally was confused about this after first encountering this setting.&lt;br /&gt;&lt;br /&gt;So, we don&amp;rsquo;t want &lt;code&gt;trust&lt;/code&gt; but we want to use a db username other than our shell login, most likely because we have more than one database. There are several options but I personally think &lt;code&gt;ident&lt;/code&gt; is a good one. However, since we don&amp;rsquo;t want to use the same shell login name we have to modify &lt;code&gt;pg_ident.conf&lt;/code&gt; and &lt;code&gt;pg_hba.conf&lt;/code&gt;, locations vary by distribution.&lt;br /&gt;&lt;br /&gt;In &lt;code&gt;pg_ident.conf&lt;/code&gt; you have to create a line with the following formatting.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;# MAPNAME     IDENT-USERNAME    PG-USERNAME&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;I think it&amp;rsquo;s mostly straightforward. In case it isn&amp;rsquo;t, MAPNAME is an arbitrary identifier, sameuser is actually the mapname in &lt;code&gt;ident sameuser&lt;/code&gt; A quick example from mine would be&lt;br /&gt;&lt;br /&gt;&lt;code&gt;devel xenoterracide webdev&lt;/code&gt;where my unix username is xenoterracide but I created the database user webdev. If you wanted you could add another devel mapname with another user or the same unix account different db account, or even a different unix account same db account, etc.&lt;br /&gt;&lt;br /&gt;After you add all the various mappings you need to add or change the ident in pg_hba.conf. You can only have one method per type/database/user/address combination. so in pg_hba.conf you want to change &lt;br /&gt;&lt;br /&gt;&lt;code&gt; local all all &lt;trust or ident sameuser&gt;&lt;/code&gt; to &lt;code&gt;local all all ident devel&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;If you want postgres to ask for a password use &lt;code&gt;md5&lt;/code&gt; instead of &lt;code&gt;ident&lt;/code&gt; further information can be found at &lt;a href=&#34;http://www.postgresql.org/docs/current/interactive/auth-methods.html&#34;&gt;http://www.postgresql.org/docs/current/interactive/auth-methods.html&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;if you have any problems you might want to see &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/01/postgresql-initial-setup-authentication.html&#34;&gt;part 2&lt;/a&gt;.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding a new group to an open shell without logging in and out</title>
      <link>http://blog.xenoterracide.com/post/adding-a-new-group-to-an-open-shell-without-logging-in-and-out/</link>
      <pubDate>Sun, 23 Aug 2009 01:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adding-a-new-group-to-an-open-shell-without-logging-in-and-out/</guid>
      <description>&lt;p&gt;Most Unix users believe it&amp;rsquo;s impossible to add a group that was recently added to your user account without logging in and logging out. If you&amp;rsquo;re running X and need to give your gui new permissions (like dolphin/konqueoror) this may be true, for the most part. I don&amp;rsquo;t know how to change it for those processes. However, if you need to change it for a shell prompt it&amp;rsquo;s easy. You merely execute the command &lt;code&gt;newgrp &lt;newgroupname&gt;&lt;/code&gt; in an open shell prompt and that prompt will now be loaded with the new group. I believe it also changes the default group that shell is running as. So if you run &lt;code&gt;newgrp http; touch test.txt&lt;/code&gt; your file will be created with the group http instead of whatever your default is. You can change your group back to the default by using the &lt;code&gt;sg&lt;/code&gt; command.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More Security = Better. Wrong!</title>
      <link>http://blog.xenoterracide.com/post/more-security--better.-wrong/</link>
      <pubDate>Sat, 22 Aug 2009 19:54:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/more-security--better.-wrong/</guid>
      <description>&lt;p&gt;So I just had a discussion on &lt;a href=&#34;irc://chat.freenode.net/ubuntu-server&#34;&gt;#ubuntu-server on freenode&lt;/a&gt; about why my not having a password to connect to postgresql via a socket (read local cli) is insecure. So I asked them, how exactly is it that someone is going to get this access? The answer &amp;ldquo;there are bad people on the Internet&amp;rdquo;. I&amp;rsquo;m sure many people right now are agreeing with them and thinking I&amp;rsquo;m crazy. Let&amp;rsquo;s discuss my setup though shall we.&lt;br /&gt;&lt;br /&gt;Postgres: I&amp;rsquo;m using Ident, and not just sameuser ident. no I had to set a custom rule in the pg_ident.conf file for this user to access because the systemuser != the db user. so just typing psql at the command line should you get access still won&amp;rsquo;t get you into the db. you have to know which user/database to connect to. But that&amp;rsquo;s not that hard right? in fact it&amp;rsquo;s trivial.In addition you have to be a certain systemuser, only one works.&lt;br /&gt;&lt;br /&gt;User Access: There is only one user account on the system that can be logged into (it&amp;rsquo;s not root or a generic name). Only 2 people have the credentials to get shell access. One is my host, who happens to have physical and kvm access. The other is me who has ssh access.&lt;br /&gt;&lt;br /&gt;SSH: I have ssh on a high port with no password authentication, or root, allowed.&lt;br /&gt;&lt;br /&gt;So in order to passwordlessly access the database you would have to ssh into the system from a remote location or find an exploitable bug in apache (the only other service listening, or the kernel) that allows you to switch to my non apache user (meaning root access).&lt;br /&gt;&lt;br /&gt;In addition, this system user had rw access to the entire website which includes a file containing the password to the database in plain text. So let&amp;rsquo;s say I created a .pgpass file or variables? what exactly is it that would keep anyone who has access to this account from gaining access to the database? in fact wouldn&amp;rsquo;t it just make it easier, since pgpass has a known location and contains all connection info including the username/dbname string? &lt;br /&gt;&lt;br /&gt;But why do I need passwordless access anyways? I wrote a script that dumps the db every hour to a git repo and then pushes that to a remote.&lt;br /&gt;&lt;br /&gt;Could I secure it further? yeah I could. I could make the script run as a user who can&amp;rsquo;t log in at all and then put a pgpass in that users account. I&amp;rsquo;d have to properly ACL the webroot to give the correct write and read access. But is all this really necessary? maybe and I might do it, but at this point it&amp;rsquo;s not nearly as important as it was for me to get backups up and running, because regardless of all the security I implement, if I have no backup and someone finds that loophole in one of the pieces of software and uses it, I might just be screwed. At least now I can restore the site if it gets attacked.&lt;br /&gt;&lt;br /&gt;P.S. I was having a problem with my backup not being run by cron, never did figure out why.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iptables browsing samba shares</title>
      <link>http://blog.xenoterracide.com/post/iptables-browsing-samba-shares/</link>
      <pubDate>Sat, 16 May 2009 00:37:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/iptables-browsing-samba-shares/</guid>
      <description>&lt;p&gt;NOTE: this assumes that you&amp;rsquo;ve read my previous post on &lt;a href=&#34;http://xenoterracide.blogspot.com/2008/04/iptables-for-average-desktop-user.html&#34;&gt;basic iptables setup on the desktop&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;So I just spent the longest time trying to determine what ports I needed to browse and use samba shares. The sad answer is it&amp;rsquo;s just one.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;iptables -A INPUT -p udp &amp;ndash;sport 137 -j ACCEPT&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;the catch with all the information I found with google was that most of it was for samba servers. I didn&amp;rsquo;t want that. I just want to be able to browse my roommates network shares, and download from them. None of the information google provided suggested I need to allow the source port on the other end.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jeff Atwood fails at password security</title>
      <link>http://blog.xenoterracide.com/post/jeff-atwood-fails-at-password-security/</link>
      <pubDate>Wed, 06 May 2009 19:10:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/jeff-atwood-fails-at-password-security/</guid>
      <description>&lt;p&gt;This was originally written for a class assignment and as that has not been modified (much) for the web. &lt;br /&gt;&lt;br /&gt;Jeff Atwood&amp;rsquo;s password was compromised, the following includes a summary of how it happened, and how better security policies could have avoided it. This was written for Advanced Report Writing at Baker College.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Summary of Article&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;On May 3, 2009, Jeff Atwood reports that his Stack Overflow password was compromised an that he received an email explaining the details. The following is an excerpt of that email, that was posted in his blog post.&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;How? Well, there were two pieces of the puzzle, the password and the openid provider. I had a possible password; today your blog post    revealed the openid provider. I logged in, freaked out that it actually worked, then logged out. The only reason I had the password is because your password is totally inadequate for someone running a site like StackOverflow. I don&amp;rsquo;t want to go into any more detail than that, but man - dictionary password! -A friend of the site &lt;cite&gt;(Atwood, 2009)&lt;/cite&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;Jeff confirmed that the authentication logs for Stack Overflow did include a valid login from an unrecognized IP address. Although Jeff defends that his password was not a dictionary password. He also states that this particular OpenID account is for low security transactions online, and not particularly valuable. He digresses that because this account is a Stack Overflow moderation account, with special privileges, that he should have used a more secure login.&lt;br /&gt;&lt;br /&gt;Jeff goes on to explain, the various ways which the account could have been compromised. The first method he describes is the &amp;ldquo;educated guess&amp;rdquo;. An educated guess basically uses what you know about someone to guess there password. The second is &amp;ldquo;Brute force dictionary attack&amp;rdquo;. Jeff describes this as an attack vulnerable to non-rate limited logins where the password is a word out of the dictionary. The third method described is &amp;ldquo;interception&amp;rdquo;. This method is basically where the password was captured at some point between the user and its destination, this could be kelogger, packet sniffing, and/or simple lack of encryption. The final method was &amp;ldquo;Impersonation&amp;rdquo; where a site pretends to be a different site, and  prompts you for credentials, this is also known as phishing.&lt;br /&gt;&lt;br /&gt;Jeff presents that none of these methods were used to compromise his account.&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;I guess I can tell you, so you don&amp;rsquo;t fall into this trap again. There&amp;rsquo;s a site I help out with that doesn&amp;rsquo;t salt their passwords. They&amp;rsquo;re MD5 encrypted, but if you&amp;rsquo;ve got a dictionary password, it&amp;rsquo;s very easy to use a reverse-MD5 site to get the original. I was able to figure out you were a user on the site some time back, and realized I could do this, if only I knew your openid provider&amp;hellip; &lt;cite&gt;(Atwood, 2009)&lt;/cite&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Jeff then re-iterates that he is to blame, and this is a problem with programmers at large. He then suggests that programmers should get out of the business of storing credentials, if they don&amp;rsquo;t want to take responsibility for it.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Evaluation of the Article&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Jeff Atwood, is a fairly famous &lt;strike&gt;full time blogger&lt;/strike&gt; entrepreneur, software developer and blogger, and often seen as an authority in the community. He is self admittedly not an expert and these articles truly show this. Jeff&amp;rsquo;s articles will undoubtedly lead many programmers to be confused and ignorant about the types of attacks possible and the type of attack that actually took place. One good thing does come from these articles however. It increases developer awareness (and hopefully user) awareness of just how easy it is to compromise a password and how inadequate there own authentication systems may be.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Jeff seems to not understand the basics of all the attacks he&amp;rsquo;s described so I will elaborate on what they really are.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;   &lt;strong&gt;1. Educated Guess: &lt;/strong&gt;Jeff mostly has this right, however, in the article he calls this in with social engineering. It is in no way shape or form social engineering. Social Engineering generally requires convincing someone to give you information. An educated guess requires that you use information you already have to break the password. In a sense this was used to gain the login name, although it was not a guess, it was known. I once used an educated guess to break into the account of someone based on there age, gender, race, and password hint, none of which I had to gain any additional information on. note: my cracking of this account was 100% legal as it was authorized by the computer owner.&lt;br /&gt;&lt;br /&gt;   &lt;strong&gt;2. Brute Force:&lt;/strong&gt; This is combined with &amp;lsquo;dictionary attack&amp;rsquo; and although the two are often combined they are separate attacks. A brute force attack is simply generating account credentials (username password typically) with an automated computer program and sending them to the system you are attacking until it lets you in, until you are permanently blocked, or until you give up. A brute force attack is 100% successful unless somehow stopped as it will eventually try all combinations. The exception to this is when the password could be changed to a password already tried during the attack. This only works on a live system however, if the attacker manages to gain a copy of the password db they can attack at their leisure and may instead get a stale password. It can mostly be prevented by locking users out after a certain number of failed attempts.&lt;br /&gt;&lt;br /&gt;   &lt;strong&gt;3. Dictionary Attack:&lt;/strong&gt; A Dictionary attack, although it does reference words from an actual dictionary, such as Webster&amp;rsquo;s, it is not limited to just those words or even words. Dictionary attacks consist of lists of words which may come from any language, including fictional ones like Star Trek&amp;rsquo;s Klingon, slang, names and pop culture references. Because of modern security standards they will often append, and prepend numbers to the words, and even change case around. Dictionary attacks may also include coded words such as 1337 also know as leet or l337 or l33t, etc. 1337 is a substitution cipher popularized online which substitutes letters for numbers that slightly resemble letters. A dictionary attack is usually run before a brute force as it is much faster, and has a high probability of success compared to time used. It can be mostly prevented by forcing users passwords to be compared against known dictionaries (such as cracklib) and making sure their password isn&amp;rsquo;t in them, and forcing them to pick something else if it is.&lt;br /&gt;&lt;br /&gt;   &lt;strong&gt;4. Interception:&lt;/strong&gt; Interception is another name for &amp;ldquo;the Man in the Middle&amp;rdquo; attack, which is&lt;br /&gt;what it more commonly goes by. Jeff seems to be under the assumption that &amp;ldquo;Man in the Middle&amp;rdquo; requires the attacker to get the credentials verbatim. &amp;ldquo;Man in the Middle&amp;rdquo; basically means getting the data after the user enters it and before it reaches it&amp;rsquo;s destination, this include keyloggers, screen scrapers, and packet sniffers. it may include other methods I&amp;rsquo;m forgetting. &amp;ldquo;Man in the Middle&amp;rdquo; is easily prevented by user strong &amp;lsquo;stream encryption&amp;rsquo; in which all data sent between the client and the host is encrypted, SSL is commonly used for this on websites, note the &amp;lsquo;lock&amp;rsquo; icon, in your browser. This is different from hash encryption which is how the password is (should be) stored as it encrypts all data being transferred including the username and password hash.&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;5. Impersonation:&lt;/strong&gt; Or Phishing is a form of social engineering in which you pretend to be something you aren&amp;rsquo;t and attempt to get people to give you sensitive data such as account credentials. It is most commonly done by creating a website which closely resembles the site for which you are trying to get credentials for, and then sending out emails to try to get people to log in.&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;6. Social Engineering:&lt;/strong&gt; Social Engineering is simply misrepresenting yourself to get information. It can go as far as full blown fraud, or as simply as talking a person into giving me what they may not even believe is sensitive data. One could for example talk to someone, get there name, mention that they knew a woman who married a man with that last name and ask for a mother maiden name, pretending like they knew her. A mothers maiden name is a highly common question to prove identity in account verification and password resets online. People have also dressed up and walked into nuclear power plants with clipboards making themselves look like they belonged there, and were never stopped. An IT guy asking for your password may also be social engineering, as you think you should trust him. Social Engineering may be used to get account credentials or to formulate an educated guess.&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;7. Rainbow Tables:&lt;/strong&gt; Rainbow Tables are databases of all possible straight password hashes up to a certain number of characters, and there corresponding passwords, these hashes may or may not be included with a dictionary attack, they typically include the full contents of a brute force. The largest Rainbow tables includes all possible combinations up to 8 characters for md5 hashes. These make reversing a hash from a password instant and easy. It still requires the attacker get the hash in the first place, this is usually done by &amp;ldquo;man in the middle&amp;rdquo;, SQL Injection, or compromising the database server. This can generally be avoided by salt-ing the hash making it more difficult for the attacker to get the original password.&lt;br /&gt;&lt;br /&gt;Jeff&amp;rsquo;s Password was lost due to a combination of attacks. Firstly was public information, his &amp;lsquo;user&amp;rsquo; credentials (OpenID) were publicly available (this isn&amp;rsquo;t actually an attack), the second was &amp;ldquo;Man in the Middle&amp;rdquo;, as obviously no one published the hash, so it had to be gotten somehow enroute (unless the db was cracked). The third was &amp;ldquo;Rainbow Tables&amp;rdquo; which allowed the attacker to reverse the hash into a real password. I don&amp;rsquo;t believe that Atwood truly understands the attack vector&amp;rsquo;s, and I don&amp;rsquo;t think that people should read these articles for learning purposes. It is good though that he accepts some responsibility for lack of proper security practices on a sensitive account.&lt;br /&gt;&lt;br /&gt;In my opinion this is what&amp;rsquo;s wrong with programmers, they think they know better and instead of learning how to do it correctly and all the things that could go wrong, they just go ahead and do.&lt;br /&gt;&lt;br /&gt;Atwood, J. (2009). I Just Logged In As You. Retrieved&lt;br /&gt;     May 6 2009, from Coding Horror&lt;br /&gt;     Web site: &lt;a href=&#34;http://www.codinghorror.com/blog/archives/001262.html&#34;&gt;www.codinghorror.com/blog/archives/001262.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Atwood, J. (2009). I Just Logged In As You: How it happened. Retrieved&lt;br /&gt;     May 6 2009, from Coding Horror&lt;br /&gt;     Web site: &lt;a href=&#34;http://www.codinghorror.com/blog/archives/001263.html&#34;&gt;www.codinghorror.com/blog/archives/001263.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;EDIT: Sincerest apologies for originally spelling Atwood as Attwood and spreading misinformation about about his profession. Thanks to Stu for pointing this out. For some reason I thought those were both true, and did not check them, since I&amp;rsquo;ve been reading Coding Horror for at least a year.&lt;br /&gt;&lt;br /&gt;@Grade I&amp;rsquo;ll post it next week when I get it&lt;br /&gt;&lt;br /&gt;@Spelling errors, I had reinstalled my system the morning of writing and apparently had forgotten to configure it. They should be corrected now.&lt;br /&gt;&lt;br /&gt;@Assignment the assignment was not an essay but the evaluation of an article, and its content. It didn&amp;rsquo;t require me to cite any sources for why I agree or disagree with the article.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The real problem with windows is not windows</title>
      <link>http://blog.xenoterracide.com/post/the-real-problem-with-windows-is-not-windows/</link>
      <pubDate>Sat, 05 Jul 2008 12:39:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/the-real-problem-with-windows-is-not-windows/</guid>
      <description>&lt;p&gt;&lt;em&gt;(note: this was originally intended as a reply to &lt;a href=&#34;http://vivapinkfloyd.blogspot.com/2008/07/why-is-so-hard-for-windows-users-to.html&#34;&gt;Why Is So Hard for Windows Users to Understand That Linux Is Not Windows&lt;/a&gt;, but it got so long I felt it should be it&amp;rsquo;s own post. I&amp;rsquo;m not sure the title is good, but it&amp;rsquo;s close enough)&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;(note: I use the term users in this blog to mean people who use computers that do not, develop, administrate, repair, or are other wise considered power users, and professional computer users.)&lt;/em&gt; &lt;br /&gt;&lt;br /&gt;I don&amp;rsquo;t hate windows anymore, like &lt;a href=&#34;http://vivapinkfloyd.blogspot.com/2008/07/why-is-so-hard-for-windows-users-to.html&#34;&gt;Dan Craciun&lt;/a&gt; says they just aren&amp;rsquo;t the same thing. I switched to linux years ago, I see that it isn&amp;rsquo;t perfect anymore, but I still like it better than windows.&lt;br /&gt;&lt;br /&gt;If you told me that I had to ignore the constant rebooting on windows and the lack of gaming on linux. I would suggest that I can make either system as stable, and equal in terms of usefulness on the desktop. Sure it might take me a few more hours to secure windows, get drivers installed, and install security tools, and the software I like. But in the end they&amp;rsquo;d be close to the same, in usability and long term stability for me and normal users.&lt;br /&gt;&lt;br /&gt;The truth? the problem with windows isn&amp;rsquo;t entirely windows&amp;hellip; it&amp;rsquo;s users. I could teach a user 99% of what they need to know to maintain their computer and keep it running smooth in an hour, but they wouldn&amp;rsquo;t listen, they&amp;rsquo;d continue to use IE to browse promiscuously, not keep their antivirus, antispyware that I installed up to date.&lt;br /&gt;&lt;br /&gt;If you were to change everyone running windows xp to ubuntu (I don&amp;rsquo;t like ubuntu btw) today, I predict in 6 months to a year ubuntu users would have as many problems as windows users today? why? they wouldn&amp;rsquo;t update there systems&amp;hellip; they&amp;rsquo;d disable their firewalls, they would browse to all sorts of bad sites that contain the new linux malware.&lt;br /&gt;&lt;br /&gt;How do I know this? I&amp;rsquo;ve put &amp;lsquo;users&amp;rsquo; on linux, specifically opensuse, which has a nice little update checker&amp;hellip; I show them how to use that after resolving the problems of codecs, and drivers and whatever else install problems they might have. In a week that icon is red, and will stay that way indefinitely because they never ever run updates.&lt;br /&gt;&lt;br /&gt;So the real problem is users not treating there computers like cars, and ignoring the fact that they need proper maintenance and there are just some things you shouldn&amp;rsquo;t do with them. True linux is easier for me to fix, mostly due to the lack of a registry, but the  problem is not make and model, but lack of maintenance (and yes some makes and models are easier to maintain). If you don&amp;rsquo;t ever get an oil change or add to your oil your engine will burn up a lot faster than it would if you had take care of it.&lt;br /&gt;&lt;br /&gt;The one thing that M$ does that causes me to still hate them, because it affects me, is IE. If I had one thing I wanted from microsoft it would be a browser with the standards compliance on par with the likes of Mozilla Firefox (they don&amp;rsquo;t have to achieve opera, or webkit) and without their own proprietary syntax, they have to do it the same way as everyone else (e.g. no active X calls instead of XMLHttpRequest..) But even if IE8 managed to be this browser, it wouldn&amp;rsquo;t help anytime soon&amp;hellip; why? because users don&amp;rsquo;t update their software.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>