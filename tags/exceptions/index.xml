<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exceptions on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/exceptions/index.xml</link>
    <description>Recent content in Exceptions on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/exceptions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Better Exceptions with Exception::Base</title>
      <link>http://blog.xenoterracide.com/post/better-exceptions-with-exceptionbase/</link>
      <pubDate>Mon, 21 May 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/better-exceptions-with-exceptionbase/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve done some &lt;a href=&#34;http://www.xenoterracide.com/2012/05/perl-core-syntax-wishlist-die-should.html&#34;&gt;complaining&lt;/a&gt; and &lt;a href=&#34;http://www.xenoterracide.com/2012/05/perl-core-syntax-wishlist-exception.html&#34;&gt;explaining&lt;/a&gt; about what I&amp;rsquo;d like to see in regards to Exceptions in Perl. I Mostly explained what I wanted for catching Exceptions, and a little on throwing Exception objects, but not really how those objects should behave. I&amp;rsquo;ve looked at and tried various exception modules, including &lt;a href=&#34;http://perldoc.perl.org/Carp.html&#34;&gt;croak, confess&lt;/a&gt;, and &lt;a href=&#34;https://metacpan.org/module/Throwable&#34;&gt;Throwable&lt;/a&gt;.  I basically spent time one day reading the manuals of most of the exception objects on CPAN. Most of them didn&amp;rsquo;t allow me to easily for the exceptions I needed (meaning they required more work than I thought I should do for one or two exceptions ). Among these modules I found &lt;a href=&#34;https://metacpan.org/module/Exception::Base&#34;&gt;Exception::Base&lt;/a&gt;, which appears to do everything I need (though I still wish for something like it in core, with shinier syntax).  Of course wee need to be able to throw simple Exceptions, preferably ones that can stringify, and are easily matched in a switch or if statement. &lt;a href=&#34;https://metacpan.org/module/Exception::Base&#34;&gt;Exception::Base&lt;/a&gt; can do all of that, and it even boolifies to true. &lt;script src=&#34;https://gist.github.com/2657327.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;use Try::Tiny;&lt;br /&gt;use Exception::Base;&lt;br /&gt;&lt;br /&gt;try {&lt;br /&gt;    if ( 0 ) {&lt;br /&gt;        Exception::Base-&amp;gt;throw( message =&amp;gt; &amp;lsquo;this sucks&amp;rsquo;, value =&amp;gt; 0 );&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    if ( 1 ) {&lt;br /&gt;        Exception::Base-&amp;gt;throw( message =&amp;gt; &amp;lsquo;this really sucks&amp;rsquo;, value =&amp;gt; 1 );&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;catch {&lt;br /&gt;    given ( $_ ) {&lt;br /&gt;        when ( $_ == 0 ) {&lt;br /&gt;            say $&lt;em&gt;;&lt;br /&gt;        }&lt;br /&gt;        when ( $&lt;/em&gt; == 1 ) {&lt;br /&gt;            say $_;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt; A really big thing I wanted was a class I could easily add attributes to without writing a whole new package/pm and subclassing it there. I wanted this because I really wanted to be able to have 2 kinds of messages, one for programmers, and one for users, but truthfully I only had one class where I needed this flexibility (at the time). It is also occasionally useful to have attributes that describe something, e.g. would be really useful in moose attribute exceptions, to be able to have an object where you could catch the exception and get the attribute name without parsing. Fortunately &lt;a href=&#34;https://metacpan.org/module/Exception::Base&#34;&gt;Exception::Base&lt;/a&gt; can do this too. &lt;script src=&#34;https://gist.github.com/2657880.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;&lt;br /&gt;use 5.014;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;use Try::Tiny;&lt;br /&gt;use Exception::Base (&lt;br /&gt;    &amp;lsquo;My::Exception&amp;rsquo; =&amp;gt; {&lt;br /&gt;        has =&amp;gt; [ qw( usermsg logmsg attr ) ],&lt;br /&gt;        string&lt;em&gt;attributes =&amp;gt; [ qw( usermsg logmsg ) ],&lt;br /&gt;    },&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;try {&lt;br /&gt;        My::Exception-&amp;gt;throw(&lt;br /&gt;            value =&amp;gt; 1,&lt;br /&gt;            attr    =&amp;gt; &amp;lsquo;bad&amp;rsquo;,&lt;br /&gt;            logmsg  =&amp;gt; &amp;lsquo;really obscure and technical&amp;rsquo;,&lt;br /&gt;            usermsg =&amp;gt; &amp;lsquo;this message is useless&amp;rsquo;&lt;br /&gt;        );&lt;br /&gt;}&lt;br /&gt;catch {&lt;br /&gt;    warn $&lt;/em&gt;;&lt;br /&gt;    say $&lt;em&gt;-&amp;gt;usermsg;    &lt;br /&gt;&lt;br /&gt;    say &amp;lsquo;this is really bad&amp;rsquo; if $&lt;/em&gt;-&amp;gt;attr eq &amp;lsquo;bad&amp;rsquo;;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt; You&amp;rsquo;ll notice if you run this script that in the warn, both &lt;code&gt;usermsg&lt;/code&gt; and &lt;code&gt;logmsg&lt;/code&gt; are printed because they are both &lt;code&gt;string_attributes&lt;/code&gt;. You&amp;rsquo;ll also notice that &lt;code&gt;attr&lt;/code&gt; isn&amp;rsquo;t printed at all, but that we can look at it directly to make other decisions.  &lt;a href=&#34;https://metacpan.org/module/Exception::Base&#34;&gt;Exception::Base&lt;/a&gt; has other features such as setting the &lt;code&gt;verbosity&lt;/code&gt; so you can go from a &lt;code&gt;croak&lt;/code&gt; level message to a full stacktrace. It also allows you to &lt;code&gt;ignore_package&lt;/code&gt;s so that the exception does not appear to be thrown from that package. This is similar to &lt;code&gt;@CARP_NOT&lt;/code&gt;.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Core Syntax Wishlist: die should die</title>
      <link>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-die-should-die/</link>
      <pubDate>Mon, 14 May 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-die-should-die/</guid>
      <description>&lt;p&gt;I hate &lt;a href=&#34;http://perldoc.perl.org/functions/die.html&#34;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; it is, in my humble opinion, one of the worst parts of perl. I really wish it would be deprecated, and removed, or at least replaced with something that would tell you were the code that was die-ing was being called. Replace its implementation with that of &lt;a href=&#34;http://perldoc.perl.org/Carp.html&#34;&gt;Carp&amp;rsquo;s&lt;/a&gt; &lt;code&gt;croak&lt;/code&gt; or &lt;code&gt;confess&lt;/code&gt; and I&amp;rsquo;d be happy. Better yet, let&amp;rsquo;s just get &lt;a href=&#34;http://www.xenoterracide.com/2012/05/perl-core-syntax-wishlist-exception.html&#34;&gt;real exception support&lt;/a&gt; and deprecate die (even if that&amp;rsquo;s never removed deprecation just make that real big on its pod). If you&amp;rsquo;re using &lt;code&gt;die&lt;/code&gt; please stop and &lt;a href=&#34;http://perldoc.perl.org/Carp.html&#34;&gt;use Carp&lt;/a&gt;, anyone using your module will thank (and by thank I mean not curse) you later.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Core Syntax Wishlist: an Exception Stack</title>
      <link>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-an-exception-stack/</link>
      <pubDate>Mon, 07 May 2012 22:30:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-an-exception-stack/</guid>
      <description>&lt;p&gt;I have come to wish many things were part of&amp;nbsp;&lt;a href=&#34;http://perldoc.perl.org/perlsyn.html&#34;&gt;Perl syntax&lt;/a&gt;&amp;nbsp;that are not, and no using external modules is not enough for me. I think it&amp;rsquo;s time Perl got the features as part of the language itself (and yes I suppose I could settle for feature.pm, and no I&amp;rsquo;m probably not going to write them myself, I&amp;rsquo;m not smart enough yet). The first of these is a proper exception stack. I want to be able to write: &lt;script src=&#34;https://gist.github.com/2632082.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;use 5.018;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;sub foo {&lt;br /&gt;    throw Exception-&amp;gt;new( &amp;lsquo;message&amp;rsquo; );&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;try {&lt;br /&gt;    foo();&lt;br /&gt;}&lt;br /&gt;catch ( &amp;lsquo;Exception&amp;rsquo; ) {&lt;br /&gt;     say &amp;ldquo;$&lt;em&gt;&amp;rdquo;; # object stringifies&lt;br /&gt;}&lt;br /&gt;catch ( &amp;lsquo;Exception::Other&amp;rsquo; ) {&lt;br /&gt;     say $&lt;/em&gt;-&amp;gt;message #also has an accessor&lt;br /&gt;}&lt;br /&gt;finally {&lt;br /&gt;     &amp;hellip;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;I think we need &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;finally&lt;/code&gt; keywords.  And no I don&amp;rsquo;t think it makes sense to have &lt;code&gt;Object-&amp;gt;throw&lt;/code&gt;. In fact I think this &lt;a href=&#34;http://www.perl6.org/archive/rfc/63.html&#34;&gt;Original Perl 6 Syntax Proposal&lt;/a&gt; reads like just what we need in Perl 5. Unfortunately I think &lt;a href=&#34;http://perl6advent.wordpress.com/2011/12/15/day-15-something-exceptional/&#34;&gt;this&lt;/a&gt; is what we are getting in Perl 6, which IMO is not as nice.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>