<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpanplus on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/cpanplus/index.xml</link>
    <description>Recent content in Cpanplus on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/cpanplus/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Managing CPAN on Arch Linux</title>
      <link>http://blog.xenoterracide.com/post/managing-cpan-on-arch-linux/</link>
      <pubDate>Sun, 14 Mar 2010 00:45:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/managing-cpan-on-arch-linux/</guid>
      <description>&lt;p&gt;So if you&amp;rsquo;re running Arch Linux and want to install a bunch of packages from CPAN the best way is NOT to use the official cpan client, or even the new cpanminus. No your best bet is to use AUR or lacking AUR packages, create your own, and I&amp;rsquo;m gonna walk you through how I do it. The really nice thing about installing packages with Pacman is that unlike cpan there is a utility to uninstall them.&lt;br /&gt;&lt;br /&gt;The first thing you&amp;rsquo;ll want is a utility that allows you to easily manage aur. Right now the Recommended tool appears to be a CLI utility called &lt;a href=&#34;http://aur.archlinux.org/packages.php?ID=33378&#34;&gt;packer&lt;/a&gt; you&amp;rsquo;ll want to download the &lt;a href=&#34;http://wiki.archlinux.org/index.php/PKGBUILD&#34;&gt;PKGBUILD&lt;/a&gt;, on the packer page, to a directory of it&amp;rsquo;s own and run &lt;code&gt;&lt;a href=&#34;http://wiki.archlinux.org/index.php/Makepkg&#34;&gt;makepkg&lt;/a&gt; -s&lt;/code&gt; in that directory and then (as root) &lt;code&gt;&lt;a href=&#34;http://wiki.archlinux.org/index.php/Pacman&#34;&gt;pacman&lt;/a&gt; -U pkgname-pkgver.pkg.tar.gz&lt;/code&gt;. You&amp;rsquo;ve now installed Packer, which means you&amp;rsquo;ll never have to install an AUR package like that again (barring a new install of arch). If you really want you can stop now and just use the packages provided by arch, myself, and other aur contributors. The general conversion in name is is the CPAN module DBIx::Class becomes perl-dbix-class. However running &lt;code&gt;packer dbix-class&lt;/code&gt; will find it. packer is capable of searching all of aur and the official repositories and giving you options if more than one is available. If you want to learn how to make your own packages, or just plain ignore aur and use cpanp to install read on.&lt;br /&gt;&lt;br /&gt;So now you&amp;rsquo;ll want to install CPANPLUS with packer. This is easy just run &lt;code&gt;packer perl-cpanplus&lt;/code&gt;. This should install CPANPLUS and any of its deps. Now install &lt;a href=&#34;http://search.cpan.org/dist/CPANPLUS-Dist-Arch/&#34;&gt;CPANPLUS::Dist::Arch&lt;/a&gt;&lt;br /&gt;with &lt;code&gt;packer perl-cpanplus-dist-arch&lt;/code&gt;. There are other &amp;lsquo;cpan&amp;rsquo; options but this is the only one that&amp;rsquo;s on both CPAN and AUR, and it has some really nice functionality.&lt;br /&gt;&lt;br /&gt;Now you have your entire installer stack but you still need to configure C::D::A. Run &lt;code&gt;setupdistarch&lt;/code&gt;. This will configure cpanplus to automatically create any package it creates as an Arch pkg, it can even install them. For example &lt;code&gt;packer perl-moose&lt;/code&gt; and &lt;code&gt;cpanp -i Moose&lt;/code&gt; will both install Moose with Pacman. The first will use the package I&amp;rsquo;ve uploaded to AUR and the second will use C::D::A to create one (which is exactly what I did).&lt;br /&gt;&lt;br /&gt;So now you know the basics of Installing packages, but I&amp;rsquo;m guessing you still want to know, how I&amp;rsquo;m managing over 200 perl packages. C::D::A is actually making this easier all the time (esp since I talk to the author). first you&amp;rsquo;ll want to create a directory to store all your AUR packages, the name isn&amp;rsquo;t important. So you&amp;rsquo;ll want to create your first package like &lt;code&gt;cpan2aur -d Catalyst::Runtime&lt;/code&gt; you&amp;rsquo;ll note that this creates the directory &lt;code&gt;perl-catalyst-runtime&lt;/code&gt; in that directory there is a &lt;code&gt;PKGBUILD.tt&lt;/code&gt; it contains syntax similar to Template::Toolkit, it is however home grown by the author of C::D::A. you can use it to add stuff the the resulting PKGBUILD. To create the PKGBUILD you&amp;rsquo;ll run &lt;code&gt;cpan2aur perl-catalyst-runtime&lt;/code&gt; it will create the PKGBUILD and the tarball for AUR. However, if you&amp;rsquo;re really planning on making this for AUR and no package is on AUR or you own the one on AUR you can just run &lt;code&gt;cpan2aur -u perl-catalyst-runtime&lt;/code&gt; and it will create all the aforementioned things plus upload them with your AUR account. It&amp;rsquo;s worth noting that if you attempt to run &lt;code&gt;cpan2aur &lt;directory&gt;&lt;/code&gt; and a PKGBUILD already exists it will ask you if you wish to overwrite, unless you&amp;rsquo;ve made changes to it say yes, if you aren&amp;rsquo;t updating to a new version on cpan it will ask if you want to update the pkgrel. I specifically requested that because it was annoying to increment by hand and I needed to update the PKGBUILD because of things like dep or provides changes.&lt;br /&gt;&lt;br /&gt;Unfortunately cpan2aur cannnot generate an entire dep tree worth of directories. It&amp;rsquo;s worth saying that you don&amp;rsquo;t really have to run cpan2aur -d at all, you could just go right to cpan2aur -u, but then you&amp;rsquo;d miss out on the wonder that is cpan2aur &amp;ndash;check. You can run &lt;code&gt;cpan2aur &amp;ndash;check perl-*&lt;/code&gt; and it will automagically check for updates of any directory that starts with perl- and upload the updates to AUR.&lt;br /&gt;&lt;br /&gt;Unfortunately C::D::A has some limitations. The first is that it really Doesn&amp;rsquo;t use Template Toolkit or even Template::Tiny (which I suggested). This doesn&amp;rsquo;t seem to matter to much&amp;hellip; but I wonder if it could help me with the other problem. C::D::A can&amp;rsquo;t correctly determine optdepends because it gets the deps from the generated Makefiles. I&amp;rsquo;m not sure if this could be fixed or not, I don&amp;rsquo;t yet understand this part of making CPAN packages enough.&lt;br /&gt;&lt;br /&gt;Happy packaging.&lt;br /&gt;&lt;br /&gt;UPDATE: &lt;br /&gt;&lt;br /&gt;you don&amp;rsquo;t need &lt;code&gt;cpan2aur -u &amp;ndash;check&lt;/code&gt;, &lt;code&gt;cpan2aur &amp;ndash;check&lt;/code&gt; implies -u&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>