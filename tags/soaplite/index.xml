<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Soaplite on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/soaplite/index.xml</link>
    <description>Recent content in Soaplite on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/soaplite/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>New Module: MooseX::RemoteHelper (RFC)</title>
      <link>http://blog.xenoterracide.com/post/new-module-moosexremotehelper-rfc/</link>
      <pubDate>Mon, 04 Jun 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/new-module-moosexremotehelper-rfc/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Background&lt;/h2&gt;&lt;p&gt;I have spent much of the last year writing and refining &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facades&lt;/a&gt;. At this point I&amp;rsquo;ve worked with SOAP, REST/JSON, and RPC url-form-encoded API&amp;rsquo;s. One of the hardest parts I&amp;rsquo;ve found is dealing with the serialization of a &lt;a href=&#34;http://martinfowler.com/eaaCatalog/dataTransferObject.html&#34;&gt;Data Transfer Object&lt;/a&gt; with a Perl interface into whatever the remote is expecting. When I started I didn&amp;rsquo;t know of these patterns, or really anything about these patterns. I highly recommend reading &lt;a href=&#34;http://www.amazon.com/gp/product/0321127420/ref=as_li_ss_tl?ie=UTF8&amp;tag=xenotsblog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321127420&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321127420&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;) if you want to know more about these patterns or things like Active Record and MVC.&lt;/p&gt;&lt;h3&gt;problem&lt;/h3&gt;&lt;p&gt;The problems I&amp;rsquo;ve encountered are many, including the fact most remotes are buggy or have a cludgy interface. Though there&amp;rsquo;s nothing you can do about a remote api that you don&amp;rsquo;t control, you can make your local API much cleaner and more native. Doing this however comes with a few challenges. One is that you have to map a local attribute name to a remote attribute name, because Perl uses underscores, and Java uses camel case, e.g &lt;code&gt;postal_code and postalCode&lt;/code&gt;. The second problem is that many times the value of the attribute in its perl native form is not what the remote wants, e.g. perl boolean &amp;ldquo;1&amp;rdquo; remote &amp;ldquo;Y&amp;rdquo;, or a &lt;a href=&#34;https://metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; object to W3C formatting. This second is not quite the same as mapping, because mapping is one to one, this translation could be turning an array into a comma separated string. The third problem, I didn&amp;rsquo;t run into until after I &amp;ldquo;solved&amp;rdquo; the first , is how should I deal with nested complex objects (one&amp;rsquo;s that can&amp;rsquo;t be just converted to just a string). &lt;/p&gt;&lt;p&gt;My first naive remote facade was very procedural and simply assembled top to bottom, in part because it was based on &lt;a href=&#34;https://metacpan/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;, and in part because I had yet to figure out a better way. This resulted in a giant unwieldy if/then chain. Obviously my translations were just inline too. &lt;/p&gt;&lt;p&gt;The next thing I tried was using triggers to construct a request hash to pass to &lt;a href=&#34;https://metacpan/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;. This worked better as the hash constructing code was kept right next to the attribute, so if I needed to modify the local or remote attribute, I could just go look at the attribute and the trigger tied to it. &lt;/p&gt;&lt;p&gt;After that I tried to use a &lt;a href=&#34;http://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; to translate from the native attribute name to the remote attribute name. This may have been more successful had it worked more like the &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Assembler in the Remote Facade&lt;/a&gt;. But ult imately since we were developing a rapidly changing API it seemed to bog me down, this is because I was changing the attributes on both sides of the mapping and thus the mapping at the same time (so at least 3 places). Here I was just manually dealing with the translation from a W3C DateTime format to the object I needed. &lt;/p&gt;&lt;h2&gt;a solution&lt;/h2&gt;&lt;p&gt;When I got assigned to yet another API and found myself doing yet another mapping and translation I decided that I needed to solve the problem. Enter the first iteration of &lt;a href=&#34;https://metacpan.org/module/MooseX::RemoteHelper&#34;&gt;MooseX::RemoteHelper&lt;/a&gt;. The first tie I used it with the form-url-encoded API so it was only needed for a single level of key, value pairs. .&lt;/p&gt;&lt;script src=&#34;https://gist.github.com/2822416.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;package MessagePart {&lt;br /&gt;    use Moose 2;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has array =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;SomeColonDelimitedArray&amp;rsquo;,&lt;br /&gt;        isa        =&amp;gt; &amp;lsquo;ArrayRef&amp;rsquo;,&lt;br /&gt;        is         =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return join( &amp;lsquo;:&amp;lsquo;, @{ $attr-&amp;gt;get_value( $instance ) } );&lt;br /&gt;        },&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;p&gt;Once I determined how to create MX::RemoteHelper it was simply a matter of using &lt;a href=&#34;https://metacpan.org/module/Class::MOP::Class&#34;&gt;Class::MOP::Class&lt;/a&gt; API&amp;rsquo;s to iterate all the attributes.  The source of &lt;a href=&#34;https://github.com/xenoterracide/MooseX-RemoteHelper/blob/master/lib/MooseX/RemoteHelper/CompositeSerialization.pm&#34;&gt;CompositeSerialization&lt;/a&gt; will give you some idea of how I did this. &lt;/p&gt;&lt;p&gt;Then I went back to apply this to a previous module, because the technique appears to be cleaner. Unfortunately I ran into a problem, this other API was a complex data structure, and how best to provide nested hashrefs and arrayrefs. Though I was now armed with Patterns I didn&amp;rsquo;t know of one that would solve the problem. Fortunately a quick flip through the &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;tag=xenotsblog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&#34;&gt;Gang of Four&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; brought me to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Composite_pattern&#34;&gt;Composite Pattern&lt;/a&gt;. I used this to write the recursive &lt;a href=&#34;https://github.com/xenoterracide/MooseX-RemoteHelper/blob/master/lib/MooseX/RemoteHelper/CompositeSerialization.pm&#34;&gt;CompositeSerialization&lt;/a&gt; so that if I had a sufficiently complex nested structure I could simply create another object to deal with that. Here&amp;rsquo;s a full example: &lt;script src=&#34;https://gist.github.com/2822109.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.014;&lt;br /&gt;use warnings;&lt;br /&gt;use Data::Dumper;&lt;br /&gt;&lt;br /&gt;package MessagePart {&lt;br /&gt;    use Moose;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has array =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;SomeColonDelimitedArray&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;ArrayRef&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return join( &amp;lsquo;:&amp;lsquo;, @{ $attr-&amp;gt;get_value( $instance ) } );&lt;br /&gt;        },&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;    &lt;br /&gt;package Message {&lt;br /&gt;    use Moose;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has bool =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;Boolean&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Bool&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return $attr-&amp;gt;get_value( $instance ) ? &amp;lsquo;Y&amp;rsquo; : &amp;lsquo;N&amp;rsquo;;&lt;br /&gt;        },&lt;br /&gt;&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    has foo_bar =&amp;gt; (&lt;br /&gt;        remote_name =&amp;gt; &amp;lsquo;FooBar&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Str&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    has part =&amp;gt; (&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;MessagePart&amp;rsquo;,&lt;br /&gt;        remote_name =&amp;gt; &amp;lsquo;MyMessagePart&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;my $message&lt;br /&gt;= Message-&amp;gt;new({&lt;br /&gt;    bool    =&amp;gt; 0,&lt;br /&gt;    foo_bar =&amp;gt; &amp;lsquo;Baz&amp;rsquo;,&lt;br /&gt;    part    =&amp;gt; MessagePart-&amp;gt;new({ array =&amp;gt; [ qw( 1 2 3 4 ) ] }),&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;say Dumper $message-&amp;gt;serialize&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;Which should give you this data structure: &lt;script src=&#34;https://gist.github.com/2822552.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;{&lt;br /&gt;  Boolean =&amp;gt; &amp;ldquo;N&amp;rdquo;,&lt;br /&gt;  FooBar =&amp;gt; &amp;ldquo;Baz&amp;rdquo;,&lt;br /&gt;  MyMessagePart =&amp;gt; {&lt;br /&gt;    SomeColonDelimitedArray =&amp;gt; &amp;ldquo;1:2:3:4&amp;rdquo;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;h2&gt;Request For Comment&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve recently released a &lt;a href=&#34;http://search.cpan.org/~xeno/MooseX-RemoteHelper-0.001010-TRIAL/lib/MooseX/RemoteHelper.pm&#34;&gt;Trial version of MooseX::RemoteHelper&lt;/a&gt; to CPAN. I&amp;rsquo;m currently refactoring &lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; to use it, and it appears to be solid. What I&amp;rsquo;d like to know what people think of the module names, method names and any other comments they might have. I haven&amp;rsquo;t been entirely sure that I&amp;rsquo;ve been naming things correctly while writing this, or that the code couldn&amp;rsquo;t be better in other ways. If there&amp;rsquo;s functionality you wish it had but doesn&amp;rsquo;t let me know. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with SOAP using Perl: Part 2 ( SOAP::Data::Builder )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-2--soapdatabuilder-/</link>
      <pubDate>Sun, 11 Mar 2012 16:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-2--soapdatabuilder-/</guid>
      <description>&lt;p&gt;&lt;p&gt;Start by reading the first 2 parts : &lt;ol style=&#34;list-style: none;&#34;&gt;  &lt;li&gt;Part 0 &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-0.html&#34;&gt;Prelude (setup server.pl)&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;Part 1 &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;SOAP::Lite&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;&lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; is simply a wrapper around SOAP::Data and SOAP::Serializer for &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;. I used it because it made my life easier building nested complicated SOAP objects. However for Part 2 I will simply be showing how to use it to do the same code as Part 1. Unfortunately since Part 1 is so Simple this actually makes &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; more complex than &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt; would be for this. In a future installment I will attempt to show more complex examples, but I will explain them less. Now let&amp;rsquo;s take a look at the code. &lt;p&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/1971794.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl&lt;br /&gt;use 5.010;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use SOAP::Lite +trace =&amp;gt; [ &amp;lsquo;debug&amp;rsquo; ];&lt;br /&gt;use SOAP::Data::Builder;&lt;br /&gt;&lt;br /&gt;my $req = SOAP::Lite-&amp;gt;new(&lt;br /&gt;    readable   =&amp;gt; 1,&lt;br /&gt;    proxy      =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://localhost:8877&#39;&#34;&gt;http://localhost:8877&#39;&lt;/a&gt;,&lt;br /&gt;    ns         =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://namesservice.thomas_bayer.com/&#39;&#34;&gt;http://namesservice.thomas_bayer.com/&#39;&lt;/a&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;my $sb = SOAP::Data::Builder-&amp;gt;new;&lt;br /&gt;&lt;br /&gt;$sb-&amp;gt;add_elem(&lt;br /&gt;    name  =&amp;gt; &amp;lsquo;name&amp;rsquo;,&lt;br /&gt;    value =&amp;gt; &amp;lsquo;Mark&amp;rsquo;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;my $res = $req-&amp;gt;getNameInfo( $sb-&amp;gt;to_soap_data );&lt;br /&gt;&lt;br /&gt;say &amp;lsquo;-&amp;rsquo; x 3;&lt;br /&gt;&lt;br /&gt;unless ( defined $res-&amp;gt;fault ) {&lt;br /&gt;    say scalar $res-&amp;gt;valueof(&amp;lsquo;//country&amp;rsquo;);&lt;br /&gt;} else {&lt;br /&gt;    say $res-&amp;gt;fault-&amp;gt;{faultstring};&lt;br /&gt;    say $res-&amp;gt;fault-&amp;gt;{detail}{error};&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;p&gt;As you can see this is much the same as the final code in &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;Part 1&lt;/a&gt;, and if you run it, it does exactly the same thing. The first difference you&amp;rsquo;ll notice is the self explanatory creation of the &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; object. After that comes the &lt;code&gt;-&amp;gt;add_elem&lt;/code&gt; method call, which will simply create an element with a given element name and a value for that element. &lt;/p&gt;&lt;p&gt;Once you&amp;rsquo;ve finished adding elements to your &lt;code&gt;$sb&lt;/code&gt; object, then you can call pass &lt;code&gt;$sb-&amp;gt;to_soap_data&lt;/code&gt; to the method that you&amp;rsquo;re calling on SOAP::Lite, this generates the structure that SOAP::Lite needs to be able to make your request. &lt;/p&gt;&lt;p&gt;The only thing I didn&amp;rsquo;t like about SOAP::Data::Builder is if you don&amp;rsquo;t pass the right parameters to &lt;code&gt;-&amp;gt;add_elem&lt;/code&gt; it will not croak or error in any way that will really tell you what went wrong. &lt;a href=&#34;https://github.com/xenoterracide/SOAP-Data-Builder/commit/f16f5d693a366f2d9fd2ecca693e7622a3d24cae&#34;&gt;Simple patches to this can fix it&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with SOAP using Perl: Part 1 ( SOAP::Lite )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-1--soaplite-/</link>
      <pubDate>Sat, 22 Oct 2011 15:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-1--soaplite-/</guid>
      <description>&lt;p&gt;The most prevalent of SOAP libraries for Perl is&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;&amp;nbsp;it is the oldest and most documented. Though for all of its documentation it can be quite painful to figure out how to use it.&lt;br /&gt;&lt;br /&gt;First make sure you&amp;rsquo;ve read&amp;nbsp;&lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-0.html&#34;&gt;Part 0&lt;/a&gt;&amp;nbsp;to set up the server. Once that&amp;rsquo;s done let&amp;rsquo;s look at the most simple way to interface with this server.&lt;br /&gt;&lt;br /&gt;In our first example we need to send a request to &lt;code&gt;getCountries&lt;/code&gt;, which is a method provided by the API. You can determine this by reading &lt;code&gt;namesservice.wsdl&lt;/code&gt; and looking for the &lt;code&gt;operation&lt;/code&gt;s to see what&amp;rsquo;s available. Essentially this means we need to send SOAP request with a Body of &lt;code&gt;&amp;lt;getCountries /&amp;gt;&lt;/code&gt;. First we need to import SOAP::Lite.&lt;br /&gt;&lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1285860&#34;&gt;https://gist.github.com/1285860&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1285860.js&#34;&gt;&lt;/script&gt;If you look at our SOAP::Lite import you&amp;rsquo;ll notice that were are passing the arguments &lt;code&gt;+trace =&amp;gt; [ &amp;lsquo;debug&amp;rsquo; ]&lt;/code&gt;. There are various levels and options for +trace, but this turns on full debug printing which will be sent to stderr. You don&amp;rsquo;t normally want to have debug running in production code, but it will be useful to illustrate our examples and the request they send and receive.&lt;br /&gt;&lt;br /&gt;Now let&amp;rsquo;s look at creating an actual SOAP::Lite request object. &lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1285987&#34;&gt;https://gist.github.com/1285987&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1285987.js&#34;&gt;  &lt;/script&gt;The first option we pass in is &lt;code&gt;readable =&amp;gt; 1&lt;/code&gt;, adds whitespace to the request sent so that it&amp;rsquo;s easier to read when you&amp;rsquo;re looking at the debug output, you should not enable this in production, as it makes the request bigger, and I believe it is not considered correct SOAP as I&amp;rsquo;ve been told something about extra whitespace in SOAP being considered invalid. The second option is &lt;code&gt;proxy =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://localhost:8877&#39;&#34;&gt;http://localhost:8877&#39;&lt;/a&gt;&lt;/code&gt; This specifies the hostname and port that the HTTP request is sent to. &lt;code&gt;ns =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://namesservice.thomas_bayer.com/&#39;&#34;&gt;http://namesservice.thomas_bayer.com/&#39;&lt;/a&gt;&lt;/code&gt; is the namespace, which you can find by looking for namespace in the &lt;code&gt;namesservice.wsdl&lt;/code&gt;.  &lt;br /&gt;&lt;br /&gt;Now we need to actually create and send an actual request. &lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1286050&#34;&gt;https://gist.github.com/1286050&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1286050.js&#34;&gt;  &lt;/script&gt; For this trivial request we simply need to call the method that we need on the remote server and then return the object. You can see that SOAP::Lite is generating a namespace for your request to use with the XML &lt;code&gt;&amp;lt;namesp1:getCountries xsi:nil=&amp;ldquo;true&amp;rdquo;&amp;gt;&lt;/code&gt;, which is just fine in this case.&lt;br /&gt;&lt;br /&gt;Of course we want to do something with our response. Please note that I&amp;rsquo;ve modified the code to use 5.10, but if you want to use print instead of say this code will work fine on 5.6 and up.&lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1286109&#34;&gt;https://gist.github.com/1286109&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1286109.js&#34;&gt;  &lt;/script&gt; &lt;code&gt;valueof&lt;/code&gt;, which is documented in &lt;a href=&#34;https://metacpan.org/module/SOAP::SOM#ACCESSING-ELEMENT-VALUES&#34;&gt;SOAP::SOM&lt;/a&gt;, returns the first element in scalar context, and an array in array context. So in my code I&amp;rsquo;ve shown both. The syntax used in the parameters to &lt;code&gt;valueof&lt;/code&gt; is &lt;a href=&#34;http://www.w3schools.com/xpath/xpath_syntax.asp&#34;&gt;XPath&lt;/a&gt;, so an even simpler way to call it in this case would be &lt;code&gt;$res-&amp;gt;valueof(//country);&lt;/code&gt; and it would do the same thing with this XML. &lt;br /&gt;&lt;br /&gt;Next let&amp;rsquo;s look at the &lt;code&gt;getNameInfo&lt;/code&gt; method, it&amp;rsquo;s a bit more complex so let&amp;rsquo;s look at the XML in the XSD. Here&amp;rsquo;s the snippet that is really important. &lt;script src=&#34;https://gist.github.com/1300052.js&#34;&gt;  &lt;/script&gt;This means that we need to send a request with a body that looks like &lt;script src=&#34;https://gist.github.com/1300074.js&#34;&gt;  &lt;/script&gt; &lt;em&gt;( note: you can look at the sample data in &lt;code&gt;MyExampleData.pm&lt;/code&gt; for other names. )&lt;/em&gt; Set let&amp;rsquo;s take a stab at writing some Perl.&lt;script src=&#34;https://gist.github.com/1300131.js&#34;&gt;  &lt;/script&gt; There are some important differences to note from our previous script. You&amp;rsquo;ll notice that I call &lt;code&gt;-&amp;gt;getNameInfo()&lt;/code&gt; directly on the request object, instead of passing it as a parameter to &lt;code&gt;-&amp;gt;call&lt;/code&gt;. This functions basically the same as &lt;code&gt;call&lt;/code&gt; and it will end up making the first tag inside of body. We could have doen this in our first example as &lt;code&gt;$req-&amp;gt;getCountries;&lt;/code&gt; and that would have been it. Now that we&amp;rsquo;ve covered the slight differences in calls, let&amp;rsquo;s go over the completely new things.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://metacpan.org/module/SOAP::Data&#34;&gt;SOAP::Data&lt;/a&gt; objects are used to create any further data structures. Obviously the hash key of &lt;code&gt;name&lt;/code&gt; defines the element name, and &lt;code&gt;value&lt;/code&gt; defines what you want to go into it, here I have hardcoded &amp;ldquo;Mark&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;If you run this code you&amp;rsquo;ll notice that it returns a faultstring (among other fault properties) &amp;ldquo;operation getNameInfo for SOAP11 called with invalid data&amp;rdquo;, and details the error as &amp;ldquo;element `c-gensym3&amp;rsquo; not processed at {&lt;a href=&#34;http://namesservice.thomas_bayer.com/}getNameInfo&amp;quot;&#34;&gt;http://namesservice.thomas_bayer.com/}getNameInfo&amp;quot;&lt;/a&gt;. Now go back and look at the request, you&amp;rsquo;ll see a &lt;code&gt;c-gensym3&lt;/code&gt; element, where did that come from? Well, SOAP::Lite will generate elements for anonymous elements but we can fix this. &lt;script src=&#34;https://gist.github.com/1300304.js&#34;&gt;  &lt;/script&gt;&lt;br /&gt;&lt;br /&gt;The only difference between this and the previous code is that we aren&amp;rsquo;t putting a &lt;code&gt;&amp;lt;/code&amp;gt; in front of &lt;code&gt;SOAP::Data&lt;/code&gt;. I wrote it the first way because I had seen examples of that all over the place, and could not find a solution to getting rid of the gensyms until I asked &lt;a href=&#34;http://stackoverflow.com/q/6986679/206466&#34;&gt;this question on stackoverflow&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;Unfortunately this is the most complex example that our server API has implemented. As an exercise to the reader I suggest Implementing a request for the method &lt;code&gt;getNamesInCountry&lt;/code&gt;, which is no more complex but available.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>