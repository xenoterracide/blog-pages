<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baker on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/baker/index.xml</link>
    <description>Recent content in Baker on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/baker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Teaching Perl - Week 2</title>
      <link>http://blog.xenoterracide.com/post/teaching-perl---week-2/</link>
      <pubDate>Sun, 18 Apr 2010 22:15:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/teaching-perl---week-2/</guid>
      <description>&lt;p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-part-0-preface.html&#34;&gt;Week 0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-week-1-part1.html&#34;&gt;Week 1 (part 1)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-week-1-part2.html&#34;&gt;Week 1 (part 2)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Guess the Number&lt;/h2&gt;So our little game is exceptionally mediocre and not very fun. &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Head-First-Programming-Learners-Language/dp/0596802374?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Head First Programming: A Learner&amp;#39;s Guide to Programming Using the Python Language&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596802374&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; suggests we give the game player some help by telling them if the number is lower or Higher.&lt;script src=&#34;http://gist.github.com/370592.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;Guess the number: &amp;ldquo;;&lt;br /&gt;my $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;if ( $guess == 5 ) {&lt;br /&gt;        say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;}&lt;br /&gt;elsif ( $guess &amp;gt; 5 ) {&lt;br /&gt;        say &amp;ldquo;Too high&amp;rdquo;;&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;        say &amp;ldquo;Too low&amp;rdquo;;&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;This game is a lot less challenging, and still not very good. So one one of the problems is it exits instead of letting it try till we get it right. So lets change that.&lt;script src=&#34;http://gist.github.com/370613.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;my $guess = 0;&lt;br /&gt;until ( $guess == 5 ) {&lt;br /&gt;        say &amp;ldquo;Guess the number: &amp;ldquo;;&lt;br /&gt;        $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;        if ( $guess == 5 ) {&lt;br /&gt;                say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        elsif ( $guess &amp;gt; 5 ) {&lt;br /&gt;                say &amp;ldquo;Too high&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        else {&lt;br /&gt;                say &amp;ldquo;Too low&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;This one is going to show your students something they likely haven&amp;rsquo;t seen before. An &lt;code&gt;&lt;a href=&#34;http://perldoc.perl.org/perlsyn.html#Statement-Modifiers&#34;&gt;until&lt;/a&gt;&lt;/code&gt; statement. &lt;code&gt;until&lt;/code&gt; is logically equivalent to &lt;code&gt;while not&lt;/code&gt; or in this case you could write &lt;code&gt;while ( $guess != 5 ) {&amp;hellip;}&lt;/code&gt; and have it do exactly the same thing.&lt;br /&gt;&lt;br /&gt;We&amp;rsquo;ve got some bad practices in this code it lacks useful comments and uses a magic number. Also the instructions aren&amp;rsquo;t clear if you don&amp;rsquo;t know how the program is written. Let&amp;rsquo;s add that stuff next.&lt;script src=&#34;http://gist.github.com/370622.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&lt;br /&gt;# guess a number game&lt;br /&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;my $winning_num = 5;&lt;br /&gt;&lt;br /&gt;my $guess = 0; #initialize outside of loop so loop executes properly&lt;br /&gt;until ( $guess == $winning_num ) {&lt;br /&gt;&lt;br /&gt;        say &amp;ldquo;Guess a number between 1 and 10: &amp;ldquo;;&lt;br /&gt;        # get the number from the user&lt;br /&gt;        $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;        # check to see if we have a winner, or the guess is too high, or low.&lt;br /&gt;        if ( $guess == $winning_num ) {&lt;br /&gt;                say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        elsif ( $guess &amp;gt; $winning_num ) {&lt;br /&gt;                say &amp;ldquo;Too high&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        else {&lt;br /&gt;                say &amp;ldquo;Too low&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;So this code is too simple for comments, but I&amp;rsquo;ve tried to show what I think some good ones would be. Usually &amp;lsquo;novice&amp;rsquo; books say use meaningful comments but don&amp;rsquo;t show any. Students then end up writing comments like &lt;code&gt;# initialize local variable guess to 0&lt;/code&gt;. That&amp;rsquo;s not useful the code obviously says that. Instead comments should say, what a larger chunk of is trying to do, or why it&amp;rsquo;s doing it that way.&lt;br /&gt;&lt;br /&gt;In &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Head-First-Programming-Learners-Language/dp/0596802374?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Head First Programming: A Learner&amp;#39;s Guide to Programming Using the Python Language&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596802374&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; the author uses the variable &lt;code&gt;secret&lt;/code&gt; where I&amp;rsquo;ve used &lt;code&gt;$winning_num&lt;/code&gt; because he ends up using a random number generator (we will in a moment), however, this is not a very descriptive name. &lt;code&gt;$winning_num&lt;/code&gt; is a better name because it&amp;rsquo;s more descriptive of what the number actually is. He also skips removing the &amp;lsquo;magic numbers&amp;rsquo; step which is probably why the variable name used is poor.&lt;br /&gt;&lt;br /&gt;So let&amp;rsquo;s make the winning number random.&lt;script src=&#34;http://gist.github.com/370650.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;# generate the winning number between 1 and 10&lt;br /&gt;my $winning_num = int( rand(10) );&lt;br /&gt;&lt;br /&gt;my $guess = 0; #initialize outside of loop so loop executes properly&lt;br /&gt;until ( $guess == $winning_num ) {&lt;br /&gt;&lt;br /&gt;        say &amp;ldquo;Guess a number between 1 and 10: &amp;ldquo;;&lt;br /&gt;        # get the number from the user&lt;br /&gt;        $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;        # check to see if we have a winner, or the guess is to high, or low.&lt;br /&gt;        if ( $guess == $winning_num ) {&lt;br /&gt;                say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        elsif ( $guess &amp;gt; $winning_num ) {&lt;br /&gt;                say &amp;ldquo;Too high&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        else {&lt;br /&gt;                say &amp;ldquo;Too low&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;There we go&amp;hellip; Now are number is random. &amp;hellip; &amp;hellip; &amp;hellip; notice the logic error yet? no? go read the &lt;a href=&#34;http://perldoc.perl.org/functions/rand.html&#34;&gt;rand&lt;/a&gt; documentation. Got it now? ok simply put this generates 10 total possible random numbers starting at 0, e.g 0-9. Our code isn&amp;rsquo;t broken but it&amp;rsquo;s not doing what we want. But the docs don&amp;rsquo;t say how to generate a range&amp;hellip; how can I do that? run &lt;code&gt;perldoc -q random&lt;/code&gt; this will return perlfaq4 we&amp;rsquo;re looking for &lt;a href=&#34;http://perldoc.perl.org/perlfaq4.html#How-do-I-get-a-random-number-between-X-and-Y%3f&#34;&gt;How do I get a random number between X and Y?&lt;/a&gt;. That tells us how to fix it&amp;hellip; our code should now look something like.&lt;script src=&#34;http://gist.github.com/370661.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;# generate the winning number between 1 and 10&lt;br /&gt;# see perlfaq4 for algorithm details&lt;br /&gt;my $winning_num = 1 + int( rand( (10-1)+1 ) );&lt;br /&gt;&lt;br /&gt;my $guess = 0; #initialize outside of loop so loop executes properly&lt;br /&gt;until ( $guess == $winning_num ) {&lt;br /&gt;&lt;br /&gt;        say &amp;ldquo;Guess a number between 1 and 10: &amp;ldquo;;&lt;br /&gt;        # get the number from the user&lt;br /&gt;        $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;        # check to see if we have a winner, or the guess is to high, or low.&lt;br /&gt;        if ( $guess == $winning_num ) {&lt;br /&gt;                say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        elsif ( $guess &amp;gt; $winning_num ) {&lt;br /&gt;                say &amp;ldquo;Too high&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;        else {&lt;br /&gt;                say &amp;ldquo;Too low&amp;rdquo;;&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;we could just put 10 in rand in this case but that&amp;rsquo;s not as flexible. You&amp;rsquo;ll also note I commented on why we did it that way. Kind of a way of making sure no one goes back to the other way, it also tells people why we did it this way.&lt;br /&gt;&lt;br /&gt;If you&amp;rsquo;ve used another language you might ask, &amp;ldquo;Why not use a switch case?&amp;rdquo;. Most instructors and books say &amp;ldquo;perl doesn&amp;rsquo;t have a switch case&amp;rdquo;. Even &lt;a href=&#34;http://perldoc.perl.org/perlintro.html#Conditional-and-looping-constructs&#34;&gt;perl intro&lt;/a&gt; still falsely states that &lt;blockquote&gt;&amp;ldquo;Perl has most of the usual conditional and looping constructs except for case/switch (but if you really want it, there is a Switch module in Perl 5.8 and newer, and on CPAN.&amp;rdquo;&lt;/blockquote&gt;. That&amp;rsquo;s even worse! Switch.pm has been in core for a while now&amp;hellip; but is deprecated an you should &lt;strong&gt;NOT&lt;/strong&gt; use it. since perl 5.10.0 perl has had a &lt;a href=&#34;http://perldoc.perl.org/perlsyn.html#Switch-statements&#34;&gt;Switch statement&lt;/a&gt;, so let&amp;rsquo;s rewrite our code using that.&lt;script src=&#34;http://gist.github.com/370673.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use feature &amp;lsquo;switch&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;# generate the winning number between 1 and 10&lt;br /&gt;# see perlfaq4 for algorithm details&lt;br /&gt;my $winning_num = 1 + int( rand( (10-1)+1 ) );&lt;br /&gt;&lt;br /&gt;my $guess = 0; #initialize outside of loop so loop executes properly&lt;br /&gt;until ( $guess == $winning&lt;em&gt;num ) {&lt;br /&gt;&lt;br /&gt;        say &amp;ldquo;Guess a number between 1 and 10: &amp;ldquo;;&lt;br /&gt;        # get the number from the user&lt;br /&gt;        $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;        # check to see if we have a winner, or the guess is to high, or low.&lt;br /&gt;        given( $guess ) {&lt;br /&gt;                when ( $&lt;/em&gt; &amp;gt; $winning&lt;em&gt;num ) {&lt;br /&gt;                        say &amp;ldquo;Too high&amp;rdquo;;&lt;br /&gt;                }&lt;br /&gt;                when ( $&lt;/em&gt; &amp;lt; $winning_num ) {&lt;br /&gt;                        say &amp;ldquo;Too low&amp;rdquo;;&lt;br /&gt;                }&lt;br /&gt;                when ( $winning&lt;em&gt;num ) {&lt;br /&gt;                        say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;                }&lt;br /&gt;        }&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;Note the use of &lt;code&gt;use feature &amp;lsquo;switch&amp;rsquo;;&lt;/code&gt; make sure you use this instead of &lt;code&gt;use Switch;&lt;/code&gt; which will use the now deprecated Switch.pm module.&lt;br /&gt;&lt;br /&gt;You can shorten &lt;code&gt;use feature &amp;lsquo;say&amp;rsquo;; use feature &amp;lsquo;switch&amp;rsquo;;&lt;/code&gt; to &lt;code&gt;use feature qw(say switch);&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Beside&amp;rsquo;s introducing switch/case this introduces the default argument &lt;code&gt;$&lt;/em&gt;&lt;/code&gt; and smart matching.&lt;br /&gt;&lt;br /&gt;You&amp;rsquo;ll also note that I changed the algorithm but my comments didn&amp;rsquo;t change.&lt;br /&gt;&lt;br /&gt;As you can see &lt;a href=&#34;http://en.wikipedia.org/wiki/There&#39;s_more_than_one_way_to_do_it&#34;&gt;TIMTOWTDI&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Homework&lt;/h2&gt;What else is wrong with our game? how could we fix it? How could we prevent the problem from being reintroduced? How can we be sure that our random problem is actually fixed? and make sure that it&amp;rsquo;s not reintroduced? Can you think of any other ways we can write this program? or any other improvements? write the program so that it has 3 difficulty levels easy, medium, hard with  ranges 1-10,1-100,1-1000 respectively. Blog these to Iron Man.&lt;br /&gt;&lt;br /&gt;Optional: if you have &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Programming-Principles-Practice-Using-C/dp/0321543726?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Programming: Principles and Practice Using C++&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0321543726&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; have your students do Drill 1 from chapter 3 (obviously in perl not c++).&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Perl - Week 1 - ( Part2 )</title>
      <link>http://blog.xenoterracide.com/post/teaching-perl---week-1----part2-/</link>
      <pubDate>Sun, 18 Apr 2010 05:29:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/teaching-perl---week-1----part2-/</guid>
      <description>&lt;p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-part-0-preface.html&#34;&gt;Week 0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-week-1-part1.html&#34;&gt;Week 1 (part 1)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Padre - Perl IDE&lt;/h2&gt;Now let&amp;rsquo;s install &lt;a href=&#34;http://padre.perlide.org/&#34;&gt;Padre the Perl IDE&lt;/a&gt; to give the students a nice development environment. There are instructions on the website, however, &lt;code&gt;cpanp -i Padre&lt;/code&gt; should get the trick done since it is on &lt;a href=&#34;cpan.org&#34;&gt;CPAN&lt;/a&gt; In the future Strawberry will ship with Padre but that future isn&amp;rsquo;t quite here.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;First Program&lt;/h2&gt;Ok so we want to make sure that we have Perl installed correctly and since you&amp;rsquo;re taking my advice I&amp;rsquo;m assuming that you&amp;rsquo;ve given your students access to 5.10.1 and may have 5.8 as well&amp;hellip; So I&amp;rsquo;m gonna do this one twice. Have them create a text file hello_world.pl and add the following lines&lt;br /&gt;&lt;code&gt;&lt;br /&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;br /&gt;print &amp;ldquo;Hello, World\n&amp;rdquo;;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;Since I&amp;rsquo;m sure this is not your students first programming class this will be familliar to them. Explain the shebang (#!) line and note that it has no effect on windows. Now let&amp;rsquo;s modernize it, using the &lt;a href=&#34;http://perldoc.perl.org/functions/say.html&#34;&gt;say&lt;/a&gt; feature from perl 5.10.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;#!/usr/bin/env perl&lt;br /&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;Hello, World&amp;rdquo;;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;note the removal of the \n and that &lt;code&gt;use feature&lt;/code&gt; is a &lt;a href=&#34;http://perldoc.perl.org/feature.html&#34;&gt;pragma&lt;/a&gt; that allows you to enable features that are newer in perl that weren&amp;rsquo;t available in the original perl 5. Perl is a bit backwards about this, IMO. We should be using the newest version and features unless we specify otherwise, IMO, but that&amp;rsquo;s not how it works, ATM. If 5.10 isn&amp;rsquo;t available to you and your students just use print in future examples. I will be excluding the shebang line from future examples too.&lt;br /&gt;&lt;br /&gt;Now let&amp;rsquo;s expand hello world a bit. Have them Make it print&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;Hello, programming!&lt;br /&gt;Here we go!&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;First thing is to make use of &lt;a href=&#34;http://perldoc.perl.org/perlop.html#Constant-Folding&#34;&gt;concatenation&lt;/a&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;Hello, programming&amp;rdquo;&lt;br /&gt;    . &amp;ldquo;Here we go&amp;rdquo;;  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;This example is inspired by &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Programming-Principles-Practice-Using-C/dp/0321543726?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Programming: Principles and Practice Using C++&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0321543726&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; ( This is an excellent book and should be the textbook for BOTH C++ classes at Baker. I recommend all novice to intermediate programmers have a copy whether you like C++, or not, this book is excellent ). Please note that the &lt;code&gt;.&lt;/code&gt; operator is in the front. This draws a programmers attention to it and notes that it&amp;rsquo;s a continuation. See &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Best-Practices-Damian-Conway/dp/0596001738?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl Best Practices&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596001738&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; for more details on this.&lt;br /&gt;&lt;br /&gt;Your output will be.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Hello, programming Here we go&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;That&amp;rsquo;s not what we want! obviously say appends a newline to the end but doesn&amp;rsquo;t help with long strings.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;Hello, programming\n&amp;rdquo;                                                                            &lt;br /&gt;    . &amp;ldquo;Here we go&amp;rdquo;;  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Much Better.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Simple Game&lt;/h2&gt;Now let&amp;rsquo;s up the ante a bit. Again not there first programming class, the following example is rewritten in Perl from &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Head-First-Programming-Learners-Language/dp/0596802374?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Head First Programming: A Learner&amp;#39;s Guide to Programming Using the Python Language&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596802374&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; which arguably should be the textbook for Intro to Programming. This is the first example that book gives in chapter 1 (but it gives it in python).&lt;script src=&#34;http://gist.github.com/370527.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;use feature &amp;lsquo;say&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;welcome&amp;rdquo;;&lt;br /&gt;&lt;br /&gt;say &amp;ldquo;Guess the number: &amp;ldquo;;&lt;br /&gt;my $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;if ( $guess == 5 ) {&lt;br /&gt;        say &amp;ldquo;You Win!&amp;rdquo;;&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;        say &amp;ldquo;You Lose&amp;rdquo;;&lt;br /&gt;}&lt;br /&gt;say &amp;ldquo;Game over!&amp;rdquo;;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;note: you can use &amp;lt; STDIN &amp;gt; but blogger screws it up because of the brackets. This code works exactly the same.&lt;br /&gt;&lt;br /&gt;So now you can discuss: &lt;a href=&#34;http://perldoc.perl.org/perldata.html#Scalar-values&#34;&gt;scalars&lt;/a&gt;, &lt;a href=&#34;http://perldoc.perl.org/perlsyn.html#Compound-Statements&#34;&gt;if then else statements&lt;/a&gt;,and &lt;a href=&#34;http://perldoc.perl.org/functions/readline.html&#34;&gt;readline&lt;/a&gt;. There are also two additional pragma&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/strict.html&#34;&gt;strict&lt;/a&gt; and &lt;a href=&#34;http://perldoc.perl.org/warnings.html&#34;&gt;warnings&lt;/a&gt; that you should tell your students to always use unless they have a &amp;lsquo;good&amp;rsquo; reason to disable them (these have been there since the beginning). &lt;br /&gt;&lt;br /&gt;So usually on the first night of class you&amp;rsquo;re lucky to get past hello world. I think this is all doable. In 1 small program I just took you all the way to Chapter 6 in &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Example-3rd-Ellie-Quigley/dp/0130282510?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl by Example (3rd Edition)&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0130282510&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; the chapter on  control structures. Remember, this is not your students first class&amp;hellip; you don&amp;rsquo;t need to hold their hand through all this. Race through it so they can improve on it as the term goes on. Instead of spending 4 weeks (assuming a chapter a week) on if then statements you can now spend 10&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Homework&lt;/h2&gt;Start a blog using whatever site you prefer (preexisting blogs acceptable) and add it to &lt;a href=&#34;http://ironman.enlightenedperl.org&#34;&gt;Iron Man&lt;/a&gt;. Do a first post that talks a little about you (blog can be anonymous). Include a copy of the simple game and what you think would be better about it. Also mention anything you&amp;rsquo;d like to do with, or know about, Perl.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Perl - Week 1 - ( Part1 )</title>
      <link>http://blog.xenoterracide.com/post/teaching-perl---week-1----part1-/</link>
      <pubDate>Tue, 13 Apr 2010 18:13:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/teaching-perl---week-1----part1-/</guid>
      <description>&lt;p&gt;Make sure you&amp;rsquo;ve read &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-part-0-preface.html&#34;&gt;Part 0&lt;/a&gt; first.&lt;br /&gt;&lt;br /&gt;As I said before Baker provides a Linux server for the perl class. However, none of the students have had a unix class. So I advise touching on it and giving them a link to &lt;a href=&#34;http://www.ee.surrey.ac.uk/Teaching/Unix/&#34;&gt;these tutorials&lt;/a&gt; if they want to use it, and a helping hand. The book also talks about ActiveState but this isn&amp;rsquo;t the recommended way to do perl on windows anymore. Avoiding crux will prevent you from wasting a week or more on unix which is not what the class is about (my instructor failed horribly at this, and at knowing unix (or perl for that matter) well enough to cover it).&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Strawberry&lt;/h2&gt;&lt;a href=&#34;http://strawberryperl.com/&#34;&gt;Strawberry Perl&lt;/a&gt; is the recommend open source binaries for windows these days and should work just like the unix ones. You should cover not only normal installation; but installing to their network drives (use portable edition), so they can have strawberry on any baker computer on campus; and to their flash drives (use portable edition), so they can take it with them to any computer running windows.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;CPAN&lt;/h2&gt;Next you should mention &lt;a href=&#34;http://www.cpan.org/&#34;&gt;CPAN&lt;/a&gt;. CPAN is the #1 resource in perl, if you need to do something, most of the time someone else has done it for you and it&amp;rsquo;s on CPAN. Don&amp;rsquo;t forget to mention &lt;a href=&#34;http://search.cpan.org&#34;&gt;search.&lt;/a&gt; and &lt;a href=&#34;kobesearch.cpan.org&#34;&gt;kobesearch.&lt;/a&gt;cpan.org.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;local::lib&lt;/h3&gt;After talking about CPAN use it. Help your students &lt;a href=&#34;http://www.perladvent.org/2009/3/&#34;&gt;install&lt;/a&gt; a &lt;a href=&#34;http://search.cpan.org/dist/local-lib/lib/local/lib.pm&#34;&gt;local::lib&lt;/a&gt; esp if you&amp;rsquo;re using the schools linux server which won&amp;rsquo;t allow installs of global CPAN modules.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Task::Kensho&lt;/h3&gt;You&amp;rsquo;ll want to recommend that students check out &lt;a href=&#34;http://search.cpan.org/dist/Task-Kensho/lib/Task/Kensho.pm&#34;&gt;Task::Kensho&lt;/a&gt; which a CPAN module that lists all the best modules for common tasks, they may not be the only module for that task but they are the recommended ones. You could have them install them with &lt;code&gt;cpanp -i Task::Kensho&lt;/code&gt; at this point or just recommend they look them over to see if they might find them useful. These are all probably ahead of where your students are at, but it never hurts to point useful libraries out early. Just tell them they can get back to them later. Note: local::lib is on Task::Kensho.&lt;br /&gt;&lt;br /&gt;P.S. Week 1 will be multipart I have to leave now but I want to hit publish. coming next is how to teach them to do their first program the right way so they don&amp;rsquo;t have to learn it twice.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Teaching Perl - Part 0 - Preface</title>
      <link>http://blog.xenoterracide.com/post/teaching-perl---part-0---preface/</link>
      <pubDate>Tue, 13 Apr 2010 16:10:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/teaching-perl---part-0---preface/</guid>
      <description>&lt;p&gt;This is my 2 cents on how perl should be getting taught at my school. My school&amp;rsquo;s curriculum sucks in general across the board. But assuming I can&amp;rsquo;t change what classes are taught, when and what prerequisites this is how I would teach perl given the current computer science curriculum.&lt;br /&gt;&lt;br /&gt;Since people reading this are probably not familiar with the Fail that is &lt;a href=&#34;http://baker.edu&#34;&gt;Baker College&lt;/a&gt; (I would not choose Baker if I had to start again but credits don&amp;rsquo;t transfer easily, so it was easier to continue on with it). Baker has 10 week courses, and with tech courses they are seemingly exclusively scheduled  6-10pm once per week. So this factors into how I&amp;rsquo;ll lay this out.&lt;br /&gt;&lt;br /&gt;Specifically for the perl class the curriculum provides the schools crux server which is running CentOS linux or something&amp;hellip; (I&amp;rsquo;m not sure which distro it is atm). It does not have the prerequisite of Linux 101 though, and it&amp;rsquo;s not in there curriculum. I don&amp;rsquo;t believe it has &lt;i&gt;any&lt;/i&gt; prerequisites other than &lt;strong&gt;intro to programming&lt;/strong&gt;. It is a 300 level course, however. This means that most/all students in the course have probably taken a few C++, Visual Basic, and Java classes (there are about 6 of these classes at the 200 level and I imagine most have done at least 2 of the 6).&lt;br /&gt;&lt;br /&gt;The book required at Baker is currently &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Example-4th-Ellie-Quigley/dp/0132381826?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl by Example (4th Edition)&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0132381826&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt;. I&amp;rsquo;d suggest telling students it&amp;rsquo;s recommended but not required (If you won&amp;rsquo;t get in trouble) in any event you and students shouldn&amp;rsquo;t need to use this book at all, because a great book &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Beginning-Perl-Simon-Cozens/dp/1861003145?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Beginning Perl&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=1861003145&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; is &lt;a href=&#34;http://learn.perl.org/books/beginning-perl/&#34;&gt;free online&lt;/a&gt;. Also the non book resources for perl are practically limitless and you should be encouraging the use of these. Some of them include&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://learn.perl.org&#34;&gt;learn.perl.org&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://perldoc.perl.org&#34;&gt;perldoc&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://kobesearch.cpan.org&#34;&gt;kobesearch.cpan.org&lt;/a&gt; or&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://search.cpan.org&#34;&gt;search.cpan.org&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://ironman.enlightenedperl.org/&#34;&gt;Iron Man&lt;/a&gt; or&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://sayperl.org/&#34;&gt;SayPerl&lt;/a&gt; (AKA Iron Man with all posts translated)&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://webchat.freenode.net/?channels=perl&#34;&gt;Perl Channel on Freenode&lt;/a&gt; if they need to ask for help&lt;/li&gt;&lt;/ul&gt;You should have a copy of &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Best-Practices-Damian-Conway/dp/0596001738?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl Best Practices&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596001738&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt;. I&amp;rsquo;ve been told that you should read this with a grain of salt, that it&amp;rsquo;s only like 50% accurate these days&amp;hellip; but I think it&amp;rsquo;s still a good place to start, and you can pick and choose what to use from it. You may also want a copy of &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Intermediate-Perl-Randal-L-Schwartz/dp/0596102062?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Intermediate Perl&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596102062&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; For more advanced discussion on references and Object Oriented perl.&lt;br /&gt;&lt;br /&gt;You may also want a good resource as a Linux CLI reference. &lt;a href=&#34;http://www.ee.surrey.ac.uk/Teaching/Unix/&#34;&gt;This&lt;/a&gt; series of tutorials was recommended to me.&lt;br /&gt;&lt;br /&gt;I will continue to post on the subject matter that I would cover each week, in this 10 part series (programmers count from zero ;) ). I may also discuss &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Example-3rd-Ellie-Quigley/dp/0130282510?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl by Example (3rd Edition)&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0130282510&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; because that was the required book when I took the class, even though 4ed was out.&lt;br /&gt;&lt;br /&gt;Update: &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/teaching-perl-week-1-part1.html&#34;&gt;Week 1 (part1)&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>