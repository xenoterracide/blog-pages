<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Passwords on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/passwords/index.xml</link>
    <description>Recent content in Passwords on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/passwords/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making Secure Recoverable Passwords ( part 3 )</title>
      <link>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords--part-3-/</link>
      <pubDate>Wed, 03 Nov 2010 08:12:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords--part-3-/</guid>
      <description>&lt;p&gt;If you haven&amp;rsquo;t read &lt;a href=&#34;http://www.xenoterracide.com/2008/04/making-secure-recoverable-passwords.html&#34;&gt;Part 1&lt;/a&gt; please do so.&lt;br /&gt;&lt;br /&gt;Although the criticism of &lt;a href=&#34;http://www.xenoterracide.com/2010/07/making-secure-recoverable-passwords.html&#34;&gt;Part 2&lt;/a&gt; should be taken with a grain of &lt;a href=&#34;http://xkcd.com/538/&#34;&gt;XKCD Salt&lt;/a&gt;, and even the primary plaintiff admitted that it would take him 2 months to crack the final salted sha512. Usually your attacker shouldn&amp;rsquo;t have your shadow file, and having stored them as anything less is just plain not secure. I will acknowledge it has some merit.&lt;br /&gt;&lt;br /&gt;Doing a base64 transformation on hex only digits is a bad, idea, and does not have nearly enough possible combinations. Nothing is going to be more secure than random, but random isn&amp;rsquo;t really recoverable, if you lose it. That&amp;rsquo;s why I do some kind of transformation.&lt;br /&gt;&lt;br /&gt;I believe that somewhere someone suggested that it would be better to convert from the binary digest into base64 as it would be more random than from hex. I believe this is accurate, but the method suggested was in Perl, which is kind of messy, and more importantly hard to remember. So &lt;a href=&#34;http://unix.stackexchange.com/questions/3675/how-can-i-get-a-base64-encoded-shax-on-the-cli&#34;&gt;I asked, on unix.stackexchange.com, how I could do this on the command line&lt;/a&gt;. Here&amp;rsquo;s the answer I decided to accept:&lt;br /&gt;&lt;br /&gt;&lt;code&gt;echo -n &lt;code&gt;date&lt;/code&gt; | openssl dgst -binary -sha512 | base64&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;Remember you should slightly modify the result in a way that you can remember in your head to make it random, and probably use something in place of the &amp;ldquo;date&amp;rdquo; command, since it&amp;rsquo;s not reproduce-able.&lt;br /&gt;&lt;br /&gt;Again: this is not meant to be as secure as random passwords, just secure enough compared to &lt;i&gt;non random&lt;/i&gt; alternatives.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making secure recoverable Passwords (Part 2)</title>
      <link>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords-part-2/</link>
      <pubDate>Fri, 23 Jul 2010 21:32:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords-part-2/</guid>
      <description>&lt;p&gt;This has been prompted by &lt;a href=&#34;http://varlogrant.blogspot.com/2010/07/quick-code-post-genpasswordpl.html&#34;&gt;Dave Jacoby&amp;rsquo;s post on generating passwords&lt;/a&gt; and the fact that I&amp;rsquo;ve learned a new trick since my &lt;a href=&#34;http://xenoterracide.blogspot.com/2008/04/making-secure-recoverable-passwords.html&#34;&gt;my first article in 2008&lt;/a&gt;; which you should read first (it&amp;rsquo;s a prereq).&lt;br /&gt;&lt;br /&gt;Some might point out that using a hex digest limits the characters that will be generated too much, do this then.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;echo -n &amp;ldquo;date&amp;rdquo; | &lt;digest&gt;sum | base64&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;So let&amp;rsquo;s say you have to change your password every month. Pick a day, let&amp;rsquo;s say the second Tuesday of the month. Since your memory sucks write this down &amp;ldquo;Pipes on second Tuesday @ 5:08!&amp;ldquo;. Sounds like an event reminder right? Here&amp;rsquo;s your actual password algorithm for this month. First you want to has the &amp;lsquo;second Tuesday of the month&amp;rsquo;.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;echo -n &amp;ldquo;2010/07/12&amp;rdquo; | sha1sum | base64&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;which outputs&lt;br /&gt;&lt;br /&gt;&lt;code&gt;NTFhMTY4NmJkNWQyZmIzNWJlZTlmYmQxYzEwN2FjNGE1MjUyYjI1OCAgLQo=&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;So what was the rest of that reminder for? Now you&amp;rsquo;re going to make it as good as random, take the first 8 characters &amp;lsquo;&lt;code&gt;NTFhMTY4&lt;/code&gt;&amp;rsquo; and insert a pipe &amp;lsquo;&lt;code&gt;|&lt;/code&gt;&amp;rsquo; at the 5th character, resulting in &amp;lsquo;&lt;code&gt;NTFh|MTY4&lt;/code&gt;&amp;rsquo;. Now you have a &amp;lsquo;good as random, but recoverable&amp;rsquo; 9 character password.&lt;br /&gt;&lt;br /&gt;Given if you work with really clever people they might be able to figure it out if they know you use this kind of process. But I&amp;rsquo;m sure having read this article and my previous one you&amp;rsquo;ll come up with something even better, but just as reproducible.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;&lt;br /&gt;I do not believe that anyone can seriously prove (after having read both articles) that you could crack this with anything less than a brute force attack. Because I&amp;rsquo;ve suggested inserting 1 or more characters into the final outcome, chances are those are anything in the 94 printable characters of ASCII. Yes you might limit the end possibilities but after seeing passwords that most people have&amp;hellip; this makes you a hard enough target that no one is going to bother. Basically all assumptions that using this is bad revolves around someone knowing exactly what you do (so in reality it&amp;rsquo;s probably only bad for me).&lt;br /&gt;&lt;br /&gt;I should also note that my personal system encrypts passwords with a salted sha512 and I&amp;rsquo;m having trouble find a password cracking tool that can even try to brute force that.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;&lt;br /&gt;oh and just in case you forgot&amp;hellip; no one is trying to brute force your password. Remeber this &lt;a href=&#34;http://xkcd.com/538/&#34;&gt;XKCD&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More Security = Better. Wrong!</title>
      <link>http://blog.xenoterracide.com/post/more-security--better.-wrong/</link>
      <pubDate>Sat, 22 Aug 2009 19:54:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/more-security--better.-wrong/</guid>
      <description>&lt;p&gt;So I just had a discussion on &lt;a href=&#34;irc://chat.freenode.net/ubuntu-server&#34;&gt;#ubuntu-server on freenode&lt;/a&gt; about why my not having a password to connect to postgresql via a socket (read local cli) is insecure. So I asked them, how exactly is it that someone is going to get this access? The answer &amp;ldquo;there are bad people on the Internet&amp;rdquo;. I&amp;rsquo;m sure many people right now are agreeing with them and thinking I&amp;rsquo;m crazy. Let&amp;rsquo;s discuss my setup though shall we.&lt;br /&gt;&lt;br /&gt;Postgres: I&amp;rsquo;m using Ident, and not just sameuser ident. no I had to set a custom rule in the pg_ident.conf file for this user to access because the systemuser != the db user. so just typing psql at the command line should you get access still won&amp;rsquo;t get you into the db. you have to know which user/database to connect to. But that&amp;rsquo;s not that hard right? in fact it&amp;rsquo;s trivial.In addition you have to be a certain systemuser, only one works.&lt;br /&gt;&lt;br /&gt;User Access: There is only one user account on the system that can be logged into (it&amp;rsquo;s not root or a generic name). Only 2 people have the credentials to get shell access. One is my host, who happens to have physical and kvm access. The other is me who has ssh access.&lt;br /&gt;&lt;br /&gt;SSH: I have ssh on a high port with no password authentication, or root, allowed.&lt;br /&gt;&lt;br /&gt;So in order to passwordlessly access the database you would have to ssh into the system from a remote location or find an exploitable bug in apache (the only other service listening, or the kernel) that allows you to switch to my non apache user (meaning root access).&lt;br /&gt;&lt;br /&gt;In addition, this system user had rw access to the entire website which includes a file containing the password to the database in plain text. So let&amp;rsquo;s say I created a .pgpass file or variables? what exactly is it that would keep anyone who has access to this account from gaining access to the database? in fact wouldn&amp;rsquo;t it just make it easier, since pgpass has a known location and contains all connection info including the username/dbname string? &lt;br /&gt;&lt;br /&gt;But why do I need passwordless access anyways? I wrote a script that dumps the db every hour to a git repo and then pushes that to a remote.&lt;br /&gt;&lt;br /&gt;Could I secure it further? yeah I could. I could make the script run as a user who can&amp;rsquo;t log in at all and then put a pgpass in that users account. I&amp;rsquo;d have to properly ACL the webroot to give the correct write and read access. But is all this really necessary? maybe and I might do it, but at this point it&amp;rsquo;s not nearly as important as it was for me to get backups up and running, because regardless of all the security I implement, if I have no backup and someone finds that loophole in one of the pieces of software and uses it, I might just be screwed. At least now I can restore the site if it gets attacked.&lt;br /&gt;&lt;br /&gt;P.S. I was having a problem with my backup not being run by cron, never did figure out why.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making secure recoverable passwords</title>
      <link>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords/</link>
      <pubDate>Sun, 27 Apr 2008 14:08:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords/</guid>
      <description>&lt;p&gt;&lt;p&gt;For the basic you need a calculator with a decimal to hex function. Your OS should have one built in (scientific mode), many calculator&amp;rsquo;s do to. For advanced you&amp;rsquo;ll need special hashing software, suggestions for it can be found below.&lt;/p&gt;&lt;br /&gt;&lt;table&gt;&lt;br /&gt;  &lt;tr&gt;&lt;br /&gt;    &lt;th&gt;Windows&lt;/th&gt;&lt;br /&gt;    &lt;td&gt;&lt;a href=&#34;http://www.slavasoft.com/hashcalc/index.htm&#34;&gt;HashCalc&lt;/a&gt;&lt;/td&gt;&lt;br /&gt;  &lt;/tr&gt;&lt;br /&gt;  &lt;tr&gt;&lt;br /&gt;    &lt;th&gt;Macintosh&lt;/th&gt;&lt;br /&gt;    &lt;td&gt;&lt;a href=&#34;http://sourceforge.net/projects/machash&#34;&gt;MacHash&lt;/a&gt;&lt;/td&gt;&lt;br /&gt;  &lt;/tr&gt;&lt;br /&gt;  &lt;tr&gt;&lt;br /&gt;    &lt;th&gt;Linux/(&lt;em&gt;nix)&lt;/th&gt;&lt;br /&gt;    &lt;td&gt;&lt;a href=&#34;http://www.gnu.org/software/coreutils/&#34;&gt;Gnu Coreutils&lt;/a&gt;&lt;/td&gt;&lt;br /&gt;  &lt;/tr&gt;&lt;br /&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;Now that we have the software we need. You&amp;rsquo;ll need an 8 digit (minimum) number that you won&amp;rsquo;t forget. Guess what numbers fit the bill perfectly. Dates. All date&amp;rsquo;s can be expressed in 8 digits, but they require a year. The date we&amp;rsquo;ll use (for example) is Linux&amp;rsquo;s Birthday. August 25, 1991 (I recommend something more personal like your anniversary or birthday).&lt;br /&gt;&lt;br /&gt;So we are going to write down the date we picked for the password (note we aren&amp;rsquo;t done yet).&lt;br /&gt;&lt;br /&gt;something like&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Linux BDay&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;Date&amp;rsquo;s can be &lt;a href=&#34;http://en.wikipedia.org/wiki/Calendar_date&#34;&gt;formatted&lt;/a&gt; in several ways, Just make sure to remember the numeric format you use. For our example we&amp;rsquo;ll use the &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_8601&#34;&gt;ISO 8601&lt;/a&gt; standard. Which leaves our example date in format, YYYYMMDD, looking like 19910825.&lt;br /&gt;&lt;br /&gt;So let&amp;rsquo;s make a note of the format (to throw people off use a diff format say DDMMYYYY).&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Linux Bday ISO&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;whatever you do make sure YOU understand your note, but that it isn&amp;rsquo;t easily understandable by OTHERS.&lt;br /&gt;&lt;br /&gt;alright&amp;hellip; now we&amp;rsquo;re going to take our number and make it hex. So open your calculator enter 19910825, then use the convert to hex function and you should have this 12FD0A9 (if you aren&amp;rsquo;t using our example you may have a different &amp;lsquo;number&amp;rsquo;, or it may not be displayed exactly like this, display&amp;rsquo;s vary between calculators). This is your first basic password. you can use it as is, or you can make it a bit more secure by using one of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Hexadecimal&#34;&gt;hexadecimal notations&lt;/a&gt;. example: 0x12FD0A9. You can add a word or funny characters to either side of it to make it stronger too, just make sure to note anything you add to it.&lt;br /&gt;&lt;br /&gt;Due to a &lt;a href=&#34;http://en.wikipedia.org/wiki/Rainbow_table&#34;&gt;Rainbow Table&lt;/a&gt; database you should make sure your password is at least 8 characters but I would recommend no less than 9.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;But your hex number is less than 9 and what do the programs you listed have to do with this?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;good point&amp;hellip; let&amp;rsquo;s make something a bit more crypto and less predictable.&lt;br /&gt;&lt;br /&gt;Take the same date and plug it in to your hash creator, I&amp;rsquo;m going to use an md5sum for my first example.&lt;br /&gt;&lt;br /&gt;if you put 19910825 into md5sum you get 6f9822851dfc6c1045c6fef827e5d729 (for you nix people enter the number like this &amp;lsquo;echo -n &amp;ldquo;19910825&amp;rdquo; | md5sum&amp;rsquo;&lt;br /&gt;on the cli otherwise you might end up with newline issues because different operating systems use different newlines).&lt;br /&gt;&lt;br /&gt;so lets say you need an 12 character password you could just use the first 12 characters of your hash, example: 6f9822851dfc if you need an 8, example: 6f982285 ,etc etc.&lt;br /&gt;&lt;br /&gt;if a stupid &amp;lsquo;cracker&amp;rsquo; or black hat hacker get his hands on your actual password he might think he hasn&amp;rsquo;t decrypted it fully because it&amp;rsquo;ll look like a hash or memory error. want to throw people off even more just remember you aren&amp;rsquo;t using the first 8 but the first 8 after the first 2 example 9822851d.&lt;br /&gt;&lt;br /&gt;Or use a different has like sha1 or sha512.&lt;br /&gt;&lt;br /&gt;Ultimately you could make your note to yourself like this&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Sha1LinuxBDayISO&lt;/code&gt; to a non IT person this will look like a random password as is.&lt;br /&gt;&lt;br /&gt;Also the cryptographic hashes take words too. So you could do your name. Caleb into an md5sum is&lt;br /&gt;&lt;br /&gt;9ced73b8525de1db8e232ad575baa9dd&lt;br /&gt;&lt;br /&gt;but it&amp;rsquo;s different if I use caleb.&lt;br /&gt;&lt;br /&gt;2f0154d7db348840676529dd72f1c034&lt;br /&gt;&lt;br /&gt;if you always enter them the same you will always get the same result back. I guarantee after a couple days typing your new password you won&amp;rsquo;t need to have it written down. If you work at a place that requires things like monthly changes.. just put the date you changed it on in to create the hash. Just make sure no one knows but the number/word(s) you used and the hash you used or they will be able to duplicate your password. Of course you&amp;rsquo;re smart and you added somthing to it right? like a symbol (!@#$%^&lt;/em&gt;{}|:&amp;rdquo;&amp;lt;&amp;gt;?[]\;&amp;lsquo;,./) will all work find if the auth methods allow it.&lt;br /&gt;&lt;br /&gt;have fun never having a hard time creating passwords again.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>