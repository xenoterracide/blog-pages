<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpan on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/cpan/index.xml</link>
    <description>Recent content in Cpan on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/cpan/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Abandoning all Perl modules</title>
      <link>http://blog.xenoterracide.com/post/abandoning-all-perl-modules/</link>
      <pubDate>Sun, 03 May 2015 15:26:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/abandoning-all-perl-modules/</guid>
      <description>&lt;p&gt;As of today I have decided to remove myself as maintainer/comaintainer of all my Perl modules. Feel free to adopt &lt;a href=&#34;https://metacpan.org/author/XENO&#34;&gt;them&lt;/a&gt;.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Business::CyberSource API is stabilizing as of 0.7.x</title>
      <link>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</link>
      <pubDate>Wed, 07 Nov 2012 21:15:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; (BC) has been going through API changes for a while now. If you&amp;rsquo;re using it you&amp;rsquo;ve probably noticed this and wondered why? The reason behind it was when I first made it I wanted it to be extremely simple to use, and I was realistically a Junior programmer. Over the past year I learned a lot about API design and Object Oriented Programming, as well as payment gateways and credit card transaction processing. From the first production ready release I knew that it had design problems due to a large quantity of duplicated code, but at the time I didn&amp;rsquo;t know how to get rid of it. &lt;/p&gt;&lt;h2&gt;Domain Driven Design&lt;/h2&gt;&lt;p&gt;My first refactor used some principles I learned from &lt;a href=&#34;http://www.amazon.com/gp/product/0321125215/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321125215&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; I changed the design of the objects to be more clear for experts in CyberSource. I also started restructuring them to more closely match the remote model. This meant making Requests and Responses to be made up of nested objects (Responses were only done as of 0.7.x). Another Change regarding this was to rename the &lt;code&gt;submit&lt;/code&gt; method to &lt;code&gt;run_transaction&lt;/code&gt; which is the name of the Remote Procedure call that is executed. &lt;h2&gt;Composite Design Pattern&lt;/h2&gt;&lt;p&gt;By making the Requests up of nested objects it allowed me to use the Composite Pattern from &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; to serialize all of the objects into a simple nested hashref that &lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt; expects. Moving to these smaller objects that could &lt;code&gt;serialize&lt;/code&gt; allowed me to also add more offline tests. &lt;/p&gt;&lt;h2&gt;Dependency Injection in Tests&lt;/h2&gt;&lt;p&gt;Most of the tests for BC start out exactly the same, except for one change, the value in the amount part of the Credit Card Authorization. This is because CyberSource&amp;rsquo;s Test API uses special amounts to allow you to test getting different responses. e.g. something like (I&amp;rsquo;d have to look it up) 5000.05 is maybe a REJECT with a special processor code and cv code. Because of this I wired up my tests using &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; to reduce the amount of boilerplate code in all tests that require actual remote interaction. &lt;/p&gt;&lt;h2&gt;The Impact&lt;/h2&gt;&lt;p&gt;Ultimately changing my &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facade&lt;/a&gt; to make use of more design patterns and be designed after it&amp;rsquo;s niche domain has allowed me to have both simpler, deduplicated, more robust, more correct, and easier to modify code. Some things were not possible in earlier versions, or would have been incredibly complex to add. Now it&amp;rsquo;ll simply be an issue of adding a Moose attribute to add a feature present in the WSDL. Before certain calls could not return all of information that was in the actual SOAP response, now everything should be accessible. &lt;/p&gt;&lt;h2&gt;Possible Bugs&lt;/h2&gt;&lt;p&gt;One of the possible bugs of this last refactor is that I use &lt;a href=&#34;https://metacpan.org/module/MooseX::StrictConstructor&#34;&gt;MooseX::StrictConstructor&lt;/a&gt; for all of my Moose objects. It is possible now that the XML::Compile::SOAP hash is simply passed to the Response Object that if a key I didn&amp;rsquo;t account for were present that an exception would be thrown. If this is thrown on anything other than a 102 Invalid Field response, then it is a bug in BC and should be reported. I could have turned StrictConstructor off on the responses, but I believe that throwing the exceptions may ultimately make BC a better library. Also with a test suite that totals over 1400 (including generated generic ) tests, I&amp;rsquo;m fairly confident that there will be no problems in production. &lt;/p&gt;&lt;h2&gt;New Debugging&lt;/h2&gt;&lt;p&gt;In order to aid in finding bugs and diagnosing problems when they happen cybersource now has 2 debug setting levels. These can be set by having debug be 0 (off), 1 (request/response hash), 2 (full soap payloads). These should not be turned on in production and because they will print out Credit Card numbers. &lt;/p&gt;&lt;h2&gt;In Trial&lt;/h2&gt;&lt;p&gt;Currently I&amp;rsquo;ve left BC v0.7.5 in trial, but barring any bugs being reported, or cpan testers tests failing, I&amp;rsquo;ll probably release v.0.7.6 as stable early early next week.&lt;/p&gt;&lt;h2&gt;Stable API&lt;/h2&gt;&lt;p&gt;I do not forsee any more major API changes in the future of BC, all of my original problems have been weeded out. This means I&amp;rsquo;ll be able to focus on features and documentation with future work. It is possible that some changes to exceptions and error handling may happen, but I don&amp;rsquo;t see that being a big issue. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing Dist::Zilla::Plugin::Catalyst</title>
      <link>http://blog.xenoterracide.com/post/announcing-distzillaplugincatalyst/</link>
      <pubDate>Sun, 27 Jun 2010 21:37:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/announcing-distzillaplugincatalyst/</guid>
      <description>&lt;p&gt;So I just recently finished reading &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/0596529260?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Restful Web Services&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596529260&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; and decided I wanted to go back and play with Catalyst and REST some.&lt;br /&gt;&lt;br /&gt;The original way to create a Catalyst skeleton is to run &lt;code&gt;catalyst.pl MyApp&lt;/code&gt;. This creates a lot of nice files to get you started. &lt;code&gt;dzil new&lt;/code&gt; basically does the same thing for a generic cpan module. Honestly, without any plugins &lt;code&gt;dzil new&lt;/code&gt; isn&amp;rsquo;t that useful. However, once you add &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Git/lib/Dist/Zilla/Plugin/Git/Init.pm&#34;&gt;Git::Init&lt;/a&gt; , you remove several steps from the creation of a new module and repository. Git::Init also makes your first commit of everything it added. I got to thinking why on earth would I want to do the following to get a cat module going and convert it to dzil.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;pre&gt;catalyst.pl MyApp &amp;amp;&amp;amp; cd MyApp&lt;br /&gt;vi dist.ini # and add numerous lines&lt;br /&gt;rm Makefile.PL README t/* # and maybe more since dzil is better at managing these&lt;br /&gt;git init&lt;br /&gt;git add .&lt;br /&gt;git commit&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;when I could just be doing this&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;pre&gt;dzil new -p catalyst MyApp&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;A lot simpler huh? to get you started you need a few things but then creating cat apps will be easy.&lt;br /&gt;&lt;br /&gt;first you can run &lt;code&gt;&lt;a href=&#34;http://rjbs.manxome.org/rubric/entry/1848&#34;&gt;dzil setup&lt;/a&gt;&lt;/code&gt; or if your version of dzil doesn&amp;rsquo;t support that yet, you need to create the following &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; file by hand&lt;script src=&#34;http://gist.github.com/455321.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;[%User]&lt;br /&gt;name = Caleb Cushing&lt;br /&gt;email = xenoterracide@gmail.com&lt;br /&gt;&lt;br /&gt;[%Rights]&lt;br /&gt;license_class = Artistic_2_0&lt;br /&gt;copyright_holder = Caleb Cushing&lt;br /&gt;&lt;br /&gt;[%PAUSE]&lt;br /&gt;username = XENO&lt;br /&gt;password = itsagoodone&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt; obviously fill in your own credentials and license preferences. This file is pretty much needed for any &lt;code&gt;dzil new&lt;/code&gt; operations.&lt;br /&gt;&lt;br /&gt;Next you need to create a minting profile (not necessary for barebones doesn&amp;rsquo;t do much for you). run &lt;code&gt;mkdir -p ~/.dzil/profiles/catalyst/&lt;/code&gt; (note: catalyst is arbitrary, it can be anything). now create a &lt;code&gt;profile.ini&lt;/code&gt; in that directory.&lt;script src=&#34;http://gist.github.com/455327.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;[DistINI]&lt;br /&gt;[Catalyst::New / :DefaultModuleMaker]&lt;br /&gt;[Git::Init]&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt; The only mandatory line in this file for this to work is the [Catalyst &amp;hellip;] one, I think you&amp;rsquo;ll want the other two however. You also want to set &lt;code&gt;AUTHOR=&amp;ldquo;your name youremail@example.com&lt;/code&gt; since that&amp;rsquo;s how &lt;a href=&#34;http://search.cpan.org/dist/Catalyst-Devel/lib/Catalyst/Helper.pm&#34;&gt;Catalyst::Helper&lt;/a&gt; inserts it into its files (I&amp;rsquo;ll probably work on fixing helper later).&lt;br /&gt;&lt;br /&gt;Now you can just run &lt;code&gt;dzil new -p catalyst MyApp&lt;/code&gt;. Hopefully, this simplifies your catalyst app creation a little bit.&lt;br /&gt;&lt;br /&gt;Good patches are welcome, so are feature suggestions and bug reports. Also I registered it as &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Catalyst/&#34;&gt;Dist::Zilla::Plugin::Catalyst&lt;/a&gt; So if there are any other plugins that you think could be useful that are specific to Catalyst I&amp;rsquo;d be willing to add them.&lt;br /&gt;&lt;br /&gt;Special thanks to Tomas Doran who helped me (ok&amp;hellip; he wrote most of it) create this module.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving code generation problems in dzil</title>
      <link>http://blog.xenoterracide.com/post/solving-code-generation-problems-in-dzil/</link>
      <pubDate>Sat, 26 Jun 2010 06:16:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/solving-code-generation-problems-in-dzil/</guid>
      <description>&lt;p&gt;Firstly I want to clarify a bit on my opinions of &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/06/please-dont-use-distzillapluginbundleus.html&#34;&gt;PluginBundle::USERNAME&lt;/a&gt; modules, as some comments there have inspired this post. I don&amp;rsquo;t think you should use them because it makes it harder to disable plugins, and I think Robin Smidsrød put it best: &lt;blockquote&gt;Mostly it is because the Dist::Zilla::PluginBundle::USERNAME doesn&amp;rsquo;t actually say anything about its intention. It only says use Dist::Zilla as this person does, but what does that actually mean? If you don&amp;rsquo;t know the person it doesn&amp;rsquo;t really tell you anything.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;d much more prefer PluginBundles that actually advocate certain types of standards or behaviors.&lt;/blockquote&gt;&amp;hellip;&lt;br /&gt;&lt;br /&gt;Essentially Bundle&amp;rsquo;s like @Git and @Basic don&amp;rsquo;t cause problems because they&amp;rsquo;re generic well defined and contained within their distributions. A bundle that wasn&amp;rsquo;t contained within its dist might not cause a problem if it&amp;rsquo;s for a generic well defined purpose. I&amp;rsquo;d be in favor of a BundleQATests or similar so long as the author was considerate that some tests (PodSpellingTests) don&amp;rsquo;t work well on some *nix distributions and isn&amp;rsquo;t included in the bundle. But Something like @Xeno (my cpan username) would be my own special settings&amp;hellip; who wants to use something that&amp;rsquo;s only for me? and more importantly why would they ever think they have a right to bug something that the name itself implies it&amp;rsquo;s only for me.&lt;br /&gt;&lt;br /&gt;But another problem was brought up&amp;hellip; code generation. Here&amp;rsquo;s what Nilson said: &lt;blockquote&gt;dzil is very nice, but I don&amp;rsquo;t if I like the idea of different line numbers and files in the repository vs. the CPAN release. I&amp;rsquo;m still trying to fully digest this idea. &lt;br /&gt;&lt;br /&gt;I remember one of the main mentioned drawbacks of source filters were the possibilities of error messages in the wrong lines. And now, everyone seems to embrace this without hesitation.&lt;/blockquote&gt;&lt;br /&gt;So to start dzil&amp;rsquo;s generation isn&amp;rsquo;t quite as bad as a source filter which will give you the wrong line number period, using this generation will still give you the right line number for the module being run at the time. It just means the cpan line number may not match the repo line number. I&amp;rsquo;m going to show you how to fix this, but you don&amp;rsquo;t always have to. The most common place I&amp;rsquo;ve found problems with in code generation has been tests created by extending InlineFiles. In these cases you just want to go and bug the author of the Plugin. I think using these plugins is much better than writing your own EOL Tests, NoTabs, Critic, and Kwalitee etc. It helps keep your dist quality up without extra work, ultimately leaving you with just the responsibility of writing good tests that are specific to just your distribution.&lt;br /&gt;&lt;br /&gt;Now on to making sure that your repository matches your cpan dist. The first thing you want to do is use &lt;code&gt;[Git::CommitBuild]&lt;/code&gt; (if you&amp;rsquo;re not using git look for something like it or write something like it) This will take all the generated output and commit it to another branch each time you build. Then make sure this branch is pushed to your public repository. I think the biggest problem this solves is having things like your README and your LICENSE actually be in your public repository (if your repo doesn&amp;rsquo;t have a LICENSE&amp;hellip; what&amp;rsquo;s the legal situation?). If you&amp;rsquo;re using github you can also change this to be the default branch to be displayed in the repo admin settings.&lt;br /&gt;&lt;br /&gt;Next thing is don&amp;rsquo;t use &lt;code&gt;&lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Prepender/&#34;&gt;::Plugin::Prepender&lt;/a&gt;&lt;/code&gt; This will evil-y insert lines at the beginning of your code which will definitely throw off the line numbers being output. It even seems to suggest using it to insert &lt;code&gt;use strict; use warnings;&lt;/code&gt;. If you need output prepended to all files, I suggest writing a plugin that takes advantage of &lt;code&gt;dzil new&lt;/code&gt; and maybe just write a script that you can fire off whenever you need to create a new file. This is the only module I know for sure that does this, but avoid ANY that insert actual code or prepend lines to your files (in a way that isn&amp;rsquo;t added to your actual &amp;lsquo;master&amp;rsquo;/&amp;lsquo;trunk&amp;rsquo; that should be patched).&lt;br /&gt;&lt;br /&gt;POD can also screw up your line numbers, if you&amp;rsquo;re using PodWeaver (or module that has similar side effects) with dzil, which you likely are. &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Best-Practices-Damian-Conway/dp/0596001738?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl Best Practices&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596001738&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; page 140 will save you here (actual quote pg 475 a summary chapter). &lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;Keep all user documentation in a single place within your source file. [Contiguity]&lt;/li&gt;&lt;li&gt;Place POD as close as possible to the end of the file. [Position]&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;This includes the &lt;code&gt;# ABSTRACT: my abstract here&lt;/code&gt; line. If you put the # ABSTRACT and any actual pod after the code then all the pod generated will be after the code in your build, and thus any line number errors will be correct. Of course this doesn&amp;rsquo;t save you if your error is in the output pod, but I suspect that&amp;rsquo;s not the original complaint anyhow, and there are lots of dzil plugins to help you keep your pod sane.&lt;br /&gt;&lt;br /&gt;Essentially don&amp;rsquo;t do anything that will change line numbers for the code in the resulting build output. Following this will ease contribution, and debugging; I do not believe it significantly increases maintainer load. Happy Hacking!&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;just remembered&amp;hellip; dzil inserts a BEGIN block&amp;hellip; sigh&amp;hellip; can&amp;rsquo;t win for nothing.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;I recommend using &lt;code&gt;&lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-OurPkgVersion/&#34;&gt;Dist::Zilla::Plugin::OurPkgVersion&lt;/a&gt;&lt;/code&gt; to avoid dzil&amp;rsquo;s BEGIN block / VERSION insertion.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>please don&#39;t use Dist::Zilla::PluginBundle::USERNAME</title>
      <link>http://blog.xenoterracide.com/post/please-dont-use-distzillapluginbundleusername/</link>
      <pubDate>Sat, 19 Jun 2010 02:05:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/please-dont-use-distzillapluginbundleusername/</guid>
      <description>&lt;p&gt;or create them. Here&amp;rsquo;s the problem&amp;hellip;. (short version is Don&amp;rsquo;t put PodSpellingTests in them)&lt;br /&gt;normally you&amp;rsquo;d have&lt;br /&gt;&lt;code&gt;&lt;pre&gt;[pluginA]&lt;br /&gt;[pluginB]&lt;br /&gt;[pluginC]&lt;br /&gt;[pluginXTests]&lt;br /&gt;[pluginYTests]&lt;br /&gt;[pluginZTests]&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;and one of them doesn&amp;rsquo;t work on your system (for whatever reason), well you can just do this.&lt;br /&gt;&lt;code&gt;&lt;pre&gt;[pluginA]&lt;br /&gt;[pluginB]&lt;br /&gt;[pluginC]&lt;br /&gt;;[pluginXTests]&lt;br /&gt;[pluginYTests]&lt;br /&gt;[pluginZTests]&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;the &lt;code&gt;;&lt;/code&gt; is a comment in ini, now dzil won&amp;rsquo;t use that plugin. But people will say well you don&amp;rsquo;t want to do that of course I want that plugin enabled. Here&amp;rsquo;s why you may not temporarily. Casual user X has a bug in /your/ module that&amp;rsquo;s using dzil, they code up a patch, and they want to run your test suite. The can&amp;rsquo;t, because &lt;code&gt;[pluginXTests]&lt;/code&gt; won&amp;rsquo;t even install properly on their system due to a non perl dependency. They could have just commented it out, but now because you&amp;rsquo;ve used this PluginBundle it become difficult. They can&amp;rsquo;t just comment it out.&lt;br /&gt;&lt;br /&gt;They might be able to &lt;br /&gt;[@Filter]&lt;br /&gt;-bundle = @USERNAME&lt;br /&gt;-remove = pluginXTests&lt;br /&gt;&lt;br /&gt;IF they can get your bundle installed in the first place. This requires them find a way to install your Bundle without installing said broken module.&lt;br /&gt;&lt;br /&gt;as I stated at the top my problem is with [PodSpellingTests] it itself isn&amp;rsquo;t broken, but it&amp;rsquo;s dependency Test::Spelling &lt;a href=&#34;https://rt.cpan.org/Ticket/Display.html?id=56483&#34;&gt;is&lt;/a&gt; on some systems, due to the lack of a &amp;lsquo;spell&amp;rsquo; command.&lt;br /&gt;&lt;br /&gt;Yes I know there&amp;rsquo;s a workaround&amp;hellip; I could just copy a shell script into my path that makes aspell or something work, but really that&amp;rsquo;s not the right solution. No I&amp;rsquo;m not packaging GNU Spell for my system either, the other spell programs work much better (from what I&amp;rsquo;ve read).&lt;br /&gt;&lt;br /&gt;Also I find modules with your own username in them to be fairly obnoxious.&lt;br /&gt;&lt;br /&gt;If you&amp;rsquo;d like less code, can&amp;rsquo;t we start making a few more generic Bundle&amp;rsquo;s? I wouldn&amp;rsquo;t minde seeing a Bundle for Tests, and maybe another one for other stuff. I think &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the lines in my dist.ini&amp;rsquo;s are tests.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GPL 3 and Artistic 2.0 Software::License</title>
      <link>http://blog.xenoterracide.com/post/gpl-3-and-artistic-2.0-softwarelicense/</link>
      <pubDate>Mon, 10 May 2010 14:34:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/gpl-3-and-artistic-2.0-softwarelicense/</guid>
      <description>&lt;p&gt;As of right now &lt;a href=&#34;http://search.cpan.org/dist/Software-License/lib/Software/License.pm&#34;&gt;Software::License&lt;/a&gt; has no way to combine licenses on the fly. To be honest this deficiency might not be a bug in SL, it could be in &lt;a href=&#34;http://search.cpan.org/dist/Pod-Weaver/lib/Pod/Weaver.pm&#34;&gt;Pod::Weaver&lt;/a&gt; or &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla/lib/Dist/Zilla.pm&#34;&gt;Dist::Zilla&lt;/a&gt; this is a know deficiency and RJBS plans on fixing it at some point. In the mean time we can implement dual licenses (and multi-licenses) in much the same way the Perl5 license is implemented.&lt;br /&gt;&lt;br /&gt;I was probably in legal violation (I am not a lawyer) with &lt;a href=&#34;http://search.cpan.org/dist/Template-ShowStartStop/lib/Template/ShowStartStop.pm&#34;&gt;Template::ShowStartStop&lt;/a&gt; version 0.05 and 0.06 because I used Perl_5 licensing because that&amp;rsquo;s the closest I could get with Dist::Zilla, due to the limitation. So I created &lt;a href=&#34;http://search.cpan.org/dist/Software-License-GPL3andArtistic2/lib/Software/License/GPL3andArtistic2.pm&#34;&gt;Software::License::GPL3andArtistic2&lt;/a&gt; which is sort of a perl5 license, except that it mandates the latest version of GPL and Artistic (at the time of this writing). Version 0.07 of Template::ShowStartStop is back in compliance with the licensing of the code I forked from &lt;a href=&#34;http://search.cpan.org/dist/Template-Timer/Timer.pm&#34;&gt;Template::Timer&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This hasn&amp;rsquo;t, and will probably not be merged into Software::License because it&amp;rsquo;s just a stopgap measure until multi-license support can be implemented.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;this is apparently not necessary according to Duncan and the &lt;a href=&#34;http://www.theperlreview.com/Interviews/allison-randal-artistic-license.html&#34;&gt;this interview&lt;/a&gt; I&amp;rsquo;ve updated the module to reflect this. Hopefully, it can serve as an educational source.&lt;br /&gt;&lt;br /&gt;Curious&amp;hellip; why doesn&amp;rsquo;t Perl5 switch to the Artistic 2.0 then&amp;hellip; (I wonder what that would mean for &amp;lsquo;under the same terms as perl5&amp;rsquo; but actually including gpl1 and artistic 1).&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing CPAN on Arch Linux</title>
      <link>http://blog.xenoterracide.com/post/managing-cpan-on-arch-linux/</link>
      <pubDate>Sun, 14 Mar 2010 00:45:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/managing-cpan-on-arch-linux/</guid>
      <description>&lt;p&gt;So if you&amp;rsquo;re running Arch Linux and want to install a bunch of packages from CPAN the best way is NOT to use the official cpan client, or even the new cpanminus. No your best bet is to use AUR or lacking AUR packages, create your own, and I&amp;rsquo;m gonna walk you through how I do it. The really nice thing about installing packages with Pacman is that unlike cpan there is a utility to uninstall them.&lt;br /&gt;&lt;br /&gt;The first thing you&amp;rsquo;ll want is a utility that allows you to easily manage aur. Right now the Recommended tool appears to be a CLI utility called &lt;a href=&#34;http://aur.archlinux.org/packages.php?ID=33378&#34;&gt;packer&lt;/a&gt; you&amp;rsquo;ll want to download the &lt;a href=&#34;http://wiki.archlinux.org/index.php/PKGBUILD&#34;&gt;PKGBUILD&lt;/a&gt;, on the packer page, to a directory of it&amp;rsquo;s own and run &lt;code&gt;&lt;a href=&#34;http://wiki.archlinux.org/index.php/Makepkg&#34;&gt;makepkg&lt;/a&gt; -s&lt;/code&gt; in that directory and then (as root) &lt;code&gt;&lt;a href=&#34;http://wiki.archlinux.org/index.php/Pacman&#34;&gt;pacman&lt;/a&gt; -U pkgname-pkgver.pkg.tar.gz&lt;/code&gt;. You&amp;rsquo;ve now installed Packer, which means you&amp;rsquo;ll never have to install an AUR package like that again (barring a new install of arch). If you really want you can stop now and just use the packages provided by arch, myself, and other aur contributors. The general conversion in name is is the CPAN module DBIx::Class becomes perl-dbix-class. However running &lt;code&gt;packer dbix-class&lt;/code&gt; will find it. packer is capable of searching all of aur and the official repositories and giving you options if more than one is available. If you want to learn how to make your own packages, or just plain ignore aur and use cpanp to install read on.&lt;br /&gt;&lt;br /&gt;So now you&amp;rsquo;ll want to install CPANPLUS with packer. This is easy just run &lt;code&gt;packer perl-cpanplus&lt;/code&gt;. This should install CPANPLUS and any of its deps. Now install &lt;a href=&#34;http://search.cpan.org/dist/CPANPLUS-Dist-Arch/&#34;&gt;CPANPLUS::Dist::Arch&lt;/a&gt;&lt;br /&gt;with &lt;code&gt;packer perl-cpanplus-dist-arch&lt;/code&gt;. There are other &amp;lsquo;cpan&amp;rsquo; options but this is the only one that&amp;rsquo;s on both CPAN and AUR, and it has some really nice functionality.&lt;br /&gt;&lt;br /&gt;Now you have your entire installer stack but you still need to configure C::D::A. Run &lt;code&gt;setupdistarch&lt;/code&gt;. This will configure cpanplus to automatically create any package it creates as an Arch pkg, it can even install them. For example &lt;code&gt;packer perl-moose&lt;/code&gt; and &lt;code&gt;cpanp -i Moose&lt;/code&gt; will both install Moose with Pacman. The first will use the package I&amp;rsquo;ve uploaded to AUR and the second will use C::D::A to create one (which is exactly what I did).&lt;br /&gt;&lt;br /&gt;So now you know the basics of Installing packages, but I&amp;rsquo;m guessing you still want to know, how I&amp;rsquo;m managing over 200 perl packages. C::D::A is actually making this easier all the time (esp since I talk to the author). first you&amp;rsquo;ll want to create a directory to store all your AUR packages, the name isn&amp;rsquo;t important. So you&amp;rsquo;ll want to create your first package like &lt;code&gt;cpan2aur -d Catalyst::Runtime&lt;/code&gt; you&amp;rsquo;ll note that this creates the directory &lt;code&gt;perl-catalyst-runtime&lt;/code&gt; in that directory there is a &lt;code&gt;PKGBUILD.tt&lt;/code&gt; it contains syntax similar to Template::Toolkit, it is however home grown by the author of C::D::A. you can use it to add stuff the the resulting PKGBUILD. To create the PKGBUILD you&amp;rsquo;ll run &lt;code&gt;cpan2aur perl-catalyst-runtime&lt;/code&gt; it will create the PKGBUILD and the tarball for AUR. However, if you&amp;rsquo;re really planning on making this for AUR and no package is on AUR or you own the one on AUR you can just run &lt;code&gt;cpan2aur -u perl-catalyst-runtime&lt;/code&gt; and it will create all the aforementioned things plus upload them with your AUR account. It&amp;rsquo;s worth noting that if you attempt to run &lt;code&gt;cpan2aur &lt;directory&gt;&lt;/code&gt; and a PKGBUILD already exists it will ask you if you wish to overwrite, unless you&amp;rsquo;ve made changes to it say yes, if you aren&amp;rsquo;t updating to a new version on cpan it will ask if you want to update the pkgrel. I specifically requested that because it was annoying to increment by hand and I needed to update the PKGBUILD because of things like dep or provides changes.&lt;br /&gt;&lt;br /&gt;Unfortunately cpan2aur cannnot generate an entire dep tree worth of directories. It&amp;rsquo;s worth saying that you don&amp;rsquo;t really have to run cpan2aur -d at all, you could just go right to cpan2aur -u, but then you&amp;rsquo;d miss out on the wonder that is cpan2aur &amp;ndash;check. You can run &lt;code&gt;cpan2aur &amp;ndash;check perl-*&lt;/code&gt; and it will automagically check for updates of any directory that starts with perl- and upload the updates to AUR.&lt;br /&gt;&lt;br /&gt;Unfortunately C::D::A has some limitations. The first is that it really Doesn&amp;rsquo;t use Template Toolkit or even Template::Tiny (which I suggested). This doesn&amp;rsquo;t seem to matter to much&amp;hellip; but I wonder if it could help me with the other problem. C::D::A can&amp;rsquo;t correctly determine optdepends because it gets the deps from the generated Makefiles. I&amp;rsquo;m not sure if this could be fixed or not, I don&amp;rsquo;t yet understand this part of making CPAN packages enough.&lt;br /&gt;&lt;br /&gt;Happy packaging.&lt;br /&gt;&lt;br /&gt;UPDATE: &lt;br /&gt;&lt;br /&gt;you don&amp;rsquo;t need &lt;code&gt;cpan2aur -u &amp;ndash;check&lt;/code&gt;, &lt;code&gt;cpan2aur &amp;ndash;check&lt;/code&gt; implies -u&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iron Man and introductions</title>
      <link>http://blog.xenoterracide.com/post/iron-man-and-introductions/</link>
      <pubDate>Sat, 13 Mar 2010 21:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/iron-man-and-introductions/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve decided to &amp;ldquo;compete&amp;rdquo; in the &lt;a href=&#34;http://www.enlightenedperl.org/ironman.html&#34;&gt;Iron Man competition&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;My name is Caleb Cushing, I&amp;rsquo;m a 25 year old, unemployed, student, living in the Greater Lansing, MI, USA, area. I&amp;rsquo;ve been programming perl for approximately 6 months. This includes a lot of off time, time to relearn the language from the class I took a couple years ago (and learn modern perl), learning Catalyst and DBIC, all of which is an ongoing process. I would guess I&amp;rsquo;ve been writing useful code for about 4 months and even that is a slow going process as I&amp;rsquo;ve still got a lot to learn.&lt;br /&gt;&lt;br /&gt;Previously, I was the tree maintainer for Funtoo, and tried spinning my own fork of Funtoo/Gentoo, it needed more devs than me to survive though. I now use &lt;a href=&#34;http://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt;. After an arch/perl user who went by aCiD2 moved to OS X I adopted most of his perl AUR (arch user repository) packages in addition to ones I had created myself. I now have &lt;a href=&#34;http://aur.archlinux.org/packages.php?SeB=m&amp;K=xenoterracide&#34;&gt;over 200 CPAN packages on AUR&lt;/a&gt; in Arch&amp;rsquo;s PKGBUILD format.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m a contributer to &lt;a href=&#34;http://search.cpan.org/dist/Catalyst-Manual/&#34;&gt;Catalyst::Manual&lt;/a&gt; and I created &lt;a href=&#34;http://search.cpan.org/dist/Template-ShowStartStop/&#34;&gt;Template::ShowStartStop&lt;/a&gt; by forking &lt;a href=&#34;http://search.cpan.org/dist/Template-Timer/&#34;&gt;Template::Timer&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m sure I&amp;rsquo;ll become more active as time goes on, and have more interesting posts than this one.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>