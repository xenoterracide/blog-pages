<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distzilla on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/distzilla/index.xml</link>
    <description>Recent content in Distzilla on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/distzilla/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Experience with having a non Dist::Zilla user contribute to a Dist::Zilla project (it&#39;s not hard for them or me)</title>
      <link>http://blog.xenoterracide.com/post/experience-with-having-a-non-distzilla-user-contribute-to-a-distzilla-project-its-not-hard-for-them-or-me/</link>
      <pubDate>Tue, 05 Jul 2011 02:02:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/experience-with-having-a-non-distzilla-user-contribute-to-a-distzilla-project-its-not-hard-for-them-or-me/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve heard many times that &lt;a href=&#34;http://dzil.org&#34;&gt;Dist::Zilla&lt;/a&gt; makes it harder for people to contribute to the project. This is not true, it is either unfortunately either ignorance or FUD (much like saying Linux is harder to use than Windows). Truly, there are things that some dzil users do that &lt;i&gt;can&lt;/i&gt; make it harder, but it doesn&amp;rsquo;t have to be that way. &lt;a href=&#34;https://github.com/xenoterracide/Test-Version/pull/1&#34;&gt;Michael Schwern recently contributed to one of my dzil projects without ever realizing I was using dzil, until I told him&lt;/a&gt;. He more recently stated on twitter, &amp;ldquo;While your solution works, it seems like it makes more work for you to shield contributors from dzil&amp;rdquo;. This was true in this case because I wasn&amp;rsquo;t sure how to effectively move a series of multiple patches, I now know it&amp;rsquo;s easy to do with git. Here&amp;rsquo;s how you can allow contributors to contribute to your dzil project without causing you or them undo pain.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;Don&amp;rsquo;t use anything that changes the line numbers of your source&lt;/dt&gt;&lt;dd&gt;Examples: don&amp;rsquo;t use &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Prepender/lib/Dist/Zilla/Plugin/Prepender.pm&#34;&gt;DZP::Prepender&lt;/a&gt;. Use modules like &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-OurPkgVersion/lib/Dist/Zilla/Plugin/OurPkgVersion.pm&#34;&gt;OurPkgVersion&lt;/a&gt; to insert VERSION, and make sure your # ABSTRACT and any pod is below the &lt;code&gt;1;&lt;/code&gt; at the end of your module. This will keep the line numbers of errors in your code from being different from the final build. It&amp;rsquo;s still ok to use PodWeaver as it will save you way more time than it&amp;rsquo;ll hurt, so long as you follow the rules about pod being at the bottom&lt;/dd&gt; &lt;/dl&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;Use a plugin that commits builds to your source control software&lt;/dt&gt;&lt;dd&gt; I personally recommend &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Git/lib/Dist/Zilla/Plugin/Git/CommitBuild.pm&#34;&gt;DZP::Git::CommitBuild&lt;/a&gt;  &lt;/dd&gt; &lt;/dl&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;Make your build branch your default branch&lt;/dt&gt;&lt;dd&gt;I&amp;rsquo;m not sure how to do this with just git, but on github you can go to the admin section of your repository and change the default branch there. This makes it so that when someone clone&amp;rsquo;s your repository the initial checkout is of your build branch. Your build branch shouldn&amp;rsquo;t require dzil, it&amp;rsquo;s the final build.&lt;/dd&gt; &lt;/dl&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/ol&gt;&lt;br /&gt;Now that you have your final build branch as the default branch anyone who wants to contribute can simply clone your repo and start hacking. Their are a couple of mistakes they could make, They could either change or add files that are maintained, or pruned by dzil. This did happen when Schwern sent me patches, one of them was the addition of a .gitignore, which I already had, but is being pruned out of the build branch. I can also see it happening to meta&amp;rsquo;s and makefiles. These patches can simply be rejected as unnecessary, dzil-ified, or if they are truly a bug, then they can be reported and fixed upstream.&lt;br /&gt;&lt;br /&gt;So what if someone sends you a pull request from &lt;code&gt;build/master&lt;/code&gt;? well if it&amp;rsquo;s just one or two patches, you add their remote, and do a &lt;code&gt;git remote update&lt;/code&gt; and then you can &lt;code&gt;git log remote build/master&lt;/code&gt; to find the sha1 of this patch. Now that you have the sha1 all you have to do is &lt;code&gt;git cherry-pick [sha1]&lt;/code&gt; and it should apply. If there are any conflicts you may have to resolve them with &lt;code&gt;git mergetool&lt;/code&gt;. However, the only conflict with Schwern&amp;rsquo;s patches for me was the .gitignore, all other patches applied without assistance and applied correcly, surprisingly even the pod patch applied without issue.&lt;br /&gt;&lt;br /&gt;If you have more patches than is comfortable with &lt;code&gt;git cherry-pick&lt;/code&gt; then you need &lt;code&gt;git rebase&lt;/code&gt;. The command you want is &lt;code&gt;git rebase -i &amp;ndash;onto master [sha1 before first sha1 in series] [tip of remote branch checkout]&lt;/code&gt;. So in my case &lt;code&gt;git rebase -i &amp;ndash;onto master 3f1e3748 schwern&lt;/code&gt;. What this appears to do is ends up rewriting my local schwern/build/master checkout and removes all the build commits, and then applies the patches on top. This means I can now do &lt;code&gt;git merge schwern&lt;/code&gt; from the master branch, and all of his patches that I want will be successfully merged. For more on this strategy you may want to read &lt;a href=&#34;http://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch&#34;&gt;this stackoverflow question&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;given this is not quite as easy as a &lt;code&gt;git pull&lt;/code&gt; that&amp;rsquo;s a fast forward, but reality is it&amp;rsquo;s not that hard once you know how to do the rebase and how it works. Of course this isn&amp;rsquo;t ideal for constant contributors, those should simply learn to use dzil, but for the random contributor it should be ok.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My solution to not using PluginBundle:AUTHOR for dzil is git</title>
      <link>http://blog.xenoterracide.com/post/my-solution-to-not-using-pluginbundleauthor-for-dzil-is-git/</link>
      <pubDate>Sun, 05 Jun 2011 15:24:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/my-solution-to-not-using-pluginbundleauthor-for-dzil-is-git/</guid>
      <description>&lt;p&gt;I am now tired of updating my &lt;code&gt;dist.ini&lt;/code&gt;&amp;rsquo;s for my &lt;a href=&#34;http://dzil.org&#34;&gt;Dist::Zilla&lt;/a&gt; projects. For many people this is when they start using a PluginBundle with their authorname. I &lt;a href=&#34;http://www.xenoterracide.com/2010/06/please-dont-use-distzillapluginbundleus.html&#34;&gt;discussed why you shouldn&amp;rsquo;t do this a year ago&lt;/a&gt;. Now that I&amp;rsquo;m tired of managing my dist.ini&amp;rsquo;s on an individual basis I&amp;rsquo;m going to show you how I&amp;rsquo;m going to solve the same problem everyone else is, which is getting tired of updating your dzil configuration for all of your projects. I&amp;rsquo;m using git to do it. You probably haven&amp;rsquo;t considered this, or am thinking I&amp;rsquo;m wrong because you believe that git can&amp;rsquo;t merge branches without a common history, which is not true. I did it with Regen2, Funtoo, Portage, and Sunrise, which have way more files than any perl repo, including Perl.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;First let&amp;rsquo;s talk about the advantages and disadvantages of doing this with git.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;ll start with the disadvantages. You&amp;rsquo;ll have another repository to manage. Git isn&amp;rsquo;t completely automatic, you&amp;rsquo;ll have to remember to merge your changes. You&amp;rsquo;ll also have to add the repository to your existing repositories. You will have to resolve merge conflicts at least once, and probably occasionally more, though most should be fast-forwards.&lt;br /&gt;&lt;br /&gt;The advantages are&amp;hellip; now the changes to your dist.ini are getting recorded in your history. You can now have a master dist.ini, but remove items without filters in your individual modules. You can share even more configuration as merged differences allow you to maintain differences in downstream commits. It doesn&amp;rsquo;t automatically update all of your modules. Wait didn&amp;rsquo;t I list that last one in disadvantages? Yep, it&amp;rsquo;s an advantage because what if you update your PluginBundle and that update breaks one of your modules, but you don&amp;rsquo;t know it because you haven&amp;rsquo;t worked on that module in a while. You can use this for more than just dist.ini.&lt;br /&gt;&lt;br /&gt;Ok so the first thing you you want to do is create your master dzil repo. This is not a &lt;a href=&#34;http://git-scm.com/documentation&#34;&gt;git&lt;/a&gt; or &lt;a href=&#34;http://dzil.org/&#34;&gt;dzil&lt;/a&gt; tutorial so go do that. I did it by creating a &lt;code&gt;dzil new project&lt;/code&gt; and removing the files I couldn&amp;rsquo;t use and making a few tweaks and amending all of those changes to the initial commit. Check out &lt;a href=&#34;https://github.com/xenoterracide/dzil-base&#34;&gt;my repo&lt;/a&gt; for inspiration. Remember the directory structure has to be the same as a dzil repo structure for any common files.&lt;br /&gt;&lt;br /&gt;Now add a remote from your new repo to an existing dzil project. Next you need to merge the branch from the remote into your project. The first time you do this you&amp;rsquo;ll have to resolve conflicts. If they&amp;rsquo;re like &lt;a href=&#34;https://github.com/xenoterracide/Test-Version/commit/89ea6813da279ff74f87b0628db492fc1451e526&#34;&gt;mine&lt;/a&gt; then they&amp;rsquo;ll be easy and obvious. Once that&amp;rsquo;s done future changes will be fast-forwards unless you change something in your perl module repo, then you might end up with a simple merge conflict. One thing to remember NEVER EVER try to merge from your module repo to your dzil repo, it will cause you extreme pain in the future. cherry-picking that direction is possible but not merging.&lt;br /&gt;&lt;br /&gt;After that, all that is left to do is run your dzil tests and fix any breakage in your module. Happy merging.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a simple Dist::Zilla::Tester test</title>
      <link>http://blog.xenoterracide.com/post/writing-a-simple-distzillatester-test/</link>
      <pubDate>Wed, 10 Nov 2010 08:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/writing-a-simple-distzillatester-test/</guid>
      <description>&lt;p&gt;Hopefully, someone will use the blog post to write an actual doc patch, seeing as how this is undocumented.&lt;br /&gt;&lt;br /&gt;I finally wrote &lt;a href=&#34;https://github.com/xenoterracide/Dist-Zilla-Plugin-OurPkgVersion/blob/4d1bc0270a3abb6dce68ae70b0d31290bb7d97ad/t/01-basic.t&#34;&gt;A test for DZP::OurPkgVersion&lt;/a&gt; with the help of CJM. So I figure it&amp;rsquo;s best to share the knowledge imparted upon me to all those who are writing plugins without tests.&lt;br /&gt;&lt;br /&gt;Before we get started I&amp;rsquo;m going to advise that this test will only check the output that dzil built, if you need it to test anything more sophisticated, you&amp;rsquo;ll have to learn more.&lt;br /&gt;&lt;br /&gt;First you&amp;rsquo;ll want to create a corpus repo like &lt;code&gt;/corpus/MyDZTRepo&lt;/code&gt; with a basic minimal repo. This repo is simply a repo that you are using to test your plugin against, to make sure it works right. You put it in corpus so that if you have tests that you have to check in your corpus, those tests themselves aren&amp;rsquo;t run when the test suite is run. The &lt;code&gt;dist.ini&lt;/code&gt; doesn&amp;rsquo;t need to contain anymore than the basic stuff needed to build. You &lt;code&gt;.pm&lt;/code&gt; files need not have anymore data than what you&amp;rsquo;re going to need to make your dzil plugin do its job. In the case of DZP::OurPkgVersion I only needed to test that the output found the &lt;code&gt;# VERSION&lt;/code&gt; string correctly in a couple of scenario&amp;rsquo;s. So that meant having &lt;code&gt;# VERSION&lt;/code&gt; in the &lt;code&gt;.pm&amp;rsquo;s&lt;/code&gt; and &lt;code&gt;[OurPkgVersion]&lt;/code&gt; in the dist.ini.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/670539.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;name    = DZT0&lt;br /&gt;author  = Caleb Cushing &lt;a href=&#34;mailto:xenoterracide@gmail.com&#34;&gt;xenoterracide@gmail.com&lt;/a&gt;&lt;br /&gt;license =  Artistic_2_0&lt;br /&gt;version = 0.1.0&lt;br /&gt;copyright_holder = Caleb Cushing&lt;br /&gt;&lt;br /&gt;[@Filter]&lt;br /&gt;-bundle = @Basic&lt;br /&gt;-remove = Readme&lt;br /&gt;&lt;br /&gt;[OurPkgVersion]&lt;/code&gt;&lt;code&gt;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;package DZT0;&lt;br /&gt;# VERSION&lt;br /&gt;# ABSTRACT: my abstract&lt;br /&gt;1;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/669238.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use Test::More;&lt;br /&gt;use Dist::Zilla::Tester;&lt;br /&gt;&lt;br /&gt;# specify where the dist lives&lt;br /&gt;my $tzil = Dist::Zilla::Tester-&amp;gt;from_config({ dist_root =&amp;gt; &amp;lsquo;corpus/DZT&amp;rsquo; });&lt;br /&gt;&lt;br /&gt;# function to essentially run dzil build&lt;br /&gt;$tzil-&amp;gt;build;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;First DZT (Dist::Zilla::Tester) doesn&amp;rsquo;t provide any tests of its own so you still need to use &lt;code&gt;Test::More&lt;/code&gt; or some other testing framework. Next you need to initialize the tester object by telling it where the root of your corpus repo is.  After that, unless you need to do other work, you can run &lt;code&gt;$tzil-&amp;gt;build&lt;/code&gt; so that the build is run.&lt;br /&gt;&lt;br /&gt;So now lets slurp a file into memory so we can check to see if it was built right. You&amp;rsquo;ll want to look in &lt;code&gt;&amp;lsquo;build/*&amp;rsquo;&lt;/code&gt; as the basic root of the build directory. So &lt;code&gt;&amp;lsquo;build/t/test1.t&amp;rsquo;&lt;/code&gt; if you need to slurp a test.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/670857.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#slurp a file&lt;br /&gt;my $lib_0 = $tzil-&amp;gt;slurp_file(&amp;lsquo;build/lib/DZT0.pm&amp;rsquo;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;Now that we&amp;rsquo;ve pulled our build files into memory lets code up what the result should be. We can just do this with a simple heredoc, obviously you can do it another way.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/670860.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;my $elib_0 = &amp;lt;&amp;lt;&amp;lsquo;END LIB0&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;package DZT0;&lt;br /&gt;our $VERSION = 0.1.0;# VERSION&lt;br /&gt;# ABSTRACT: my abstract&lt;br /&gt;1;&lt;br /&gt;END LIB0&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;Now that we&amp;rsquo;ve gotten that, all we have to do is compare the file that we expect dzil to output and the file that dzil actually built. This is just standard &lt;code&gt;Test::More&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/670867.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;is ( $lib_0, $elib_0, &amp;lsquo;check DZT0.pm&amp;rsquo; );&lt;br /&gt;done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;Now let&amp;rsquo;s take a look at it all together.&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/670873.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use Test::More;&lt;br /&gt;use Dist::Zilla::Tester;&lt;br /&gt;&lt;br /&gt;my $tzil = Dist::Zilla::Tester-&amp;gt;from_config({ dist_root =&amp;gt; &amp;lsquo;corpus/DZT&amp;rsquo; });&lt;br /&gt;&lt;br /&gt;$tzil-&amp;gt;build;&lt;br /&gt;&lt;br /&gt;my $lib_0 = $tzil-&amp;gt;slurp_file(&amp;lsquo;build/lib/DZT0.pm&amp;rsquo;);&lt;br /&gt;&lt;br /&gt;# e short for expected files&lt;br /&gt;my $elib_0 = &amp;lt;&amp;lt;&amp;lsquo;END LIB0&amp;rsquo;;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;package DZT0;&lt;br /&gt;our $VERSION = 0.1.0;# VERSION&lt;br /&gt;# ABSTRACT: my abstract&lt;br /&gt;1;&lt;br /&gt;END LIB0&lt;br /&gt;&lt;br /&gt;is ( $lib_0, $elib_0, &amp;lsquo;check DZT0.pm&amp;rsquo; );&lt;br /&gt;&lt;br /&gt;done_testing;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;Pretty simple huh? Hope this means more dzil modules getting tested now. Including more of mine.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating new projects with dzil new and templates</title>
      <link>http://blog.xenoterracide.com/post/creating-new-projects-with-dzil-new-and-templates/</link>
      <pubDate>Fri, 30 Jul 2010 18:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/creating-new-projects-with-dzil-new-and-templates/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://xenoterracide.blogspot.com/2010/06/announcing-distzillaplugincatalyst.html&#34;&gt;Here&lt;/a&gt; I talked about creating a new
catalyst project using a minting profile for Dist::Zilla. If you don&amp;rsquo;t know how to create a minting profile read that
first. I&amp;rsquo;m sure once you&amp;rsquo;ve tried that you&amp;rsquo;ll agree that having a little bit more than the basics in a newly minted
dist would be a good thing.&lt;/p&gt;

&lt;p&gt;first we need to create our profile.ini correctly
&lt;script src=&#34;http://gist.github.com/487441.js&#34;&gt; &lt;/script&gt;
(note: if you&amp;rsquo;ve got &lt;code&gt;[DistINI]&lt;/code&gt; plugin loaded you&amp;rsquo;ll probably want to remove it) Now you can put any file in the
subdirectory repo of your profile (if you leave out &amp;lsquo;include_dotfiles = 1&amp;rsquo; then anything beginning with a . won&amp;rsquo;t be
included), and it can be a template using &lt;a href=&#34;https://metacpan.org/pod/Text::Template&#34;&gt;Text::Template&lt;/a&gt;. &lt;a href=&#34;https://metacpan.org/pod/Dist::Zilla&#34;&gt;Dist::Zilla&lt;/a&gt; uses
&lt;code&gt;{{ }}&lt;/code&gt; for &lt;a href=&#34;https://metacpan.org/pod/Text::Template&#34;&gt;Text::Template&lt;/a&gt; Delimiters.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with adding a &lt;code&gt;.gitignore&lt;/code&gt; file (if you&amp;rsquo;re using git) we can create&lt;code&gt;{profile}/repo/.gitignore&lt;/code&gt;
&lt;script src=&#34;http://gist.github.com/487561.js&#34;&gt;&lt;/script&gt;
the &lt;code&gt;{{$dist-&amp;gt;name}}*&lt;/code&gt; will exclude the directories and archives &lt;code&gt;dzil&lt;/code&gt; creates on release and &lt;code&gt;.build&lt;/code&gt;, will of course,
ignore the .build dirctory.&lt;/p&gt;

&lt;p&gt;Now for a more complex issue, creating a &lt;code&gt;Changes&lt;/code&gt; file that has the the &lt;code&gt;{{$NEXT}}&lt;/code&gt; variable in it to insert the date
and such on build. &lt;script src=&#34;http://gist.github.com/487570.js&#34;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{$dist-&amp;gt;name}}
{{ &#39;{{$NEXT}}&#39; }}
    -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you can format your &lt;code&gt;Changes&lt;/code&gt; file however you want.&lt;/p&gt;

&lt;p&gt;Now we want to create a much more complicated &lt;code&gt;dist.ini&lt;/code&gt;
&lt;script src=&#34;http://gist.github.com/487577.js&#34;&gt; &lt;/script&gt;
All of the stuff between the first set of  &lt;code&gt;{{ }}&lt;/code&gt; is boilerplate mostly taken from the DistINI plugin so that we can
use our settings from our &lt;code&gt;config.ini&lt;/code&gt;, I really wish there were some convenience accessors for this. I also wish we
had an arbitrary stash we could use in &lt;code&gt;config.ini&lt;/code&gt; so I wouldn&amp;rsquo;t have had to hardcode my username in this. I think
it&amp;rsquo;s all fairly self explanatory beyond that. Of course you can set up your &lt;code&gt;dist.ini&lt;/code&gt; anyway you want.
Also if you use this format you have to have your module&amp;rsquo;s repo name on GitHub in camel case like it is on CPAN.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing Dist::Zilla::Plugin::Catalyst</title>
      <link>http://blog.xenoterracide.com/post/announcing-distzillaplugincatalyst/</link>
      <pubDate>Sun, 27 Jun 2010 21:37:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/announcing-distzillaplugincatalyst/</guid>
      <description>&lt;p&gt;So I just recently finished reading &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/0596529260?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Restful Web Services&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596529260&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; and decided I wanted to go back and play with Catalyst and REST some.&lt;br /&gt;&lt;br /&gt;The original way to create a Catalyst skeleton is to run &lt;code&gt;catalyst.pl MyApp&lt;/code&gt;. This creates a lot of nice files to get you started. &lt;code&gt;dzil new&lt;/code&gt; basically does the same thing for a generic cpan module. Honestly, without any plugins &lt;code&gt;dzil new&lt;/code&gt; isn&amp;rsquo;t that useful. However, once you add &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Git/lib/Dist/Zilla/Plugin/Git/Init.pm&#34;&gt;Git::Init&lt;/a&gt; , you remove several steps from the creation of a new module and repository. Git::Init also makes your first commit of everything it added. I got to thinking why on earth would I want to do the following to get a cat module going and convert it to dzil.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;pre&gt;catalyst.pl MyApp &amp;amp;&amp;amp; cd MyApp&lt;br /&gt;vi dist.ini # and add numerous lines&lt;br /&gt;rm Makefile.PL README t/* # and maybe more since dzil is better at managing these&lt;br /&gt;git init&lt;br /&gt;git add .&lt;br /&gt;git commit&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;when I could just be doing this&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;pre&gt;dzil new -p catalyst MyApp&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;A lot simpler huh? to get you started you need a few things but then creating cat apps will be easy.&lt;br /&gt;&lt;br /&gt;first you can run &lt;code&gt;&lt;a href=&#34;http://rjbs.manxome.org/rubric/entry/1848&#34;&gt;dzil setup&lt;/a&gt;&lt;/code&gt; or if your version of dzil doesn&amp;rsquo;t support that yet, you need to create the following &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; file by hand&lt;script src=&#34;http://gist.github.com/455321.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;[%User]&lt;br /&gt;name = Caleb Cushing&lt;br /&gt;email = xenoterracide@gmail.com&lt;br /&gt;&lt;br /&gt;[%Rights]&lt;br /&gt;license_class = Artistic_2_0&lt;br /&gt;copyright_holder = Caleb Cushing&lt;br /&gt;&lt;br /&gt;[%PAUSE]&lt;br /&gt;username = XENO&lt;br /&gt;password = itsagoodone&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt; obviously fill in your own credentials and license preferences. This file is pretty much needed for any &lt;code&gt;dzil new&lt;/code&gt; operations.&lt;br /&gt;&lt;br /&gt;Next you need to create a minting profile (not necessary for barebones doesn&amp;rsquo;t do much for you). run &lt;code&gt;mkdir -p ~/.dzil/profiles/catalyst/&lt;/code&gt; (note: catalyst is arbitrary, it can be anything). now create a &lt;code&gt;profile.ini&lt;/code&gt; in that directory.&lt;script src=&#34;http://gist.github.com/455327.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;[DistINI]&lt;br /&gt;[Catalyst::New / :DefaultModuleMaker]&lt;br /&gt;[Git::Init]&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt; The only mandatory line in this file for this to work is the [Catalyst &amp;hellip;] one, I think you&amp;rsquo;ll want the other two however. You also want to set &lt;code&gt;AUTHOR=&amp;ldquo;your name youremail@example.com&lt;/code&gt; since that&amp;rsquo;s how &lt;a href=&#34;http://search.cpan.org/dist/Catalyst-Devel/lib/Catalyst/Helper.pm&#34;&gt;Catalyst::Helper&lt;/a&gt; inserts it into its files (I&amp;rsquo;ll probably work on fixing helper later).&lt;br /&gt;&lt;br /&gt;Now you can just run &lt;code&gt;dzil new -p catalyst MyApp&lt;/code&gt;. Hopefully, this simplifies your catalyst app creation a little bit.&lt;br /&gt;&lt;br /&gt;Good patches are welcome, so are feature suggestions and bug reports. Also I registered it as &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Catalyst/&#34;&gt;Dist::Zilla::Plugin::Catalyst&lt;/a&gt; So if there are any other plugins that you think could be useful that are specific to Catalyst I&amp;rsquo;d be willing to add them.&lt;br /&gt;&lt;br /&gt;Special thanks to Tomas Doran who helped me (ok&amp;hellip; he wrote most of it) create this module.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving code generation problems in dzil</title>
      <link>http://blog.xenoterracide.com/post/solving-code-generation-problems-in-dzil/</link>
      <pubDate>Sat, 26 Jun 2010 06:16:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/solving-code-generation-problems-in-dzil/</guid>
      <description>&lt;p&gt;Firstly I want to clarify a bit on my opinions of &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/06/please-dont-use-distzillapluginbundleus.html&#34;&gt;PluginBundle::USERNAME&lt;/a&gt; modules, as some comments there have inspired this post. I don&amp;rsquo;t think you should use them because it makes it harder to disable plugins, and I think Robin Smidsrød put it best: &lt;blockquote&gt;Mostly it is because the Dist::Zilla::PluginBundle::USERNAME doesn&amp;rsquo;t actually say anything about its intention. It only says use Dist::Zilla as this person does, but what does that actually mean? If you don&amp;rsquo;t know the person it doesn&amp;rsquo;t really tell you anything.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;d much more prefer PluginBundles that actually advocate certain types of standards or behaviors.&lt;/blockquote&gt;&amp;hellip;&lt;br /&gt;&lt;br /&gt;Essentially Bundle&amp;rsquo;s like @Git and @Basic don&amp;rsquo;t cause problems because they&amp;rsquo;re generic well defined and contained within their distributions. A bundle that wasn&amp;rsquo;t contained within its dist might not cause a problem if it&amp;rsquo;s for a generic well defined purpose. I&amp;rsquo;d be in favor of a BundleQATests or similar so long as the author was considerate that some tests (PodSpellingTests) don&amp;rsquo;t work well on some *nix distributions and isn&amp;rsquo;t included in the bundle. But Something like @Xeno (my cpan username) would be my own special settings&amp;hellip; who wants to use something that&amp;rsquo;s only for me? and more importantly why would they ever think they have a right to bug something that the name itself implies it&amp;rsquo;s only for me.&lt;br /&gt;&lt;br /&gt;But another problem was brought up&amp;hellip; code generation. Here&amp;rsquo;s what Nilson said: &lt;blockquote&gt;dzil is very nice, but I don&amp;rsquo;t if I like the idea of different line numbers and files in the repository vs. the CPAN release. I&amp;rsquo;m still trying to fully digest this idea. &lt;br /&gt;&lt;br /&gt;I remember one of the main mentioned drawbacks of source filters were the possibilities of error messages in the wrong lines. And now, everyone seems to embrace this without hesitation.&lt;/blockquote&gt;&lt;br /&gt;So to start dzil&amp;rsquo;s generation isn&amp;rsquo;t quite as bad as a source filter which will give you the wrong line number period, using this generation will still give you the right line number for the module being run at the time. It just means the cpan line number may not match the repo line number. I&amp;rsquo;m going to show you how to fix this, but you don&amp;rsquo;t always have to. The most common place I&amp;rsquo;ve found problems with in code generation has been tests created by extending InlineFiles. In these cases you just want to go and bug the author of the Plugin. I think using these plugins is much better than writing your own EOL Tests, NoTabs, Critic, and Kwalitee etc. It helps keep your dist quality up without extra work, ultimately leaving you with just the responsibility of writing good tests that are specific to just your distribution.&lt;br /&gt;&lt;br /&gt;Now on to making sure that your repository matches your cpan dist. The first thing you want to do is use &lt;code&gt;[Git::CommitBuild]&lt;/code&gt; (if you&amp;rsquo;re not using git look for something like it or write something like it) This will take all the generated output and commit it to another branch each time you build. Then make sure this branch is pushed to your public repository. I think the biggest problem this solves is having things like your README and your LICENSE actually be in your public repository (if your repo doesn&amp;rsquo;t have a LICENSE&amp;hellip; what&amp;rsquo;s the legal situation?). If you&amp;rsquo;re using github you can also change this to be the default branch to be displayed in the repo admin settings.&lt;br /&gt;&lt;br /&gt;Next thing is don&amp;rsquo;t use &lt;code&gt;&lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Prepender/&#34;&gt;::Plugin::Prepender&lt;/a&gt;&lt;/code&gt; This will evil-y insert lines at the beginning of your code which will definitely throw off the line numbers being output. It even seems to suggest using it to insert &lt;code&gt;use strict; use warnings;&lt;/code&gt;. If you need output prepended to all files, I suggest writing a plugin that takes advantage of &lt;code&gt;dzil new&lt;/code&gt; and maybe just write a script that you can fire off whenever you need to create a new file. This is the only module I know for sure that does this, but avoid ANY that insert actual code or prepend lines to your files (in a way that isn&amp;rsquo;t added to your actual &amp;lsquo;master&amp;rsquo;/&amp;lsquo;trunk&amp;rsquo; that should be patched).&lt;br /&gt;&lt;br /&gt;POD can also screw up your line numbers, if you&amp;rsquo;re using PodWeaver (or module that has similar side effects) with dzil, which you likely are. &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Best-Practices-Damian-Conway/dp/0596001738?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl Best Practices&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596001738&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; page 140 will save you here (actual quote pg 475 a summary chapter). &lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;Keep all user documentation in a single place within your source file. [Contiguity]&lt;/li&gt;&lt;li&gt;Place POD as close as possible to the end of the file. [Position]&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;This includes the &lt;code&gt;# ABSTRACT: my abstract here&lt;/code&gt; line. If you put the # ABSTRACT and any actual pod after the code then all the pod generated will be after the code in your build, and thus any line number errors will be correct. Of course this doesn&amp;rsquo;t save you if your error is in the output pod, but I suspect that&amp;rsquo;s not the original complaint anyhow, and there are lots of dzil plugins to help you keep your pod sane.&lt;br /&gt;&lt;br /&gt;Essentially don&amp;rsquo;t do anything that will change line numbers for the code in the resulting build output. Following this will ease contribution, and debugging; I do not believe it significantly increases maintainer load. Happy Hacking!&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;just remembered&amp;hellip; dzil inserts a BEGIN block&amp;hellip; sigh&amp;hellip; can&amp;rsquo;t win for nothing.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;I recommend using &lt;code&gt;&lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-OurPkgVersion/&#34;&gt;Dist::Zilla::Plugin::OurPkgVersion&lt;/a&gt;&lt;/code&gt; to avoid dzil&amp;rsquo;s BEGIN block / VERSION insertion.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>please don&#39;t use Dist::Zilla::PluginBundle::USERNAME</title>
      <link>http://blog.xenoterracide.com/post/please-dont-use-distzillapluginbundleusername/</link>
      <pubDate>Sat, 19 Jun 2010 02:05:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/please-dont-use-distzillapluginbundleusername/</guid>
      <description>&lt;p&gt;or create them. Here&amp;rsquo;s the problem&amp;hellip;. (short version is Don&amp;rsquo;t put PodSpellingTests in them)&lt;br /&gt;normally you&amp;rsquo;d have&lt;br /&gt;&lt;code&gt;&lt;pre&gt;[pluginA]&lt;br /&gt;[pluginB]&lt;br /&gt;[pluginC]&lt;br /&gt;[pluginXTests]&lt;br /&gt;[pluginYTests]&lt;br /&gt;[pluginZTests]&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;and one of them doesn&amp;rsquo;t work on your system (for whatever reason), well you can just do this.&lt;br /&gt;&lt;code&gt;&lt;pre&gt;[pluginA]&lt;br /&gt;[pluginB]&lt;br /&gt;[pluginC]&lt;br /&gt;;[pluginXTests]&lt;br /&gt;[pluginYTests]&lt;br /&gt;[pluginZTests]&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;the &lt;code&gt;;&lt;/code&gt; is a comment in ini, now dzil won&amp;rsquo;t use that plugin. But people will say well you don&amp;rsquo;t want to do that of course I want that plugin enabled. Here&amp;rsquo;s why you may not temporarily. Casual user X has a bug in /your/ module that&amp;rsquo;s using dzil, they code up a patch, and they want to run your test suite. The can&amp;rsquo;t, because &lt;code&gt;[pluginXTests]&lt;/code&gt; won&amp;rsquo;t even install properly on their system due to a non perl dependency. They could have just commented it out, but now because you&amp;rsquo;ve used this PluginBundle it become difficult. They can&amp;rsquo;t just comment it out.&lt;br /&gt;&lt;br /&gt;They might be able to &lt;br /&gt;[@Filter]&lt;br /&gt;-bundle = @USERNAME&lt;br /&gt;-remove = pluginXTests&lt;br /&gt;&lt;br /&gt;IF they can get your bundle installed in the first place. This requires them find a way to install your Bundle without installing said broken module.&lt;br /&gt;&lt;br /&gt;as I stated at the top my problem is with [PodSpellingTests] it itself isn&amp;rsquo;t broken, but it&amp;rsquo;s dependency Test::Spelling &lt;a href=&#34;https://rt.cpan.org/Ticket/Display.html?id=56483&#34;&gt;is&lt;/a&gt; on some systems, due to the lack of a &amp;lsquo;spell&amp;rsquo; command.&lt;br /&gt;&lt;br /&gt;Yes I know there&amp;rsquo;s a workaround&amp;hellip; I could just copy a shell script into my path that makes aspell or something work, but really that&amp;rsquo;s not the right solution. No I&amp;rsquo;m not packaging GNU Spell for my system either, the other spell programs work much better (from what I&amp;rsquo;ve read).&lt;br /&gt;&lt;br /&gt;Also I find modules with your own username in them to be fairly obnoxious.&lt;br /&gt;&lt;br /&gt;If you&amp;rsquo;d like less code, can&amp;rsquo;t we start making a few more generic Bundle&amp;rsquo;s? I wouldn&amp;rsquo;t minde seeing a Bundle for Tests, and maybe another one for other stuff. I think &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the lines in my dist.ini&amp;rsquo;s are tests.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dist::Zilla vs xenoterracide</title>
      <link>http://blog.xenoterracide.com/post/distzilla-vs-xenoterracide/</link>
      <pubDate>Wed, 28 Apr 2010 21:32:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/distzilla-vs-xenoterracide/</guid>
      <description>&lt;p&gt;&lt;noscript&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=fXW02XmBGQw&#34;&gt;Yes, I am invincible! &lt;/a&gt;&lt;/noscript&gt;&lt;object width=&#34;640&#34; height=&#34;385&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/fXW02XmBGQw&amp;hl=en_US&amp;fs=1&amp;&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/fXW02XmBGQw&amp;hl=en_US&amp;fs=1&amp;&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;640&#34; height=&#34;385&#34;&gt;&lt;/embed&gt;&lt;/object&gt; I solved &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/my-new-lovehate-relationship-with.html&#34;&gt;my problem&lt;/a&gt; with &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla/&#34;&gt;Dist::Zilla&lt;/a&gt;. If you agree with me that you should be able to install from your git repository, without requiring your users to have Dist::Zilla installed here&amp;rsquo;s one way of doing it.&lt;br /&gt;&lt;br /&gt;First install &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-CopyTo/lib/Dist/Zilla/Plugin/CopyTo.pm&#34;&gt;Dist::Zilla::Plugin::CopyTo&lt;/a&gt;. Now Edit your &lt;code&gt;dist.ini&lt;/code&gt;. Most people probably use one of the Dist::Zilla bundles. Assuming you use Basic here&amp;rsquo;s what you do.&lt;script src=&#34;http://gist.github.com/382978.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;; remove GatherDir from basic so we can specify it seperately&lt;br /&gt;[@Filter]&lt;br /&gt;    bundle = @Basic&lt;br /&gt;    remove = GatherDir&lt;br /&gt;&lt;br /&gt;; specify the where your ungenerated source lives&lt;br /&gt;[GatherDir]&lt;br /&gt;    root = src&lt;br /&gt;; specify where you want the generated source to live&lt;br /&gt;[CopyTo]&lt;br /&gt;    dir = .&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Now as you can see we use GatherDir to get where the source should come from and CopyTo to tell additional places where the output of the script should be sent to. It will still send to the default directory, that&amp;rsquo;s ok, you can just ignore those files. add . to your repo (making sure to add the default generated location to your ignore list) and commit. now if dzil changes any of these you can see it.&lt;br /&gt;&lt;br /&gt;If you wanted to with git you could use a &lt;code&gt;&lt;a href=&#34;http://blog.nuclearsquid.com/writings/git-new-workdir.html&#34;&gt;git-new-workdir&lt;/a&gt;&lt;/code&gt; and another branch and copy to it and commit this stuff to a different branch. I haven&amp;rsquo;t found another way to do it in a seperate branch yet, although someone said it&amp;rsquo;s possible.&lt;br /&gt;&lt;br /&gt;P.S. 1&lt;br /&gt;If &lt;code&gt;dzil&lt;/code&gt; ever gives you some vague error about some util file&amp;hellip; run &lt;code&gt;dzil clean&lt;/code&gt; I don&amp;rsquo;t know why it was doing that to me occasionally through all this but I spent like 8 hours thinking my config was screwed up when the directory just needed to be cleaned.&lt;br /&gt;&lt;br /&gt;P.S. 2 Thanks to rjbs for putting up with my asininity while I asked a lot of questions and ranted.&lt;br /&gt;&lt;br /&gt;P.S 3&lt;br /&gt;My stuff is 99% working now&amp;hellip; I just have a problem where my licensing is wrong :( I&amp;rsquo;ve set it to Perl_5 but it really should be GPL3 and Artistic2 (or whatever those are in Software::License).&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My new Love/Hate Relationship with Dist::Zilla</title>
      <link>http://blog.xenoterracide.com/post/my-new-lovehate-relationship-with-distzilla/</link>
      <pubDate>Tue, 27 Apr 2010 08:30:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/my-new-lovehate-relationship-with-distzilla/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla/&#34;&gt;Dist::Zilla&lt;/a&gt; is a great release tool, code generator, and it just plain takes the boring part of doing a release away from you.That having been said, it does, imo, horrible things to your source repository. &amp;ldquo;But, Caleb, it cleans up your source repository you can remove a lot of excess stuff you don&amp;rsquo;t really need to be storing there&amp;rdquo;. Well&amp;hellip; I disagree, to the point that I&amp;rsquo;ve used every explicative in the book to express my displeasure. Let me explain why I disagree.&lt;br /&gt;&lt;br /&gt;First let me explain my use cases. I have only one package on CPAN, &lt;a href=&#34;http://search.cpan.org/dist/Template-ShowStartStop/lib/Template/ShowStartStop.pm&#34;&gt;Template::ShowStartStop&lt;/a&gt; and it&amp;rsquo;s relatively simple to the point that Dist::Zilla is almost overkill (but I still find it nice). I also maintain a sizeable portion of CPAN on Arch Linux&amp;rsquo;s &lt;a href=&#34; http://aur.archlinux.org/packages.php?SeB=m&amp;L=2&amp;K=xenoterracide&#34;&gt;AUR&lt;/a&gt;. In addition to standard CPAN Packaging for my own package I created a &lt;a href=&#34;http://aur.archlinux.org/packages.php?ID=35120&#34;&gt;-git package&lt;/a&gt; which allows me to install directly from my source repository on &lt;a href=&#34;http://github.com/xenoterracide/Template-ShowStartStop&#34;&gt;Github&lt;/a&gt;. That worked wonderfully well until I started using Dist::Zilla (note: I haven&amp;rsquo;t gotten a poorly working (read hack that&amp;rsquo;s buggy) version now).&lt;br /&gt;&lt;br /&gt;So Dist::Zilla is great for CPAN, no problem for normal downstream packages, but makes things more painful for Version Control Users. &amp;ldquo;But Caleb, it does nice things for me for version control&amp;rdquo;. Yes it does, but I think it also has some consequences that people don&amp;rsquo;t realize. If you know how Dist::Zilla works pretend that you don&amp;rsquo;t.&lt;br /&gt;&lt;br /&gt;Look at my &lt;a href=&#34;http://github.com/xenoterracide/Template-ShowStartStop&#34;&gt;repo&lt;/a&gt; What License is my code licensed under? usually this is in the COPYING file. There&amp;rsquo;s no COPYING file there. How do I install it? No README either, oh and the module isn&amp;rsquo;t complete as is things like version are stripped so Dist::Zilla can generate them for me. This list goes on and on all basically leading back to my issue. Why does Dist::Zilla have to take these things out of my source repository?&lt;br /&gt;&lt;br /&gt;The answer was&amp;hellip; you wouldn&amp;rsquo;t store .o files in your repository would you? why would you store these generated files&amp;hellip; oh I dunno&amp;hellip; because someone shouldn&amp;rsquo;t have to install Dist::Zilla just to use my latest git? and they aren&amp;rsquo;t like .o files because those are binarily specific to a lot of things and won&amp;rsquo;t be useful on most other machines, unlike these files.&lt;br /&gt;&lt;br /&gt;Let&amp;rsquo;s say Dist::Zilla has a bug in what they generate for code. They fix it, I update, all is good for me. Someone else who hasn&amp;rsquo;t updated Dist::Zilla downloads the code and builds and hits the bug&amp;hellip; they complain to me. I explain it to them, they update Dist::Zilla, they&amp;rsquo;re happy, I&amp;rsquo;m happy. But we could have avoided this, if I stored all the output in my repo they&amp;rsquo;d never have to worry about Dist::Zilla.&lt;br /&gt;&lt;br /&gt;So I&amp;rsquo;ve been told this will never be fixed because they don&amp;rsquo;t want to clobber the existing files, plus the whole&amp;hellip; these are like .o files, thing. Ok, clobber == bad. So how could we fix it so I&amp;rsquo;m happy? and everyones happy. We should a directory &lt;code&gt;src&lt;/code&gt; shall be the source of all non generated code. Much like when working with compiled code you have a &lt;code&gt;src&lt;/code&gt; directory for source files and a directory for output. the lib that&amp;rsquo;s still here will be the final generated lib. All the top level files will also be generated. Only the stuff in &lt;code&gt;src&lt;/code&gt; is what should be worked on. And the generated README will give all these wonderful instructions that will now be presented to users visiting the github repo. And when I&amp;rsquo;m writing a -git package I won&amp;rsquo;t have to include any dzil instructions because I don&amp;rsquo;t need to generate this code all the time.&lt;br /&gt;&lt;br /&gt;and you know what? if people don&amp;rsquo;t want to store generated files in there vcs they can always use something like .gitignore. So everybody should be happy.&lt;br /&gt;&lt;br /&gt;For backcompat just make it a configuration in dist.ini. We can have a [src] dir which could be . for those who want it the way it works now. and an [output] dir.&lt;br /&gt;&lt;br /&gt;Will Dist::Zilla be worth this pain? I&amp;rsquo;m not sure.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>