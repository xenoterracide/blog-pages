<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Businesscybersource on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/businesscybersource/index.xml</link>
    <description>Recent content in Businesscybersource on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/businesscybersource/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Business::CyberSource API is stabilizing as of 0.7.x</title>
      <link>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</link>
      <pubDate>Wed, 07 Nov 2012 21:15:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; (BC) has been going through API changes for a while now. If you&amp;rsquo;re using it you&amp;rsquo;ve probably noticed this and wondered why? The reason behind it was when I first made it I wanted it to be extremely simple to use, and I was realistically a Junior programmer. Over the past year I learned a lot about API design and Object Oriented Programming, as well as payment gateways and credit card transaction processing. From the first production ready release I knew that it had design problems due to a large quantity of duplicated code, but at the time I didn&amp;rsquo;t know how to get rid of it. &lt;/p&gt;&lt;h2&gt;Domain Driven Design&lt;/h2&gt;&lt;p&gt;My first refactor used some principles I learned from &lt;a href=&#34;http://www.amazon.com/gp/product/0321125215/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321125215&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; I changed the design of the objects to be more clear for experts in CyberSource. I also started restructuring them to more closely match the remote model. This meant making Requests and Responses to be made up of nested objects (Responses were only done as of 0.7.x). Another Change regarding this was to rename the &lt;code&gt;submit&lt;/code&gt; method to &lt;code&gt;run_transaction&lt;/code&gt; which is the name of the Remote Procedure call that is executed. &lt;h2&gt;Composite Design Pattern&lt;/h2&gt;&lt;p&gt;By making the Requests up of nested objects it allowed me to use the Composite Pattern from &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; to serialize all of the objects into a simple nested hashref that &lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt; expects. Moving to these smaller objects that could &lt;code&gt;serialize&lt;/code&gt; allowed me to also add more offline tests. &lt;/p&gt;&lt;h2&gt;Dependency Injection in Tests&lt;/h2&gt;&lt;p&gt;Most of the tests for BC start out exactly the same, except for one change, the value in the amount part of the Credit Card Authorization. This is because CyberSource&amp;rsquo;s Test API uses special amounts to allow you to test getting different responses. e.g. something like (I&amp;rsquo;d have to look it up) 5000.05 is maybe a REJECT with a special processor code and cv code. Because of this I wired up my tests using &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; to reduce the amount of boilerplate code in all tests that require actual remote interaction. &lt;/p&gt;&lt;h2&gt;The Impact&lt;/h2&gt;&lt;p&gt;Ultimately changing my &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facade&lt;/a&gt; to make use of more design patterns and be designed after it&amp;rsquo;s niche domain has allowed me to have both simpler, deduplicated, more robust, more correct, and easier to modify code. Some things were not possible in earlier versions, or would have been incredibly complex to add. Now it&amp;rsquo;ll simply be an issue of adding a Moose attribute to add a feature present in the WSDL. Before certain calls could not return all of information that was in the actual SOAP response, now everything should be accessible. &lt;/p&gt;&lt;h2&gt;Possible Bugs&lt;/h2&gt;&lt;p&gt;One of the possible bugs of this last refactor is that I use &lt;a href=&#34;https://metacpan.org/module/MooseX::StrictConstructor&#34;&gt;MooseX::StrictConstructor&lt;/a&gt; for all of my Moose objects. It is possible now that the XML::Compile::SOAP hash is simply passed to the Response Object that if a key I didn&amp;rsquo;t account for were present that an exception would be thrown. If this is thrown on anything other than a 102 Invalid Field response, then it is a bug in BC and should be reported. I could have turned StrictConstructor off on the responses, but I believe that throwing the exceptions may ultimately make BC a better library. Also with a test suite that totals over 1400 (including generated generic ) tests, I&amp;rsquo;m fairly confident that there will be no problems in production. &lt;/p&gt;&lt;h2&gt;New Debugging&lt;/h2&gt;&lt;p&gt;In order to aid in finding bugs and diagnosing problems when they happen cybersource now has 2 debug setting levels. These can be set by having debug be 0 (off), 1 (request/response hash), 2 (full soap payloads). These should not be turned on in production and because they will print out Credit Card numbers. &lt;/p&gt;&lt;h2&gt;In Trial&lt;/h2&gt;&lt;p&gt;Currently I&amp;rsquo;ve left BC v0.7.5 in trial, but barring any bugs being reported, or cpan testers tests failing, I&amp;rsquo;ll probably release v.0.7.6 as stable early early next week.&lt;/p&gt;&lt;h2&gt;Stable API&lt;/h2&gt;&lt;p&gt;I do not forsee any more major API changes in the future of BC, all of my original problems have been weeded out. This means I&amp;rsquo;ll be able to focus on features and documentation with future work. It is possible that some changes to exceptions and error handling may happen, but I don&amp;rsquo;t see that being a big issue. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interface Driven Design</title>
      <link>http://blog.xenoterracide.com/post/interface-driven-design/</link>
      <pubDate>Sat, 03 Nov 2012 05:37:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/interface-driven-design/</guid>
      <description>&lt;p&gt;&lt;h2&gt;What is Interface Driven Design?&lt;/h2&gt;&lt;p&gt;Interface Driven Design simply means that you should design your software around a flexible, easy to use, easy to understand interface. This is easy to achieve if your objects are of &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt; design. There is a simple table and reference link if you&amp;rsquo;re not familiar with the principles. &lt;/p&gt;&lt;h2&gt;My Work is SOLID already&lt;/h2&gt;&lt;p&gt;Then you&amp;rsquo;re on the right track but it&amp;rsquo;s not enough if you don&amp;rsquo;t fully marry the concept to best practices. I&amp;rsquo;ve seen quite a bit of work that&amp;rsquo;s SOLID enough but fails to provide good interfaces. &lt;/p&gt;&lt;h2&gt;Why is this so important?&lt;/h2&gt;&lt;p&gt;Getting your interfaces correct is important because someone should be able to replace your code with new code, or subclassed code and it should still work. &lt;/p&gt;&lt;h3&gt;Example: LWP::UserAgent and Mojo::Useragent&lt;/h3&gt;&lt;p&gt;These two libraries do exactly the same thing, they provide an HTTP Client. However, they do not conform to the same interface. This means That if you&amp;rsquo;re using Mojolicious to write a web application, but require an external library to interface with a remote API, because its interface will make your development easier, you cannot change it&amp;rsquo;s use of LWP::UserAgent to Mojo::Useragent. Now you&amp;rsquo;ve added another dependency and complexity to your application. &lt;/p&gt;&lt;h3&gt;Example: DBI&lt;/h3&gt;&lt;p&gt;DBI is an example of a common interface to many different database drivers that do similar things, but underlyingly with different syntax. This allows you to use a common interface and ignore the differences in implementation between, say DBD::mysql and DBD::Pg. &lt;/p&gt;&lt;h2&gt;How do I get there?&lt;/h2&gt;&lt;p&gt;To begin, and as a general rule your interface should conform to style choices in the language you&amp;rsquo;re using. Meaning that in Perl you should use &lt;code&gt;$obj-&amp;gt;foo&lt;em&gt;bar&lt;/code&gt; not &lt;code&gt;$obj-&amp;gt;getFooBar&lt;/code&gt; as it is the style most objects use. &lt;h3&gt;Domain Driven Design&lt;/h3&gt;&lt;p&gt;The first thing I suggest doing is design your initial interface using Domain Driven Design. Look at the common language used to describe the thing that you&amp;rsquo;re building, and name your package, classes, methods, functions, after words from the common language. You&amp;rsquo;re writing a new HTTP client? you probably have some concept of POST, so &lt;code&gt;$client-&amp;gt;post&lt;/code&gt; makes a lot of sense. If you&amp;rsquo;re writing a billing system you may have some concept of Invoice-&amp;gt;process. When doing Domain Driven Design your Interface should be easy to understand by an Expert in that domain (regardless of whether they are technically savvy ). Example if I told a Billing expert I was writing the code for Invoice-&amp;gt;process they probably would have no idea what the internals meant, but they should easily understand the purpose and a general idea of what it actually does. (note: having an Invoice object might be bad, as an invoice is a request for payment on a Sale, and a receipt is a record of, therefore they are just views on a Sale, but that&amp;rsquo;s a more complex notion) &lt;/p&gt;&lt;h3&gt;Pure Fabrication&lt;/h3&gt;&lt;p&gt;Unfortunately sometimes what you&amp;rsquo;re creating has no real world equivalent (actually HTTP is an example that is now more of its own domain). So you&amp;rsquo;re making it up as you go. In this case you need to create objects that are a &amp;lt;a href=&amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/GRASP&#34;&gt;http://en.wikipedia.org/wiki/GRASP&lt;/a&gt;&lt;/em&gt;(object-oriented_design)#Pure_Fabrication&amp;rdquo;&amp;gt;Pure Fabrication&lt;/a&gt;. When creating interfaces for these I suggest looking to patterns, simple interfaces, and the interfaces for similar things in other projects, or languages. Use names that are as descriptive as you can get. &lt;/p&gt;&lt;h3&gt;Existing Interfaces&lt;/h3&gt;&lt;p&gt;You want to do this whenever there is an existing implementation that&amp;rsquo;s not good enough, but has a decent interface. Perfect examples are DBI and LWP. They both have  good interfaces, but there&amp;rsquo;s a chance that the implementation isn&amp;rsquo;t good enough (or you have need of a nonexistant driver).&lt;/p&gt;&lt;p&gt;An example with be AnyEvent::HTTP::LWP::UserAgent. If you&amp;rsquo;re using AnyEvent you&amp;rsquo;ll probably know you don&amp;rsquo;t want LWP&amp;rsquo;s blocking interface, but unfortunately the library you need to use uses LWP, what a dilemma. You could rewrite the library entirely to use AnyEvent::HTTP, but this will be both tedious and error prone. However, Anyevent::HTTP::LWP::UserAgent provides an LWP Interface, this means that you can simply substitute it in the library (hopefully the library made this easy by following the Inversion of Control Principle to be discussed in a future post). &lt;/p&gt;&lt;p&gt;Like AnyEvent::HTTP::LWP::UserAgent you may need to build a Facade interface that mimicks another interface. It would be better to start with this interface, but then again sometimes that&amp;rsquo;s not ideal either. &lt;/p&gt;&lt;h3&gt;Combinations&lt;/h3&gt;&lt;p&gt;Sometimes you have to combine all of these strategies. Business::OnlinePayment::CyberSource (BOPC) and Business::CyberSource ( things I&amp;rsquo;m responsible for ) are good examples. Business::CyberSource was written because BOPC 2.x was no longer maintained and relied on a proprietary library which was not 64 bit compatible. I decided that I did not like the Business::OnlinePayment interface (and still don&amp;rsquo;t to be honest ) and so set out to create a new one. &lt;/p&gt;&lt;p&gt;My first attempts was in retrospect focussed more on creating a perlish API than a Model driven API. In the long run this caused significant pain and resulted in some bad code. As of version 0.7.x (in TRIAL) Business::CyberSource&amp;rsquo;s API is modeled after the remote API that CyberSource provides, and as such it has become much easier for me to provide access to new remote API features. Because I have continued work on ensuring that my Interface only relies on it&amp;rsquo;s own interfaces it should now be trivial to replace any single piece of Business::CyberSources API. Don&amp;rsquo;t want to use my request objects? you could simply pass an object that can serialize to a hashref that looks like what XML::Compile::SOAP expects. Any Expert at CyberSource should be able to read and understand my API (not tested), where they might not understand BOPC&amp;rsquo;s. Unfortunately to get to this point I&amp;rsquo;ve had to break my interface several times. &lt;/p&gt;&lt;p&gt;Later due to new business concerns we had  a need to conform to Business::OnlinePayments Interface, and so we rewrote BOPC to use Business::CyberSource as the backend. It does not provide access to all of the features, but it can be used in anything that knows how to use a Business::OnlinePayment API. I would have preferred to have this done sooner, but due to tuits and business constraints it was put off. &lt;/p&gt;&lt;p&gt;If you read the Source of either of these you will find a few fabrications, such as the use of Factories. &lt;/p&gt;&lt;h2&gt;Interface as a Language Feature&lt;/h2&gt;&lt;p&gt;Many languages support specifying the interface via a language feature. If your language supports this you should take advantage of it. Unfortunately Perl&amp;rsquo;s simple &lt;code&gt;can&lt;/code&gt; support really isn&amp;rsquo;t enough, and Moose&amp;rsquo;s Interface as Role support doesn&amp;rsquo;t really work due to ordering issues. (I implemented the interface but unfortunately due to ordering my implementation is runtime and happens comes after the compiletime requirement ). I will say though that I believe it is more important to provide the actual calling convention in a dynamic language like Perl, than use of an actual interface. At least with Moose I feel that an interface is (generally) as concrete as the isa for the class, and so I don&amp;rsquo;t bother checking them, they are an implementation detail. &lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Ultimately the goal is to create easy interfaces to understand, use, and properly reflective of the problem. By doing so you also make concrete implementations easy to update and reuse without breaking your clients. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with SOAP using Perl: Part 0 ( prelude )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-0--prelude-/</link>
      <pubDate>Sat, 15 Oct 2011 15:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-0--prelude-/</guid>
      <description>&lt;p&gt;This is a prelude to a series on working with SOAP Requests using Perl.  For the past 3 months I have been working on a&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Perl API&lt;/a&gt;&amp;nbsp;for &lt;a href=&#34;http://www.cybersource.com/developers/develop/integration_methods/simple_order_and_soap_toolkit_api/&#34;&gt;CyberSource&amp;rsquo;s Simple Order API&lt;/a&gt; which uses SOAP (I should note, that although I believe most of the API is now stable some area&amp;rsquo;s still need work, and thus I don&amp;rsquo;t expect it to reach 1.0.0 anytime soon).&lt;br /&gt;&lt;br /&gt;First I used &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt; to do my requests, but I found it confusing to construct the requests that I needed to make. I even discovered a bug that lead to the current ( 0.714 ) release of SOAP::Lite.&lt;br /&gt;&lt;br /&gt;Next I started using &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; to make it easier to build my SOAP::Lite requests. This was good, but frustrating that I had to add my data in a specific order.&lt;br /&gt;&lt;br /&gt;Finally I came upon&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;. A glance at it&amp;rsquo;s API which used a hash to build requests seemed much better. however, it took me a few weeks and some help from&amp;nbsp;Mark Overmeer (the author) and an update to&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP::WSS&#34;&gt;XML::Compile::SOAP::WSS&lt;/a&gt;&amp;nbsp;to get it to work.&lt;br /&gt;&lt;br /&gt;If you&amp;rsquo;re planning on starting a new project that requires SOAP I definitely recommend using&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;&amp;nbsp;if you have a &lt;code&gt;.wsdl&lt;/code&gt; and a &lt;code&gt;.xsd&lt;/code&gt; to work with.&lt;br /&gt;&lt;br /&gt;I will be covering all 3 of these methods in Parts 1, 2 and 3 of the series.&lt;br /&gt;&lt;br /&gt;To get started we&amp;rsquo;ll need a SOAP Server since I haven&amp;rsquo;t been able to find any reliable public services. To do this you can install&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP::Daemon&#34;&gt;XML::Compile::SOAP::Daemon&lt;/a&gt;&amp;nbsp;(which probably could use some Plack/PSGI love ). You&amp;rsquo;ll want to grab a copy of the namesservice example that is in XML::Compile::SOAP::Daemon, I have provided a &lt;a href=&#34;https://gist.github.com/1971856&#34;&gt;patched copy in a gist&lt;/a&gt; . Once you&amp;rsquo;ve done that you can do &lt;code&gt;perl server.pl&lt;/code&gt; . Now you should have a Server running on&amp;nbsp;&lt;a href=&#34;http://localhost:8877/&#34;&gt;http://localhost:8877&lt;/a&gt;&amp;nbsp;which we can use for testing our client examples.&lt;br /&gt;&lt;br /&gt;Please be advised, these tutorials will not be explain XML, XSD, WSDL, or SOAP, but simply the Perl interfaces. &lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Here is &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;Part 1 ( SOAP::Lite )&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>