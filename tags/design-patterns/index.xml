<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/design-patterns/index.xml</link>
    <description>Recent content in Design Patterns on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Single Repository, one Aggregate</title>
      <link>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</link>
      <pubDate>Thu, 02 Jul 2015 02:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; as defined in &lt;a href=&#34;http://dddcommunity.org/book/evans_2003/&#34;&gt;Domain Driven Design&lt;/a&gt;&amp;nbsp;manages a single &lt;a href=&#34;http://martinfowler.com/bliki/DDD_Aggregate.html&#34;&gt;Aggregate&lt;/a&gt;. An aggregate may contain many entities, and value objects, but will have a single object as its root. Many of the Dao and even now some of the Repository implementations I see do not follow this, they are more likely to have a Repository per entity, than a Repository per aggregate, and of course in some cases this is required for various reasons.&lt;br /&gt;&lt;br /&gt;Ok, to start out we need our POM (or you can use Gradle), which configures our dependencies and plugins. We use a starter for Spring Data JPA, which pulls in Spring Data JPA and all of it&amp;rsquo;s suggested dependencies such as Hibernate. We also need a database and a database driver so we configure H2. Since we are inheriting from the Spring Platform BOM we don&amp;rsquo;t need to specify versions as it can configure them for us. We of course want to use Java 8 and specify our Application class so we will be able to run &lt;code&gt;mvn spring-boot:run&lt;/code&gt; at the end. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/pom.xml?embed=t&#34;&gt;&lt;/script&gt; &lt;br /&gt;Next Let&amp;rsquo;s configure our application to show the SQL that it is running, this isn&amp;rsquo;t required. You need to put &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/resources/application.properties?embed=t&#34;&gt;&lt;/script&gt; Now we need to create our Entities, let&amp;rsquo;s start at the entity Bar that is the deepest part of the Aggregate root. It extends &lt;a href=&#34;http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractPersistable.html&#34;&gt;AbstractPersistable&lt;/a&gt;&amp;nbsp;so that we get an Auto Incrementing or Sequenced id. We also use AbstractPeristable because for our task we require that our entities implement &lt;a href=&#34;http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Persistable.html&#34;&gt;Persistable&lt;/a&gt;, as it changes the behavior of save on the repository if your objects are new.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Bar.java?embed=t&#34;&gt;&lt;/script&gt;Next let&amp;rsquo;s create Foo, it is much the same, but you&amp;rsquo;ll notice the &lt;code&gt;@OneToOne&lt;/code&gt; that specifies &lt;code&gt;CascadeType.ALL&lt;/code&gt;. This is important as without it persist and merge won&amp;rsquo;t work.&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Foo.java?embed=t&#34;&gt;&lt;/script&gt; Alright, let&amp;rsquo;s put together our repository, we could just make a CrudRepository, but let&amp;rsquo;s show off some paging too. You&amp;rsquo;ll notice that you have to pass the Entity and it&amp;rsquo;s Primary Key identifier type to the PagingAndSorting interface, the single method that we specify will find all the Foos by the nested baz property, using a &lt;code&gt;LIKE &amp;lsquo;%mystring%&amp;rsquo;&lt;/code&gt; query. Spring data will parse this interface and make an implementation for you automatically.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/FooRepo.java?embed=t&#34;&gt;&lt;/script&gt; You can create other lastly we do our Application, which is not designed to be a web server (it will exit immediately). The &lt;code&gt;@SpringBootApplication&lt;/code&gt; makes Spring Boot able to start the app and scan for components appropriately. We also Enable JPA repositories using the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt;. It&amp;rsquo;s main method (not recommended to prepopulate data this way), creates and save several Foos with nested bars, then I demonstrate a way that you can page the saved objects 2 at a time whilst filtering by that like statement, only 3 of the 4 entities saved will return. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Application.java?embed=t&#34;&gt;&lt;/script&gt; &lt;a href=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist&#34;&gt;The full source is available here.&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Providing with Providers and Bread::Board</title>
      <link>http://blog.xenoterracide.com/post/providing-with-providers-and-breadboard/</link>
      <pubDate>Wed, 23 Oct 2013 05:56:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/providing-with-providers-and-breadboard/</guid>
      <description>&lt;p&gt;&lt;p&gt;So when I started using Dependency Injection the following problem happened, how do I Inject this dependency when the container is not accessible at this point. Ok, that sentence even confused me a little bit, so what do I mean. Let&amp;rsquo;s say I have a &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; for Products that is injected into my controller. Each Product stored has one or more ProductVariants that is part of it&amp;rsquo;s aggregate, which itself has Nested Categories. Loading this entire graph at once would be relatively expensive, so we decide to do some lazy loading via DBI in the classes. One problem, how on earth do we Inject a Database Handle all the way down to Categories. Most of these ways are against DI, but they are solutions to the problem, there are also ways to combine these. Also, your model class having a database handle is probably bad design itself, but I&amp;rsquo;m not going to get into that. Sadly I&amp;rsquo;ve done every one of these &lt;/p&gt;&lt;h2&gt;Manual&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7047751.js&#34;&gt;&lt;/script&gt;Well at least you aren&amp;rsquo;t hard coding the way to read your config file, or your database driver. You&amp;rsquo;re smart enough to rely on an Interface rather than an Implementation. This is fraught with so many problems. Firstly if your web server (assuming it&amp;rsquo;s a web application) is getting any kind of traffic at all you&amp;rsquo;ll end up creating tons of database connections, you&amp;rsquo;ll also be reading that config file every time (ok I forget if Config::Merge caches to memory, it might, but often when I see people design this way, they are basically slurping the file every time). Someday 5 years from now, someone is going to hate you because now they need to support replicants&amp;hellip; and the config needs to support more connection strings, which means modifying every place you&amp;rsquo;ve done this. Also, you&amp;rsquo;ve completely lost the ability to inject your dependencies for whatever reason you may want to. &lt;/p&gt;&lt;p&gt;&lt;h2&gt;Inheritance/Composition&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7048475.js&#34;&gt;&lt;/script&gt;Ok, this is a little bit better than before, at least now you have Inverted your dependencies, you could provide the config or the database handle to the class. You&amp;rsquo;ve also put the code in a centralized place so it&amp;rsquo;s easy to change when you need to. You&amp;rsquo;re still reading the file fairly often, though perhaps less because it now depends on how long Product variant is alive. So what happens if your connection is lost? We still have a connection for each class, a connection that may now be held much longer. Why does Product Variant need access to the config? this is a violation of the Law of Demeter. &lt;/p&gt;&lt;h2&gt;Naive Service Locator&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7048828.js&#34;&gt;&lt;/script&gt;We need to get rid of knowledge of the config. We can do this by using a &lt;a href=&#34;http://martinfowler.com/articles/injection.html#UsingAServiceLocator&#34;&gt;Service Locator&lt;/a&gt;, which is simply a well known service to retrieve other services, usually a global singleton. In our example we&amp;rsquo;re at least smart enough to allow ourselves to change the class out via injection for testing. We no longer have tons of connections or config reads. However, we now have a new problems, what happens when our Application Server forks a process and we lose the database connection? What about when our locator gets more complex, like nested containers, that could change or access, specifically with replication. Also our class is now directly dependent on Bread::Board, and its interface. At least we&amp;rsquo;ve stopped caring how our database handle is built. Our locator is a global singleton, and we can&amp;rsquo;t change our Container class for testing. &lt;/p&gt;&lt;h2&gt;Robust Service Locator&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7049630.js&#34;&gt;&lt;/script&gt;Ok, so this is much better we can now configure which locator instance we use at runtime. We have removed the dependency on the Bread::board interface. There is no longer a problem with database connections being dropped. However, our container is still a global singleton, and our class still knows about it, which again, law of Demeter. &lt;/p&gt;&lt;h2&gt;Dependency Injection and Pass it down&lt;/h2&gt;&lt;p&gt;For now I&amp;rsquo;ve been basically ignoring other classes because with all of these other approaches they aren&amp;rsquo;t really a concern because you would do the same thing in every class, fetch your service. Much of the code is required here anyways, we always would have to do the sql, the transforms the loops. Dependency inversion is the opposite, do not think of how to retrieve the dependency instead have the dependency provided. But this becomes tricky to think of when you&amp;rsquo;re 3 or more levels deep in your hierarchy. One way to do it simply pass the reference. We create a specific problem here, our Repository lifecycle is a singleton so we need to ensure re-connection, thus we must inject the connector which means we are immediately dependent on the DBIx::Connector interface. This doesn&amp;rsquo;t seem that tricky until you add more than one service, which still may not seem that bad, until you have to add one later, and oh my god, now you&amp;rsquo;re modifying several classes. &lt;script src=&#34;https://gist.github.com/xenoterracide/7051143.js&#34;&gt;&lt;/script&gt;&lt;h2&gt;Dependency Injection with Providers&lt;/h2&gt;&lt;p&gt;This next and final sample show&amp;rsquo;s one way of doing this with Providers. A little context on a Provider first, a Provider is simply an object that can be used to retrieve a an instance of an object you need. It&amp;rsquo;s really just a kind of factory, but tends to be specific to dependency injection, in scenarios where you need a new instance of an object each time. It seems that it might also work well for other cases, such as objects with a longer lifespan than a new instance on every request from the injector, but shorter than a permanent singleton. In short a provider should be able to provide you with an instance on request, without requiring to to depend on retrieval. &lt;/p&gt;&lt;p&gt;The code that I&amp;rsquo;m demonstrating will not work currently practical scenario, meaning one where variant parameters are required. &lt;a href=&#34;https://github.com/stevan/BreadBoard/issues/28&#34;&gt;I&amp;rsquo;ve opened a bug about resolving the issue&lt;/a&gt;. In the mean time, the patch is simple and you could apply it yourself. You could use &lt;code&gt;BUILDARGS&lt;/code&gt; to rename an alternate key to the primary hashkey, in your models. You could also just define each model service one at a time instead of looping them, and actually validating their parameters. &lt;/p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7052294.js&#34;&gt;&lt;/script&gt;&lt;p&gt;You may note that I&amp;rsquo;ve removed the config, this was simply so I could build the code out so it works in completion. It maybe advantageous not to put config processing code in the Dependency injector, but rather provide the config to Bread::Board::Declare at the constructor via required services. This way of doing things requires much more code, but is also much more flexible. Every piece of the model, even those hat could not normally be accessed by the injector, can now have it&amp;rsquo;s dependencies injected to it. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Module: MooseX::RemoteHelper (RFC)</title>
      <link>http://blog.xenoterracide.com/post/new-module-moosexremotehelper-rfc/</link>
      <pubDate>Mon, 04 Jun 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/new-module-moosexremotehelper-rfc/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Background&lt;/h2&gt;&lt;p&gt;I have spent much of the last year writing and refining &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facades&lt;/a&gt;. At this point I&amp;rsquo;ve worked with SOAP, REST/JSON, and RPC url-form-encoded API&amp;rsquo;s. One of the hardest parts I&amp;rsquo;ve found is dealing with the serialization of a &lt;a href=&#34;http://martinfowler.com/eaaCatalog/dataTransferObject.html&#34;&gt;Data Transfer Object&lt;/a&gt; with a Perl interface into whatever the remote is expecting. When I started I didn&amp;rsquo;t know of these patterns, or really anything about these patterns. I highly recommend reading &lt;a href=&#34;http://www.amazon.com/gp/product/0321127420/ref=as_li_ss_tl?ie=UTF8&amp;tag=xenotsblog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321127420&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321127420&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;) if you want to know more about these patterns or things like Active Record and MVC.&lt;/p&gt;&lt;h3&gt;problem&lt;/h3&gt;&lt;p&gt;The problems I&amp;rsquo;ve encountered are many, including the fact most remotes are buggy or have a cludgy interface. Though there&amp;rsquo;s nothing you can do about a remote api that you don&amp;rsquo;t control, you can make your local API much cleaner and more native. Doing this however comes with a few challenges. One is that you have to map a local attribute name to a remote attribute name, because Perl uses underscores, and Java uses camel case, e.g &lt;code&gt;postal_code and postalCode&lt;/code&gt;. The second problem is that many times the value of the attribute in its perl native form is not what the remote wants, e.g. perl boolean &amp;ldquo;1&amp;rdquo; remote &amp;ldquo;Y&amp;rdquo;, or a &lt;a href=&#34;https://metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; object to W3C formatting. This second is not quite the same as mapping, because mapping is one to one, this translation could be turning an array into a comma separated string. The third problem, I didn&amp;rsquo;t run into until after I &amp;ldquo;solved&amp;rdquo; the first , is how should I deal with nested complex objects (one&amp;rsquo;s that can&amp;rsquo;t be just converted to just a string). &lt;/p&gt;&lt;p&gt;My first naive remote facade was very procedural and simply assembled top to bottom, in part because it was based on &lt;a href=&#34;https://metacpan/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;, and in part because I had yet to figure out a better way. This resulted in a giant unwieldy if/then chain. Obviously my translations were just inline too. &lt;/p&gt;&lt;p&gt;The next thing I tried was using triggers to construct a request hash to pass to &lt;a href=&#34;https://metacpan/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;. This worked better as the hash constructing code was kept right next to the attribute, so if I needed to modify the local or remote attribute, I could just go look at the attribute and the trigger tied to it. &lt;/p&gt;&lt;p&gt;After that I tried to use a &lt;a href=&#34;http://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; to translate from the native attribute name to the remote attribute name. This may have been more successful had it worked more like the &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Assembler in the Remote Facade&lt;/a&gt;. But ult imately since we were developing a rapidly changing API it seemed to bog me down, this is because I was changing the attributes on both sides of the mapping and thus the mapping at the same time (so at least 3 places). Here I was just manually dealing with the translation from a W3C DateTime format to the object I needed. &lt;/p&gt;&lt;h2&gt;a solution&lt;/h2&gt;&lt;p&gt;When I got assigned to yet another API and found myself doing yet another mapping and translation I decided that I needed to solve the problem. Enter the first iteration of &lt;a href=&#34;https://metacpan.org/module/MooseX::RemoteHelper&#34;&gt;MooseX::RemoteHelper&lt;/a&gt;. The first tie I used it with the form-url-encoded API so it was only needed for a single level of key, value pairs. .&lt;/p&gt;&lt;script src=&#34;https://gist.github.com/2822416.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;package MessagePart {&lt;br /&gt;    use Moose 2;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has array =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;SomeColonDelimitedArray&amp;rsquo;,&lt;br /&gt;        isa        =&amp;gt; &amp;lsquo;ArrayRef&amp;rsquo;,&lt;br /&gt;        is         =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return join( &amp;lsquo;:&amp;lsquo;, @{ $attr-&amp;gt;get_value( $instance ) } );&lt;br /&gt;        },&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;p&gt;Once I determined how to create MX::RemoteHelper it was simply a matter of using &lt;a href=&#34;https://metacpan.org/module/Class::MOP::Class&#34;&gt;Class::MOP::Class&lt;/a&gt; API&amp;rsquo;s to iterate all the attributes.  The source of &lt;a href=&#34;https://github.com/xenoterracide/MooseX-RemoteHelper/blob/master/lib/MooseX/RemoteHelper/CompositeSerialization.pm&#34;&gt;CompositeSerialization&lt;/a&gt; will give you some idea of how I did this. &lt;/p&gt;&lt;p&gt;Then I went back to apply this to a previous module, because the technique appears to be cleaner. Unfortunately I ran into a problem, this other API was a complex data structure, and how best to provide nested hashrefs and arrayrefs. Though I was now armed with Patterns I didn&amp;rsquo;t know of one that would solve the problem. Fortunately a quick flip through the &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;tag=xenotsblog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&#34;&gt;Gang of Four&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; brought me to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Composite_pattern&#34;&gt;Composite Pattern&lt;/a&gt;. I used this to write the recursive &lt;a href=&#34;https://github.com/xenoterracide/MooseX-RemoteHelper/blob/master/lib/MooseX/RemoteHelper/CompositeSerialization.pm&#34;&gt;CompositeSerialization&lt;/a&gt; so that if I had a sufficiently complex nested structure I could simply create another object to deal with that. Here&amp;rsquo;s a full example: &lt;script src=&#34;https://gist.github.com/2822109.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.014;&lt;br /&gt;use warnings;&lt;br /&gt;use Data::Dumper;&lt;br /&gt;&lt;br /&gt;package MessagePart {&lt;br /&gt;    use Moose;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has array =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;SomeColonDelimitedArray&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;ArrayRef&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return join( &amp;lsquo;:&amp;lsquo;, @{ $attr-&amp;gt;get_value( $instance ) } );&lt;br /&gt;        },&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;    &lt;br /&gt;package Message {&lt;br /&gt;    use Moose;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has bool =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;Boolean&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Bool&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return $attr-&amp;gt;get_value( $instance ) ? &amp;lsquo;Y&amp;rsquo; : &amp;lsquo;N&amp;rsquo;;&lt;br /&gt;        },&lt;br /&gt;&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    has foo_bar =&amp;gt; (&lt;br /&gt;        remote_name =&amp;gt; &amp;lsquo;FooBar&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Str&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    has part =&amp;gt; (&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;MessagePart&amp;rsquo;,&lt;br /&gt;        remote_name =&amp;gt; &amp;lsquo;MyMessagePart&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;my $message&lt;br /&gt;= Message-&amp;gt;new({&lt;br /&gt;    bool    =&amp;gt; 0,&lt;br /&gt;    foo_bar =&amp;gt; &amp;lsquo;Baz&amp;rsquo;,&lt;br /&gt;    part    =&amp;gt; MessagePart-&amp;gt;new({ array =&amp;gt; [ qw( 1 2 3 4 ) ] }),&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;say Dumper $message-&amp;gt;serialize&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;Which should give you this data structure: &lt;script src=&#34;https://gist.github.com/2822552.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;{&lt;br /&gt;  Boolean =&amp;gt; &amp;ldquo;N&amp;rdquo;,&lt;br /&gt;  FooBar =&amp;gt; &amp;ldquo;Baz&amp;rdquo;,&lt;br /&gt;  MyMessagePart =&amp;gt; {&lt;br /&gt;    SomeColonDelimitedArray =&amp;gt; &amp;ldquo;1:2:3:4&amp;rdquo;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;h2&gt;Request For Comment&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve recently released a &lt;a href=&#34;http://search.cpan.org/~xeno/MooseX-RemoteHelper-0.001010-TRIAL/lib/MooseX/RemoteHelper.pm&#34;&gt;Trial version of MooseX::RemoteHelper&lt;/a&gt; to CPAN. I&amp;rsquo;m currently refactoring &lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; to use it, and it appears to be solid. What I&amp;rsquo;d like to know what people think of the module names, method names and any other comments they might have. I haven&amp;rsquo;t been entirely sure that I&amp;rsquo;ve been naming things correctly while writing this, or that the code couldn&amp;rsquo;t be better in other ways. If there&amp;rsquo;s functionality you wish it had but doesn&amp;rsquo;t let me know. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>