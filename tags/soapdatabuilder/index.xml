<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Soapdatabuilder on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/soapdatabuilder/index.xml</link>
    <description>Recent content in Soapdatabuilder on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/soapdatabuilder/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adventures with SOAP using Perl: Part 2 ( SOAP::Data::Builder )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-2--soapdatabuilder-/</link>
      <pubDate>Sun, 11 Mar 2012 16:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-2--soapdatabuilder-/</guid>
      <description>&lt;p&gt;&lt;p&gt;Start by reading the first 2 parts : &lt;ol style=&#34;list-style: none;&#34;&gt;  &lt;li&gt;Part 0 &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-0.html&#34;&gt;Prelude (setup server.pl)&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;Part 1 &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;SOAP::Lite&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;&lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; is simply a wrapper around SOAP::Data and SOAP::Serializer for &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;. I used it because it made my life easier building nested complicated SOAP objects. However for Part 2 I will simply be showing how to use it to do the same code as Part 1. Unfortunately since Part 1 is so Simple this actually makes &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; more complex than &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt; would be for this. In a future installment I will attempt to show more complex examples, but I will explain them less. Now let&amp;rsquo;s take a look at the code. &lt;p&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/1971794.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl&lt;br /&gt;use 5.010;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use SOAP::Lite +trace =&amp;gt; [ &amp;lsquo;debug&amp;rsquo; ];&lt;br /&gt;use SOAP::Data::Builder;&lt;br /&gt;&lt;br /&gt;my $req = SOAP::Lite-&amp;gt;new(&lt;br /&gt;    readable   =&amp;gt; 1,&lt;br /&gt;    proxy      =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://localhost:8877&#39;&#34;&gt;http://localhost:8877&#39;&lt;/a&gt;,&lt;br /&gt;    ns         =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://namesservice.thomas_bayer.com/&#39;&#34;&gt;http://namesservice.thomas_bayer.com/&#39;&lt;/a&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;my $sb = SOAP::Data::Builder-&amp;gt;new;&lt;br /&gt;&lt;br /&gt;$sb-&amp;gt;add_elem(&lt;br /&gt;    name  =&amp;gt; &amp;lsquo;name&amp;rsquo;,&lt;br /&gt;    value =&amp;gt; &amp;lsquo;Mark&amp;rsquo;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;my $res = $req-&amp;gt;getNameInfo( $sb-&amp;gt;to_soap_data );&lt;br /&gt;&lt;br /&gt;say &amp;lsquo;-&amp;rsquo; x 3;&lt;br /&gt;&lt;br /&gt;unless ( defined $res-&amp;gt;fault ) {&lt;br /&gt;    say scalar $res-&amp;gt;valueof(&amp;lsquo;//country&amp;rsquo;);&lt;br /&gt;} else {&lt;br /&gt;    say $res-&amp;gt;fault-&amp;gt;{faultstring};&lt;br /&gt;    say $res-&amp;gt;fault-&amp;gt;{detail}{error};&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;p&gt;As you can see this is much the same as the final code in &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;Part 1&lt;/a&gt;, and if you run it, it does exactly the same thing. The first difference you&amp;rsquo;ll notice is the self explanatory creation of the &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; object. After that comes the &lt;code&gt;-&amp;gt;add_elem&lt;/code&gt; method call, which will simply create an element with a given element name and a value for that element. &lt;/p&gt;&lt;p&gt;Once you&amp;rsquo;ve finished adding elements to your &lt;code&gt;$sb&lt;/code&gt; object, then you can call pass &lt;code&gt;$sb-&amp;gt;to_soap_data&lt;/code&gt; to the method that you&amp;rsquo;re calling on SOAP::Lite, this generates the structure that SOAP::Lite needs to be able to make your request. &lt;/p&gt;&lt;p&gt;The only thing I didn&amp;rsquo;t like about SOAP::Data::Builder is if you don&amp;rsquo;t pass the right parameters to &lt;code&gt;-&amp;gt;add_elem&lt;/code&gt; it will not croak or error in any way that will really tell you what went wrong. &lt;a href=&#34;https://github.com/xenoterracide/SOAP-Data-Builder/commit/f16f5d693a366f2d9fd2ecca693e7622a3d24cae&#34;&gt;Simple patches to this can fix it&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>