<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xmlcompilesoap on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/xmlcompilesoap/index.xml</link>
    <description>Recent content in Xmlcompilesoap on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/xmlcompilesoap/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Business::CyberSource API is stabilizing as of 0.7.x</title>
      <link>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</link>
      <pubDate>Wed, 07 Nov 2012 21:15:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; (BC) has been going through API changes for a while now. If you&amp;rsquo;re using it you&amp;rsquo;ve probably noticed this and wondered why? The reason behind it was when I first made it I wanted it to be extremely simple to use, and I was realistically a Junior programmer. Over the past year I learned a lot about API design and Object Oriented Programming, as well as payment gateways and credit card transaction processing. From the first production ready release I knew that it had design problems due to a large quantity of duplicated code, but at the time I didn&amp;rsquo;t know how to get rid of it. &lt;/p&gt;&lt;h2&gt;Domain Driven Design&lt;/h2&gt;&lt;p&gt;My first refactor used some principles I learned from &lt;a href=&#34;http://www.amazon.com/gp/product/0321125215/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321125215&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; I changed the design of the objects to be more clear for experts in CyberSource. I also started restructuring them to more closely match the remote model. This meant making Requests and Responses to be made up of nested objects (Responses were only done as of 0.7.x). Another Change regarding this was to rename the &lt;code&gt;submit&lt;/code&gt; method to &lt;code&gt;run_transaction&lt;/code&gt; which is the name of the Remote Procedure call that is executed. &lt;h2&gt;Composite Design Pattern&lt;/h2&gt;&lt;p&gt;By making the Requests up of nested objects it allowed me to use the Composite Pattern from &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; to serialize all of the objects into a simple nested hashref that &lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt; expects. Moving to these smaller objects that could &lt;code&gt;serialize&lt;/code&gt; allowed me to also add more offline tests. &lt;/p&gt;&lt;h2&gt;Dependency Injection in Tests&lt;/h2&gt;&lt;p&gt;Most of the tests for BC start out exactly the same, except for one change, the value in the amount part of the Credit Card Authorization. This is because CyberSource&amp;rsquo;s Test API uses special amounts to allow you to test getting different responses. e.g. something like (I&amp;rsquo;d have to look it up) 5000.05 is maybe a REJECT with a special processor code and cv code. Because of this I wired up my tests using &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; to reduce the amount of boilerplate code in all tests that require actual remote interaction. &lt;/p&gt;&lt;h2&gt;The Impact&lt;/h2&gt;&lt;p&gt;Ultimately changing my &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facade&lt;/a&gt; to make use of more design patterns and be designed after it&amp;rsquo;s niche domain has allowed me to have both simpler, deduplicated, more robust, more correct, and easier to modify code. Some things were not possible in earlier versions, or would have been incredibly complex to add. Now it&amp;rsquo;ll simply be an issue of adding a Moose attribute to add a feature present in the WSDL. Before certain calls could not return all of information that was in the actual SOAP response, now everything should be accessible. &lt;/p&gt;&lt;h2&gt;Possible Bugs&lt;/h2&gt;&lt;p&gt;One of the possible bugs of this last refactor is that I use &lt;a href=&#34;https://metacpan.org/module/MooseX::StrictConstructor&#34;&gt;MooseX::StrictConstructor&lt;/a&gt; for all of my Moose objects. It is possible now that the XML::Compile::SOAP hash is simply passed to the Response Object that if a key I didn&amp;rsquo;t account for were present that an exception would be thrown. If this is thrown on anything other than a 102 Invalid Field response, then it is a bug in BC and should be reported. I could have turned StrictConstructor off on the responses, but I believe that throwing the exceptions may ultimately make BC a better library. Also with a test suite that totals over 1400 (including generated generic ) tests, I&amp;rsquo;m fairly confident that there will be no problems in production. &lt;/p&gt;&lt;h2&gt;New Debugging&lt;/h2&gt;&lt;p&gt;In order to aid in finding bugs and diagnosing problems when they happen cybersource now has 2 debug setting levels. These can be set by having debug be 0 (off), 1 (request/response hash), 2 (full soap payloads). These should not be turned on in production and because they will print out Credit Card numbers. &lt;/p&gt;&lt;h2&gt;In Trial&lt;/h2&gt;&lt;p&gt;Currently I&amp;rsquo;ve left BC v0.7.5 in trial, but barring any bugs being reported, or cpan testers tests failing, I&amp;rsquo;ll probably release v.0.7.6 as stable early early next week.&lt;/p&gt;&lt;h2&gt;Stable API&lt;/h2&gt;&lt;p&gt;I do not forsee any more major API changes in the future of BC, all of my original problems have been weeded out. This means I&amp;rsquo;ll be able to focus on features and documentation with future work. It is possible that some changes to exceptions and error handling may happen, but I don&amp;rsquo;t see that being a big issue. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Module: MooseX::RemoteHelper (RFC)</title>
      <link>http://blog.xenoterracide.com/post/new-module-moosexremotehelper-rfc/</link>
      <pubDate>Mon, 04 Jun 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/new-module-moosexremotehelper-rfc/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Background&lt;/h2&gt;&lt;p&gt;I have spent much of the last year writing and refining &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facades&lt;/a&gt;. At this point I&amp;rsquo;ve worked with SOAP, REST/JSON, and RPC url-form-encoded API&amp;rsquo;s. One of the hardest parts I&amp;rsquo;ve found is dealing with the serialization of a &lt;a href=&#34;http://martinfowler.com/eaaCatalog/dataTransferObject.html&#34;&gt;Data Transfer Object&lt;/a&gt; with a Perl interface into whatever the remote is expecting. When I started I didn&amp;rsquo;t know of these patterns, or really anything about these patterns. I highly recommend reading &lt;a href=&#34;http://www.amazon.com/gp/product/0321127420/ref=as_li_ss_tl?ie=UTF8&amp;tag=xenotsblog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321127420&#34;&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321127420&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;) if you want to know more about these patterns or things like Active Record and MVC.&lt;/p&gt;&lt;h3&gt;problem&lt;/h3&gt;&lt;p&gt;The problems I&amp;rsquo;ve encountered are many, including the fact most remotes are buggy or have a cludgy interface. Though there&amp;rsquo;s nothing you can do about a remote api that you don&amp;rsquo;t control, you can make your local API much cleaner and more native. Doing this however comes with a few challenges. One is that you have to map a local attribute name to a remote attribute name, because Perl uses underscores, and Java uses camel case, e.g &lt;code&gt;postal_code and postalCode&lt;/code&gt;. The second problem is that many times the value of the attribute in its perl native form is not what the remote wants, e.g. perl boolean &amp;ldquo;1&amp;rdquo; remote &amp;ldquo;Y&amp;rdquo;, or a &lt;a href=&#34;https://metacpan.org/module/DateTime&#34;&gt;DateTime&lt;/a&gt; object to W3C formatting. This second is not quite the same as mapping, because mapping is one to one, this translation could be turning an array into a comma separated string. The third problem, I didn&amp;rsquo;t run into until after I &amp;ldquo;solved&amp;rdquo; the first , is how should I deal with nested complex objects (one&amp;rsquo;s that can&amp;rsquo;t be just converted to just a string). &lt;/p&gt;&lt;p&gt;My first naive remote facade was very procedural and simply assembled top to bottom, in part because it was based on &lt;a href=&#34;https://metacpan/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;, and in part because I had yet to figure out a better way. This resulted in a giant unwieldy if/then chain. Obviously my translations were just inline too. &lt;/p&gt;&lt;p&gt;The next thing I tried was using triggers to construct a request hash to pass to &lt;a href=&#34;https://metacpan/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;. This worked better as the hash constructing code was kept right next to the attribute, so if I needed to modify the local or remote attribute, I could just go look at the attribute and the trigger tied to it. &lt;/p&gt;&lt;p&gt;After that I tried to use a &lt;a href=&#34;http://perldoc.perl.org/functions/map.html&#34;&gt;map&lt;/a&gt; to translate from the native attribute name to the remote attribute name. This may have been more successful had it worked more like the &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Assembler in the Remote Facade&lt;/a&gt;. But ult imately since we were developing a rapidly changing API it seemed to bog me down, this is because I was changing the attributes on both sides of the mapping and thus the mapping at the same time (so at least 3 places). Here I was just manually dealing with the translation from a W3C DateTime format to the object I needed. &lt;/p&gt;&lt;h2&gt;a solution&lt;/h2&gt;&lt;p&gt;When I got assigned to yet another API and found myself doing yet another mapping and translation I decided that I needed to solve the problem. Enter the first iteration of &lt;a href=&#34;https://metacpan.org/module/MooseX::RemoteHelper&#34;&gt;MooseX::RemoteHelper&lt;/a&gt;. The first tie I used it with the form-url-encoded API so it was only needed for a single level of key, value pairs. .&lt;/p&gt;&lt;script src=&#34;https://gist.github.com/2822416.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;package MessagePart {&lt;br /&gt;    use Moose 2;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has array =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;SomeColonDelimitedArray&amp;rsquo;,&lt;br /&gt;        isa        =&amp;gt; &amp;lsquo;ArrayRef&amp;rsquo;,&lt;br /&gt;        is         =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return join( &amp;lsquo;:&amp;lsquo;, @{ $attr-&amp;gt;get_value( $instance ) } );&lt;br /&gt;        },&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;p&gt;Once I determined how to create MX::RemoteHelper it was simply a matter of using &lt;a href=&#34;https://metacpan.org/module/Class::MOP::Class&#34;&gt;Class::MOP::Class&lt;/a&gt; API&amp;rsquo;s to iterate all the attributes.  The source of &lt;a href=&#34;https://github.com/xenoterracide/MooseX-RemoteHelper/blob/master/lib/MooseX/RemoteHelper/CompositeSerialization.pm&#34;&gt;CompositeSerialization&lt;/a&gt; will give you some idea of how I did this. &lt;/p&gt;&lt;p&gt;Then I went back to apply this to a previous module, because the technique appears to be cleaner. Unfortunately I ran into a problem, this other API was a complex data structure, and how best to provide nested hashrefs and arrayrefs. Though I was now armed with Patterns I didn&amp;rsquo;t know of one that would solve the problem. Fortunately a quick flip through the &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;tag=xenotsblog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&#34;&gt;Gang of Four&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; brought me to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Composite_pattern&#34;&gt;Composite Pattern&lt;/a&gt;. I used this to write the recursive &lt;a href=&#34;https://github.com/xenoterracide/MooseX-RemoteHelper/blob/master/lib/MooseX/RemoteHelper/CompositeSerialization.pm&#34;&gt;CompositeSerialization&lt;/a&gt; so that if I had a sufficiently complex nested structure I could simply create another object to deal with that. Here&amp;rsquo;s a full example: &lt;script src=&#34;https://gist.github.com/2822109.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.014;&lt;br /&gt;use warnings;&lt;br /&gt;use Data::Dumper;&lt;br /&gt;&lt;br /&gt;package MessagePart {&lt;br /&gt;    use Moose;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has array =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;SomeColonDelimitedArray&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;ArrayRef&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return join( &amp;lsquo;:&amp;lsquo;, @{ $attr-&amp;gt;get_value( $instance ) } );&lt;br /&gt;        },&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;    &lt;br /&gt;package Message {&lt;br /&gt;    use Moose;&lt;br /&gt;    use MooseX::RemoteHelper;&lt;br /&gt;&lt;br /&gt;    with &amp;lsquo;MooseX::RemoteHelper::CompositeSerialization&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    has bool =&amp;gt; (&lt;br /&gt;        remote&lt;em&gt;name =&amp;gt; &amp;lsquo;Boolean&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Bool&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        serializer =&amp;gt; sub {&lt;br /&gt;            my ( $attr, $instance ) = @&lt;/em&gt;;&lt;br /&gt;            return $attr-&amp;gt;get_value( $instance ) ? &amp;lsquo;Y&amp;rsquo; : &amp;lsquo;N&amp;rsquo;;&lt;br /&gt;        },&lt;br /&gt;&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    has foo_bar =&amp;gt; (&lt;br /&gt;        remote_name =&amp;gt; &amp;lsquo;FooBar&amp;rsquo;,&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Str&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    has part =&amp;gt; (&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;MessagePart&amp;rsquo;,&lt;br /&gt;        remote_name =&amp;gt; &amp;lsquo;MyMessagePart&amp;rsquo;,&lt;br /&gt;        is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;my $message&lt;br /&gt;= Message-&amp;gt;new({&lt;br /&gt;    bool    =&amp;gt; 0,&lt;br /&gt;    foo_bar =&amp;gt; &amp;lsquo;Baz&amp;rsquo;,&lt;br /&gt;    part    =&amp;gt; MessagePart-&amp;gt;new({ array =&amp;gt; [ qw( 1 2 3 4 ) ] }),&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;say Dumper $message-&amp;gt;serialize&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;Which should give you this data structure: &lt;script src=&#34;https://gist.github.com/2822552.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;{&lt;br /&gt;  Boolean =&amp;gt; &amp;ldquo;N&amp;rdquo;,&lt;br /&gt;  FooBar =&amp;gt; &amp;ldquo;Baz&amp;rdquo;,&lt;br /&gt;  MyMessagePart =&amp;gt; {&lt;br /&gt;    SomeColonDelimitedArray =&amp;gt; &amp;ldquo;1:2:3:4&amp;rdquo;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;h2&gt;Request For Comment&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve recently released a &lt;a href=&#34;http://search.cpan.org/~xeno/MooseX-RemoteHelper-0.001010-TRIAL/lib/MooseX/RemoteHelper.pm&#34;&gt;Trial version of MooseX::RemoteHelper&lt;/a&gt; to CPAN. I&amp;rsquo;m currently refactoring &lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; to use it, and it appears to be solid. What I&amp;rsquo;d like to know what people think of the module names, method names and any other comments they might have. I haven&amp;rsquo;t been entirely sure that I&amp;rsquo;ve been naming things correctly while writing this, or that the code couldn&amp;rsquo;t be better in other ways. If there&amp;rsquo;s functionality you wish it had but doesn&amp;rsquo;t let me know. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>