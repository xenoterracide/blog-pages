<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl Syntax Wishlist on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/perl-syntax-wishlist/index.xml</link>
    <description>Recent content in Perl Syntax Wishlist on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/perl-syntax-wishlist/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Perl Core Syntax Wishlist: Role Support</title>
      <link>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-role-support/</link>
      <pubDate>Mon, 11 Jun 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-role-support/</guid>
      <description>&lt;p&gt;I want to see Role&amp;rsquo;s added, even &lt;a href=&#34;http://php.net/manual/en/language.oop5.traits.php&#34;&gt;PHP got Traits before Perl&lt;/a&gt;. It doesn&amp;rsquo;t have to be a huge thing, in fact all I want is the composition aspect. Let me do this:  &lt;script src=&#34;https://gist.github.com/2632539.js&#34;&gt;  &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;package MyRole {&lt;br /&gt;    sub foo { return &amp;lsquo;test&amp;rsquo; }&lt;br /&gt;}&lt;br /&gt;package MyClass {&lt;br /&gt;    with &amp;lsquo;MyRole&amp;rsquo;;&lt;br /&gt;    &amp;hellip;&lt;br /&gt;}&lt;br /&gt;MyClass-&amp;gt;new-&amp;gt;foo;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt; I don&amp;rsquo;t really want or need anything else right now, just that would be fine. We should have interfaces too, but they aren&amp;rsquo;t really required just to support Role&amp;rsquo;s. We should probably have some sugar like I did for &lt;code&gt;class&lt;/code&gt; (e.g. &lt;code&gt;role&lt;/code&gt; keyword. and some of the same modules/pragmas loaded for this too)&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Core Syntax Wishlist: Class support</title>
      <link>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-class-support/</link>
      <pubDate>Mon, 28 May 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-class-support/</guid>
      <description>&lt;p&gt;I would like to see the &lt;code&gt;class&lt;/code&gt; keyword become part of Perl, but unlike some I don&amp;rsquo;t want it simply because it&amp;rsquo;s nicer syntax. I&amp;rsquo;d like it to behave differently from &lt;code&gt;package&lt;/code&gt;. I&amp;rsquo;d basically like to see this &lt;script src=&#34;https://gist.github.com/2632369.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;class MyClass {&lt;br /&gt;   method foo { return $self-&amp;gt;{foo} }&lt;br /&gt;   method info { return load_class(&amp;lsquo;Class::Info&amp;rsquo;)-&amp;gt;new }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;to be the equivalent of &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;{&lt;br /&gt;   use strict;&lt;br /&gt;   use warnings;&lt;br /&gt;   use utf8; # so our class can be named with utf8&lt;br /&gt;   package MyClass {&lt;br /&gt;      use namespace::autoclean;&lt;br /&gt;      use Scalar::Util qw( blessed );&lt;br /&gt;      # use Class::Load qw( load&lt;em&gt;class );&lt;br /&gt;      # or similar for a feature that I&amp;rsquo;m hoping will be in Class::Load in the future&lt;br /&gt;      # for now I&amp;rsquo;ll show with require&lt;br /&gt;&lt;br /&gt;      sub new { # or something better, point is that there&amp;rsquo;s a default simple constructor&lt;br /&gt;          my $class = shift;&lt;br /&gt;          my $self  = ref $&lt;/em&gt;[0] eq &amp;lsquo;HASH&amp;rsquo; ? $&lt;em&gt;[0] : { @&lt;/em&gt; };&lt;br /&gt;&lt;br /&gt;          bless $self, $class;&lt;br /&gt;          return $self;&lt;br /&gt;      }&lt;br /&gt;      sub foo { my $self = shift; return $self-&amp;gt;{foo} }&lt;br /&gt;&lt;br /&gt;      sub info { #doesn&amp;rsquo;t actually do what I&amp;rsquo;m really suggesting&lt;br /&gt;          my $self = shift;&lt;br /&gt;          require Class::Info;&lt;br /&gt;          return  Class::Info-&amp;gt;new;&lt;br /&gt;      }&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;MyClass-&amp;gt;new-&amp;gt;foo;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;I&amp;rsquo;m sure smarter people than I could think of a few more things that might be nice to have by default in all classes. I would like to note that method signatures is not that big of a deal to me, unless of course you want to give me named variables in the signature besides just auto shifting off self, e.g. &lt;code&gt;method foo ( $bar  ) { return $self-&amp;gt;{foo} if $bar }&lt;/code&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Core Syntax Wishlist: die should die</title>
      <link>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-die-should-die/</link>
      <pubDate>Mon, 14 May 2012 06:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-die-should-die/</guid>
      <description>&lt;p&gt;I hate &lt;a href=&#34;http://perldoc.perl.org/functions/die.html&#34;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; it is, in my humble opinion, one of the worst parts of perl. I really wish it would be deprecated, and removed, or at least replaced with something that would tell you were the code that was die-ing was being called. Replace its implementation with that of &lt;a href=&#34;http://perldoc.perl.org/Carp.html&#34;&gt;Carp&amp;rsquo;s&lt;/a&gt; &lt;code&gt;croak&lt;/code&gt; or &lt;code&gt;confess&lt;/code&gt; and I&amp;rsquo;d be happy. Better yet, let&amp;rsquo;s just get &lt;a href=&#34;http://www.xenoterracide.com/2012/05/perl-core-syntax-wishlist-exception.html&#34;&gt;real exception support&lt;/a&gt; and deprecate die (even if that&amp;rsquo;s never removed deprecation just make that real big on its pod). If you&amp;rsquo;re using &lt;code&gt;die&lt;/code&gt; please stop and &lt;a href=&#34;http://perldoc.perl.org/Carp.html&#34;&gt;use Carp&lt;/a&gt;, anyone using your module will thank (and by thank I mean not curse) you later.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perl Core Syntax Wishlist: an Exception Stack</title>
      <link>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-an-exception-stack/</link>
      <pubDate>Mon, 07 May 2012 22:30:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/perl-core-syntax-wishlist-an-exception-stack/</guid>
      <description>&lt;p&gt;I have come to wish many things were part of&amp;nbsp;&lt;a href=&#34;http://perldoc.perl.org/perlsyn.html&#34;&gt;Perl syntax&lt;/a&gt;&amp;nbsp;that are not, and no using external modules is not enough for me. I think it&amp;rsquo;s time Perl got the features as part of the language itself (and yes I suppose I could settle for feature.pm, and no I&amp;rsquo;m probably not going to write them myself, I&amp;rsquo;m not smart enough yet). The first of these is a proper exception stack. I want to be able to write: &lt;script src=&#34;https://gist.github.com/2632082.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;use 5.018;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;sub foo {&lt;br /&gt;    throw Exception-&amp;gt;new( &amp;lsquo;message&amp;rsquo; );&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;try {&lt;br /&gt;    foo();&lt;br /&gt;}&lt;br /&gt;catch ( &amp;lsquo;Exception&amp;rsquo; ) {&lt;br /&gt;     say &amp;ldquo;$&lt;em&gt;&amp;rdquo;; # object stringifies&lt;br /&gt;}&lt;br /&gt;catch ( &amp;lsquo;Exception::Other&amp;rsquo; ) {&lt;br /&gt;     say $&lt;/em&gt;-&amp;gt;message #also has an accessor&lt;br /&gt;}&lt;br /&gt;finally {&lt;br /&gt;     &amp;hellip;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;I think we need &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;finally&lt;/code&gt; keywords.  And no I don&amp;rsquo;t think it makes sense to have &lt;code&gt;Object-&amp;gt;throw&lt;/code&gt;. In fact I think this &lt;a href=&#34;http://www.perl6.org/archive/rfc/63.html&#34;&gt;Original Perl 6 Syntax Proposal&lt;/a&gt; reads like just what we need in Perl 5. Unfortunately I think &lt;a href=&#34;http://perl6advent.wordpress.com/2011/12/15/day-15-something-exceptional/&#34;&gt;this&lt;/a&gt; is what we are getting in Perl 6, which IMO is not as nice.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>