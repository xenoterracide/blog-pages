<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Soap on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/soap/index.xml</link>
    <description>Recent content in Soap on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/soap/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adventures with SOAP using Perl: Part 2 ( SOAP::Data::Builder )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-2--soapdatabuilder-/</link>
      <pubDate>Sun, 11 Mar 2012 16:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-2--soapdatabuilder-/</guid>
      <description>&lt;p&gt;&lt;p&gt;Start by reading the first 2 parts : &lt;ol style=&#34;list-style: none;&#34;&gt;  &lt;li&gt;Part 0 &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-0.html&#34;&gt;Prelude (setup server.pl)&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;Part 1 &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;SOAP::Lite&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;&lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; is simply a wrapper around SOAP::Data and SOAP::Serializer for &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;. I used it because it made my life easier building nested complicated SOAP objects. However for Part 2 I will simply be showing how to use it to do the same code as Part 1. Unfortunately since Part 1 is so Simple this actually makes &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; more complex than &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt; would be for this. In a future installment I will attempt to show more complex examples, but I will explain them less. Now let&amp;rsquo;s take a look at the code. &lt;p&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/1971794.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl&lt;br /&gt;use 5.010;&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use SOAP::Lite +trace =&amp;gt; [ &amp;lsquo;debug&amp;rsquo; ];&lt;br /&gt;use SOAP::Data::Builder;&lt;br /&gt;&lt;br /&gt;my $req = SOAP::Lite-&amp;gt;new(&lt;br /&gt;    readable   =&amp;gt; 1,&lt;br /&gt;    proxy      =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://localhost:8877&#39;&#34;&gt;http://localhost:8877&#39;&lt;/a&gt;,&lt;br /&gt;    ns         =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://namesservice.thomas_bayer.com/&#39;&#34;&gt;http://namesservice.thomas_bayer.com/&#39;&lt;/a&gt;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;my $sb = SOAP::Data::Builder-&amp;gt;new;&lt;br /&gt;&lt;br /&gt;$sb-&amp;gt;add_elem(&lt;br /&gt;    name  =&amp;gt; &amp;lsquo;name&amp;rsquo;,&lt;br /&gt;    value =&amp;gt; &amp;lsquo;Mark&amp;rsquo;,&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;my $res = $req-&amp;gt;getNameInfo( $sb-&amp;gt;to_soap_data );&lt;br /&gt;&lt;br /&gt;say &amp;lsquo;-&amp;rsquo; x 3;&lt;br /&gt;&lt;br /&gt;unless ( defined $res-&amp;gt;fault ) {&lt;br /&gt;    say scalar $res-&amp;gt;valueof(&amp;lsquo;//country&amp;rsquo;);&lt;br /&gt;} else {&lt;br /&gt;    say $res-&amp;gt;fault-&amp;gt;{faultstring};&lt;br /&gt;    say $res-&amp;gt;fault-&amp;gt;{detail}{error};&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;p&gt;As you can see this is much the same as the final code in &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;Part 1&lt;/a&gt;, and if you run it, it does exactly the same thing. The first difference you&amp;rsquo;ll notice is the self explanatory creation of the &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; object. After that comes the &lt;code&gt;-&amp;gt;add_elem&lt;/code&gt; method call, which will simply create an element with a given element name and a value for that element. &lt;/p&gt;&lt;p&gt;Once you&amp;rsquo;ve finished adding elements to your &lt;code&gt;$sb&lt;/code&gt; object, then you can call pass &lt;code&gt;$sb-&amp;gt;to_soap_data&lt;/code&gt; to the method that you&amp;rsquo;re calling on SOAP::Lite, this generates the structure that SOAP::Lite needs to be able to make your request. &lt;/p&gt;&lt;p&gt;The only thing I didn&amp;rsquo;t like about SOAP::Data::Builder is if you don&amp;rsquo;t pass the right parameters to &lt;code&gt;-&amp;gt;add_elem&lt;/code&gt; it will not croak or error in any way that will really tell you what went wrong. &lt;a href=&#34;https://github.com/xenoterracide/SOAP-Data-Builder/commit/f16f5d693a366f2d9fd2ecca693e7622a3d24cae&#34;&gt;Simple patches to this can fix it&lt;/a&gt;.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with SOAP using Perl: Part 1 ( SOAP::Lite )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-1--soaplite-/</link>
      <pubDate>Sat, 22 Oct 2011 15:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-1--soaplite-/</guid>
      <description>&lt;p&gt;The most prevalent of SOAP libraries for Perl is&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt;&amp;nbsp;it is the oldest and most documented. Though for all of its documentation it can be quite painful to figure out how to use it.&lt;br /&gt;&lt;br /&gt;First make sure you&amp;rsquo;ve read&amp;nbsp;&lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-0.html&#34;&gt;Part 0&lt;/a&gt;&amp;nbsp;to set up the server. Once that&amp;rsquo;s done let&amp;rsquo;s look at the most simple way to interface with this server.&lt;br /&gt;&lt;br /&gt;In our first example we need to send a request to &lt;code&gt;getCountries&lt;/code&gt;, which is a method provided by the API. You can determine this by reading &lt;code&gt;namesservice.wsdl&lt;/code&gt; and looking for the &lt;code&gt;operation&lt;/code&gt;s to see what&amp;rsquo;s available. Essentially this means we need to send SOAP request with a Body of &lt;code&gt;&amp;lt;getCountries /&amp;gt;&lt;/code&gt;. First we need to import SOAP::Lite.&lt;br /&gt;&lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1285860&#34;&gt;https://gist.github.com/1285860&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1285860.js&#34;&gt;&lt;/script&gt;If you look at our SOAP::Lite import you&amp;rsquo;ll notice that were are passing the arguments &lt;code&gt;+trace =&amp;gt; [ &amp;lsquo;debug&amp;rsquo; ]&lt;/code&gt;. There are various levels and options for +trace, but this turns on full debug printing which will be sent to stderr. You don&amp;rsquo;t normally want to have debug running in production code, but it will be useful to illustrate our examples and the request they send and receive.&lt;br /&gt;&lt;br /&gt;Now let&amp;rsquo;s look at creating an actual SOAP::Lite request object. &lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1285987&#34;&gt;https://gist.github.com/1285987&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1285987.js&#34;&gt;  &lt;/script&gt;The first option we pass in is &lt;code&gt;readable =&amp;gt; 1&lt;/code&gt;, adds whitespace to the request sent so that it&amp;rsquo;s easier to read when you&amp;rsquo;re looking at the debug output, you should not enable this in production, as it makes the request bigger, and I believe it is not considered correct SOAP as I&amp;rsquo;ve been told something about extra whitespace in SOAP being considered invalid. The second option is &lt;code&gt;proxy =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://localhost:8877&#39;&#34;&gt;http://localhost:8877&#39;&lt;/a&gt;&lt;/code&gt; This specifies the hostname and port that the HTTP request is sent to. &lt;code&gt;ns =&amp;gt; &amp;lsquo;&lt;a href=&#34;http://namesservice.thomas_bayer.com/&#39;&#34;&gt;http://namesservice.thomas_bayer.com/&#39;&lt;/a&gt;&lt;/code&gt; is the namespace, which you can find by looking for namespace in the &lt;code&gt;namesservice.wsdl&lt;/code&gt;.  &lt;br /&gt;&lt;br /&gt;Now we need to actually create and send an actual request. &lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1286050&#34;&gt;https://gist.github.com/1286050&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1286050.js&#34;&gt;  &lt;/script&gt; For this trivial request we simply need to call the method that we need on the remote server and then return the object. You can see that SOAP::Lite is generating a namespace for your request to use with the XML &lt;code&gt;&amp;lt;namesp1:getCountries xsi:nil=&amp;ldquo;true&amp;rdquo;&amp;gt;&lt;/code&gt;, which is just fine in this case.&lt;br /&gt;&lt;br /&gt;Of course we want to do something with our response. Please note that I&amp;rsquo;ve modified the code to use 5.10, but if you want to use print instead of say this code will work fine on 5.6 and up.&lt;noscript&gt;&lt;a href=&#34;https://gist.github.com/1286109&#34;&gt;https://gist.github.com/1286109&lt;/a&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/1286109.js&#34;&gt;  &lt;/script&gt; &lt;code&gt;valueof&lt;/code&gt;, which is documented in &lt;a href=&#34;https://metacpan.org/module/SOAP::SOM#ACCESSING-ELEMENT-VALUES&#34;&gt;SOAP::SOM&lt;/a&gt;, returns the first element in scalar context, and an array in array context. So in my code I&amp;rsquo;ve shown both. The syntax used in the parameters to &lt;code&gt;valueof&lt;/code&gt; is &lt;a href=&#34;http://www.w3schools.com/xpath/xpath_syntax.asp&#34;&gt;XPath&lt;/a&gt;, so an even simpler way to call it in this case would be &lt;code&gt;$res-&amp;gt;valueof(//country);&lt;/code&gt; and it would do the same thing with this XML. &lt;br /&gt;&lt;br /&gt;Next let&amp;rsquo;s look at the &lt;code&gt;getNameInfo&lt;/code&gt; method, it&amp;rsquo;s a bit more complex so let&amp;rsquo;s look at the XML in the XSD. Here&amp;rsquo;s the snippet that is really important. &lt;script src=&#34;https://gist.github.com/1300052.js&#34;&gt;  &lt;/script&gt;This means that we need to send a request with a body that looks like &lt;script src=&#34;https://gist.github.com/1300074.js&#34;&gt;  &lt;/script&gt; &lt;em&gt;( note: you can look at the sample data in &lt;code&gt;MyExampleData.pm&lt;/code&gt; for other names. )&lt;/em&gt; Set let&amp;rsquo;s take a stab at writing some Perl.&lt;script src=&#34;https://gist.github.com/1300131.js&#34;&gt;  &lt;/script&gt; There are some important differences to note from our previous script. You&amp;rsquo;ll notice that I call &lt;code&gt;-&amp;gt;getNameInfo()&lt;/code&gt; directly on the request object, instead of passing it as a parameter to &lt;code&gt;-&amp;gt;call&lt;/code&gt;. This functions basically the same as &lt;code&gt;call&lt;/code&gt; and it will end up making the first tag inside of body. We could have doen this in our first example as &lt;code&gt;$req-&amp;gt;getCountries;&lt;/code&gt; and that would have been it. Now that we&amp;rsquo;ve covered the slight differences in calls, let&amp;rsquo;s go over the completely new things.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://metacpan.org/module/SOAP::Data&#34;&gt;SOAP::Data&lt;/a&gt; objects are used to create any further data structures. Obviously the hash key of &lt;code&gt;name&lt;/code&gt; defines the element name, and &lt;code&gt;value&lt;/code&gt; defines what you want to go into it, here I have hardcoded &amp;ldquo;Mark&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;If you run this code you&amp;rsquo;ll notice that it returns a faultstring (among other fault properties) &amp;ldquo;operation getNameInfo for SOAP11 called with invalid data&amp;rdquo;, and details the error as &amp;ldquo;element `c-gensym3&amp;rsquo; not processed at {&lt;a href=&#34;http://namesservice.thomas_bayer.com/}getNameInfo&amp;quot;&#34;&gt;http://namesservice.thomas_bayer.com/}getNameInfo&amp;quot;&lt;/a&gt;. Now go back and look at the request, you&amp;rsquo;ll see a &lt;code&gt;c-gensym3&lt;/code&gt; element, where did that come from? Well, SOAP::Lite will generate elements for anonymous elements but we can fix this. &lt;script src=&#34;https://gist.github.com/1300304.js&#34;&gt;  &lt;/script&gt;&lt;br /&gt;&lt;br /&gt;The only difference between this and the previous code is that we aren&amp;rsquo;t putting a &lt;code&gt;&amp;lt;/code&amp;gt; in front of &lt;code&gt;SOAP::Data&lt;/code&gt;. I wrote it the first way because I had seen examples of that all over the place, and could not find a solution to getting rid of the gensyms until I asked &lt;a href=&#34;http://stackoverflow.com/q/6986679/206466&#34;&gt;this question on stackoverflow&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;Unfortunately this is the most complex example that our server API has implemented. As an exercise to the reader I suggest Implementing a request for the method &lt;code&gt;getNamesInCountry&lt;/code&gt;, which is no more complex but available.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with SOAP using Perl: Part 0 ( prelude )</title>
      <link>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-0--prelude-/</link>
      <pubDate>Sat, 15 Oct 2011 15:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adventures-with-soap-using-perl-part-0--prelude-/</guid>
      <description>&lt;p&gt;This is a prelude to a series on working with SOAP Requests using Perl.  For the past 3 months I have been working on a&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Perl API&lt;/a&gt;&amp;nbsp;for &lt;a href=&#34;http://www.cybersource.com/developers/develop/integration_methods/simple_order_and_soap_toolkit_api/&#34;&gt;CyberSource&amp;rsquo;s Simple Order API&lt;/a&gt; which uses SOAP (I should note, that although I believe most of the API is now stable some area&amp;rsquo;s still need work, and thus I don&amp;rsquo;t expect it to reach 1.0.0 anytime soon).&lt;br /&gt;&lt;br /&gt;First I used &lt;a href=&#34;https://metacpan.org/module/SOAP::Lite&#34;&gt;SOAP::Lite&lt;/a&gt; to do my requests, but I found it confusing to construct the requests that I needed to make. I even discovered a bug that lead to the current ( 0.714 ) release of SOAP::Lite.&lt;br /&gt;&lt;br /&gt;Next I started using &lt;a href=&#34;https://metacpan.org/module/SOAP::Data::Builder&#34;&gt;SOAP::Data::Builder&lt;/a&gt; to make it easier to build my SOAP::Lite requests. This was good, but frustrating that I had to add my data in a specific order.&lt;br /&gt;&lt;br /&gt;Finally I came upon&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;. A glance at it&amp;rsquo;s API which used a hash to build requests seemed much better. however, it took me a few weeks and some help from&amp;nbsp;Mark Overmeer (the author) and an update to&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP::WSS&#34;&gt;XML::Compile::SOAP::WSS&lt;/a&gt;&amp;nbsp;to get it to work.&lt;br /&gt;&lt;br /&gt;If you&amp;rsquo;re planning on starting a new project that requires SOAP I definitely recommend using&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt;&amp;nbsp;if you have a &lt;code&gt;.wsdl&lt;/code&gt; and a &lt;code&gt;.xsd&lt;/code&gt; to work with.&lt;br /&gt;&lt;br /&gt;I will be covering all 3 of these methods in Parts 1, 2 and 3 of the series.&lt;br /&gt;&lt;br /&gt;To get started we&amp;rsquo;ll need a SOAP Server since I haven&amp;rsquo;t been able to find any reliable public services. To do this you can install&amp;nbsp;&lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP::Daemon&#34;&gt;XML::Compile::SOAP::Daemon&lt;/a&gt;&amp;nbsp;(which probably could use some Plack/PSGI love ). You&amp;rsquo;ll want to grab a copy of the namesservice example that is in XML::Compile::SOAP::Daemon, I have provided a &lt;a href=&#34;https://gist.github.com/1971856&#34;&gt;patched copy in a gist&lt;/a&gt; . Once you&amp;rsquo;ve done that you can do &lt;code&gt;perl server.pl&lt;/code&gt; . Now you should have a Server running on&amp;nbsp;&lt;a href=&#34;http://localhost:8877/&#34;&gt;http://localhost:8877&lt;/a&gt;&amp;nbsp;which we can use for testing our client examples.&lt;br /&gt;&lt;br /&gt;Please be advised, these tutorials will not be explain XML, XSD, WSDL, or SOAP, but simply the Perl interfaces. &lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Here is &lt;a href=&#34;http://www.xenoterracide.com/2011/10/adventures-with-soap-using-perl-part-1.html&#34;&gt;Part 1 ( SOAP::Lite )&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>