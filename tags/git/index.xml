<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/git/index.xml</link>
    <description>Recent content in Git on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Experience with having a non Dist::Zilla user contribute to a Dist::Zilla project (it&#39;s not hard for them or me)</title>
      <link>http://blog.xenoterracide.com/post/experience-with-having-a-non-distzilla-user-contribute-to-a-distzilla-project-its-not-hard-for-them-or-me/</link>
      <pubDate>Tue, 05 Jul 2011 02:02:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/experience-with-having-a-non-distzilla-user-contribute-to-a-distzilla-project-its-not-hard-for-them-or-me/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve heard many times that &lt;a href=&#34;http://dzil.org&#34;&gt;Dist::Zilla&lt;/a&gt; makes it harder for people to contribute to the project. This is not true, it is either unfortunately either ignorance or FUD (much like saying Linux is harder to use than Windows). Truly, there are things that some dzil users do that &lt;i&gt;can&lt;/i&gt; make it harder, but it doesn&amp;rsquo;t have to be that way. &lt;a href=&#34;https://github.com/xenoterracide/Test-Version/pull/1&#34;&gt;Michael Schwern recently contributed to one of my dzil projects without ever realizing I was using dzil, until I told him&lt;/a&gt;. He more recently stated on twitter, &amp;ldquo;While your solution works, it seems like it makes more work for you to shield contributors from dzil&amp;rdquo;. This was true in this case because I wasn&amp;rsquo;t sure how to effectively move a series of multiple patches, I now know it&amp;rsquo;s easy to do with git. Here&amp;rsquo;s how you can allow contributors to contribute to your dzil project without causing you or them undo pain.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;Don&amp;rsquo;t use anything that changes the line numbers of your source&lt;/dt&gt;&lt;dd&gt;Examples: don&amp;rsquo;t use &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Prepender/lib/Dist/Zilla/Plugin/Prepender.pm&#34;&gt;DZP::Prepender&lt;/a&gt;. Use modules like &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-OurPkgVersion/lib/Dist/Zilla/Plugin/OurPkgVersion.pm&#34;&gt;OurPkgVersion&lt;/a&gt; to insert VERSION, and make sure your # ABSTRACT and any pod is below the &lt;code&gt;1;&lt;/code&gt; at the end of your module. This will keep the line numbers of errors in your code from being different from the final build. It&amp;rsquo;s still ok to use PodWeaver as it will save you way more time than it&amp;rsquo;ll hurt, so long as you follow the rules about pod being at the bottom&lt;/dd&gt; &lt;/dl&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;Use a plugin that commits builds to your source control software&lt;/dt&gt;&lt;dd&gt; I personally recommend &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-Git/lib/Dist/Zilla/Plugin/Git/CommitBuild.pm&#34;&gt;DZP::Git::CommitBuild&lt;/a&gt;  &lt;/dd&gt; &lt;/dl&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;li&gt;&lt;dl&gt;&lt;dt&gt;Make your build branch your default branch&lt;/dt&gt;&lt;dd&gt;I&amp;rsquo;m not sure how to do this with just git, but on github you can go to the admin section of your repository and change the default branch there. This makes it so that when someone clone&amp;rsquo;s your repository the initial checkout is of your build branch. Your build branch shouldn&amp;rsquo;t require dzil, it&amp;rsquo;s the final build.&lt;/dd&gt; &lt;/dl&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/ol&gt;&lt;br /&gt;Now that you have your final build branch as the default branch anyone who wants to contribute can simply clone your repo and start hacking. Their are a couple of mistakes they could make, They could either change or add files that are maintained, or pruned by dzil. This did happen when Schwern sent me patches, one of them was the addition of a .gitignore, which I already had, but is being pruned out of the build branch. I can also see it happening to meta&amp;rsquo;s and makefiles. These patches can simply be rejected as unnecessary, dzil-ified, or if they are truly a bug, then they can be reported and fixed upstream.&lt;br /&gt;&lt;br /&gt;So what if someone sends you a pull request from &lt;code&gt;build/master&lt;/code&gt;? well if it&amp;rsquo;s just one or two patches, you add their remote, and do a &lt;code&gt;git remote update&lt;/code&gt; and then you can &lt;code&gt;git log remote build/master&lt;/code&gt; to find the sha1 of this patch. Now that you have the sha1 all you have to do is &lt;code&gt;git cherry-pick [sha1]&lt;/code&gt; and it should apply. If there are any conflicts you may have to resolve them with &lt;code&gt;git mergetool&lt;/code&gt;. However, the only conflict with Schwern&amp;rsquo;s patches for me was the .gitignore, all other patches applied without assistance and applied correcly, surprisingly even the pod patch applied without issue.&lt;br /&gt;&lt;br /&gt;If you have more patches than is comfortable with &lt;code&gt;git cherry-pick&lt;/code&gt; then you need &lt;code&gt;git rebase&lt;/code&gt;. The command you want is &lt;code&gt;git rebase -i &amp;ndash;onto master [sha1 before first sha1 in series] [tip of remote branch checkout]&lt;/code&gt;. So in my case &lt;code&gt;git rebase -i &amp;ndash;onto master 3f1e3748 schwern&lt;/code&gt;. What this appears to do is ends up rewriting my local schwern/build/master checkout and removes all the build commits, and then applies the patches on top. This means I can now do &lt;code&gt;git merge schwern&lt;/code&gt; from the master branch, and all of his patches that I want will be successfully merged. For more on this strategy you may want to read &lt;a href=&#34;http://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch&#34;&gt;this stackoverflow question&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;given this is not quite as easy as a &lt;code&gt;git pull&lt;/code&gt; that&amp;rsquo;s a fast forward, but reality is it&amp;rsquo;s not that hard once you know how to do the rebase and how it works. Of course this isn&amp;rsquo;t ideal for constant contributors, those should simply learn to use dzil, but for the random contributor it should be ok.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My solution to not using PluginBundle:AUTHOR for dzil is git</title>
      <link>http://blog.xenoterracide.com/post/my-solution-to-not-using-pluginbundleauthor-for-dzil-is-git/</link>
      <pubDate>Sun, 05 Jun 2011 15:24:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/my-solution-to-not-using-pluginbundleauthor-for-dzil-is-git/</guid>
      <description>&lt;p&gt;I am now tired of updating my &lt;code&gt;dist.ini&lt;/code&gt;&amp;rsquo;s for my &lt;a href=&#34;http://dzil.org&#34;&gt;Dist::Zilla&lt;/a&gt; projects. For many people this is when they start using a PluginBundle with their authorname. I &lt;a href=&#34;http://www.xenoterracide.com/2010/06/please-dont-use-distzillapluginbundleus.html&#34;&gt;discussed why you shouldn&amp;rsquo;t do this a year ago&lt;/a&gt;. Now that I&amp;rsquo;m tired of managing my dist.ini&amp;rsquo;s on an individual basis I&amp;rsquo;m going to show you how I&amp;rsquo;m going to solve the same problem everyone else is, which is getting tired of updating your dzil configuration for all of your projects. I&amp;rsquo;m using git to do it. You probably haven&amp;rsquo;t considered this, or am thinking I&amp;rsquo;m wrong because you believe that git can&amp;rsquo;t merge branches without a common history, which is not true. I did it with Regen2, Funtoo, Portage, and Sunrise, which have way more files than any perl repo, including Perl.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;First let&amp;rsquo;s talk about the advantages and disadvantages of doing this with git.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;ll start with the disadvantages. You&amp;rsquo;ll have another repository to manage. Git isn&amp;rsquo;t completely automatic, you&amp;rsquo;ll have to remember to merge your changes. You&amp;rsquo;ll also have to add the repository to your existing repositories. You will have to resolve merge conflicts at least once, and probably occasionally more, though most should be fast-forwards.&lt;br /&gt;&lt;br /&gt;The advantages are&amp;hellip; now the changes to your dist.ini are getting recorded in your history. You can now have a master dist.ini, but remove items without filters in your individual modules. You can share even more configuration as merged differences allow you to maintain differences in downstream commits. It doesn&amp;rsquo;t automatically update all of your modules. Wait didn&amp;rsquo;t I list that last one in disadvantages? Yep, it&amp;rsquo;s an advantage because what if you update your PluginBundle and that update breaks one of your modules, but you don&amp;rsquo;t know it because you haven&amp;rsquo;t worked on that module in a while. You can use this for more than just dist.ini.&lt;br /&gt;&lt;br /&gt;Ok so the first thing you you want to do is create your master dzil repo. This is not a &lt;a href=&#34;http://git-scm.com/documentation&#34;&gt;git&lt;/a&gt; or &lt;a href=&#34;http://dzil.org/&#34;&gt;dzil&lt;/a&gt; tutorial so go do that. I did it by creating a &lt;code&gt;dzil new project&lt;/code&gt; and removing the files I couldn&amp;rsquo;t use and making a few tweaks and amending all of those changes to the initial commit. Check out &lt;a href=&#34;https://github.com/xenoterracide/dzil-base&#34;&gt;my repo&lt;/a&gt; for inspiration. Remember the directory structure has to be the same as a dzil repo structure for any common files.&lt;br /&gt;&lt;br /&gt;Now add a remote from your new repo to an existing dzil project. Next you need to merge the branch from the remote into your project. The first time you do this you&amp;rsquo;ll have to resolve conflicts. If they&amp;rsquo;re like &lt;a href=&#34;https://github.com/xenoterracide/Test-Version/commit/89ea6813da279ff74f87b0628db492fc1451e526&#34;&gt;mine&lt;/a&gt; then they&amp;rsquo;ll be easy and obvious. Once that&amp;rsquo;s done future changes will be fast-forwards unless you change something in your perl module repo, then you might end up with a simple merge conflict. One thing to remember NEVER EVER try to merge from your module repo to your dzil repo, it will cause you extreme pain in the future. cherry-picking that direction is possible but not merging.&lt;br /&gt;&lt;br /&gt;After that, all that is left to do is run your dzil tests and fix any breakage in your module. Happy merging.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git workflows</title>
      <link>http://blog.xenoterracide.com/post/git-workflows/</link>
      <pubDate>Fri, 02 Jul 2010 08:29:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/git-workflows/</guid>
      <description>&lt;p&gt;If you use git and you&amp;rsquo;re past the &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html&#34;&gt;tutorial&lt;/a&gt; and using it for an actual project, I suggest you take a look at the &lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/gitworkflows.html&#34;&gt;workflows&lt;/a&gt; manpage as well. It will give you ideas on how to branch, merge, rebase and cherry-pick.&lt;br /&gt;&lt;br /&gt;This has been a public service announcement, that is all.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RT git workflow</title>
      <link>http://blog.xenoterracide.com/post/rt-git-workflow/</link>
      <pubDate>Thu, 17 Jun 2010 20:16:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/rt-git-workflow/</guid>
      <description>&lt;p&gt;git was designed to be very flexible in its workflow. One of the things it was designed to do was handle email patches, since there are a lot of patches sent to and from the mailing list. This is a good thing, even if you don&amp;rsquo;t have a mailing list, or you have your own bug tracker (in addition to RT), you can use RT to receive email patches from git. First you have to configure your MUA (mail client)(and go write a patch), some suggestions are given in &lt;a href=&#34;http://git.kernel.org/?p=git/git.git;a=blob;f=Documentation/SubmittingPatches;h=eb53e0636e3c3bab06e88ce3371945f5602c5756;hb=d0b8d79510cd9c45a4c6bc08a37c6348f8293e8a&#34;&gt;git.git&amp;rsquo;s SubmittingPatches document&lt;/a&gt;. If you like the CLI I suggest you use the &lt;code&gt;git send-email&lt;/code&gt; command. I&amp;rsquo;m going to walk you through using it, but you&amp;rsquo;ll have to learn how to set it up for your smtp server on your own (one hint: if you don&amp;rsquo;t provide an smtp pass as an argument or as a config option you will be prompted for it).&lt;br /&gt;&lt;br /&gt;now you have a patch that you haven&amp;rsquo;t pushed yet. you can run one of the following sets of steps to get going.&lt;br /&gt;&lt;code&gt;&lt;pre&gt;git format-patch -M HEAD~1 # commitish. commit before the number of patches you want to generate&lt;br /&gt;vi 0001-patch-name # and add some description between the &amp;mdash; and the diff stat&lt;br /&gt;git send-email 0001-patch-name # can replace this step with MUA of choice&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt; &lt;br /&gt;&lt;code&gt;&lt;pre&gt;git format-patch -M HEAD~5 # generate a patchset of the last 5 patches&lt;br /&gt;git send-email &amp;ndash;annotate *patch # will open the core.editor you set in gitconfig to edit the patch&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&lt;pre&gt;git send-email &amp;ndash;annotate &amp;ndash;format-patch -M &amp;ndash;to=destination-email origin/master&lt;br /&gt;# generate all the patches that aren&amp;rsquo;t committed against origin/master branch in your local branch&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;for the time being you should probably just send it to one of your own projects on cpan so you can see. If you look at the web interface for the bug you&amp;rsquo;ll notice it&amp;rsquo;s clobbered your formatting, same goes with the email RT sends you&amp;hellip; so this is useless right? well&amp;hellip; certainly doesn&amp;rsquo;t help&amp;hellip; now look at the &amp;lsquo;with headers&amp;rsquo; version. Their are lots of headers here, but all your content is intact. Now download this file (right click save as should do it).&lt;br /&gt;&lt;br /&gt;you may now ( you may have to run git reset &amp;ndash;hard HEAD^ first to undo you last commit).&lt;br /&gt;&lt;code&gt;git apply downloaded-file.txt&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;which will only apply the diff no commit log or anything (reset without HEAD^ now).&lt;br /&gt;&lt;br /&gt;or you can &lt;code&gt;git am -i downloaded-file.txt&lt;/code&gt; -i is interactive and will allow you to choose whole folders full of mail patches and which to apply.&lt;br /&gt;&lt;br /&gt;I think this is a good workflow for 1 off patches. obviously you don&amp;rsquo;t send them to yourself, I&amp;rsquo;m just trying to show you what it&amp;rsquo;s like to send and receive.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>my git remote</title>
      <link>http://blog.xenoterracide.com/post/my-git-remote/</link>
      <pubDate>Wed, 24 Mar 2010 03:12:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/my-git-remote/</guid>
      <description>&lt;p&gt;So occasionally I like to fork a project on &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; well the proper way to do it is to use GitHub&amp;rsquo;s fork button which then clone&amp;rsquo;s the repo into your account. this is great! I can than clone that locally develop it an push to it. Usually I do this push with &lt;code&gt;git push origin&lt;/code&gt;. I can then ask the owner of the original repo that I forked from to &amp;lsquo;pull&amp;rsquo; my changes in. Wait did I just say original? why am I calling my repo on github origin? it&amp;rsquo;s probably not the origin repo&amp;hellip; it&amp;rsquo;s not the primary project repo&amp;hellip; so I decided I needed a new convention. I now do &lt;code&gt;git remote add my uri://&amp;hellip;&lt;/code&gt; for my repo&amp;rsquo;s on github and &lt;code&gt;git remote add origin uri://&lt;/code&gt; for the projects authoritative repo. This also helps when I need to update my repo from the origin and then push them to my public forks.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Presentation</title>
      <link>http://blog.xenoterracide.com/post/git-presentation/</link>
      <pubDate>Mon, 11 May 2009 16:27:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/git-presentation/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m doing a git presentation and the &lt;a href=&#34;http://coldfusion.org&#34;&gt;Lansing Coldfusion User Group&lt;/a&gt; tomorrow night. Anyone who wants to is welcome to &lt;a href=&#34;http://coldfusion.org/directions.cfm&#34;&gt;come&lt;/a&gt; Below are the slides for the presentation.&lt;br /&gt;&lt;br /&gt;&lt;iframe src=&#39;http://docs.google.com/EmbedSlideshow?docid=dffs9ch6_59vhtvddd2&#39; frameborder=&#39;0&#39; width=&#39;410&#39; height=&#39;342&#39;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;EDIT: I don&amp;rsquo;t know why but google doesn&amp;rsquo;t show all slides formatted right in mini mode. It&amp;rsquo;s cut off some of the text and overlapped some things.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>