<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/programming/index.xml</link>
    <description>Recent content in Programming on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Premature optimization is not evil</title>
      <link>http://blog.xenoterracide.com/post/premature-optimization-is-not-evil/</link>
      <pubDate>Wed, 07 Jan 2015 20:46:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/premature-optimization-is-not-evil/</guid>
      <description>&lt;p&gt;&lt;p&gt;Or rather people should stop saying this because most of the people that say it don&amp;rsquo;t actually seem to actually know what is meant by &amp;ldquo;Premature Optimization&amp;rdquo; or how to determine when it is evil. I&amp;rsquo;ve heard people say premature optimization is evil to asking. &amp;ldquo;Is there a 3rd party library that does this more efficiently?&amp;rdquo; (knowing if there are better options is premature optimization?), &amp;ldquo;Thinking about architecting your app for horizontal scalability is premature optimization&amp;rdquo; (it is if the design is significantly more complex, but if it&amp;rsquo;s just between using REST and ensuring stateless (which is about the same complexity up front, but it&amp;rsquo;d be harder to convert later)), &amp;ldquo;wanting to do Dependency Injection is..&amp;rdquo;, &amp;ldquo;making that code easier to read and simpler and thus faster&amp;rdquo;, and on and on. On the other hand, no one seems to think that requiring Redis, Mongodb, and NodeJS because it&amp;rsquo;s webscale is premature optimization, even if the clustering is horribly convoluted and you end up in callback hell (not saying you are, just saying). Basically, you&amp;rsquo;re not asking to do the thing that everyone else is doing, is premature optimization. &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s talk about what the hell premature optimization is. Premature spending a week making sure you can spin up infinite instances on AWS because someday you might get slashdotted. Premature optimization is writing a method in a less than clear manner because you think it&amp;rsquo;s faster. Premature optimization is rewriting String.format to StringBuilder because StringBuilder is faster. Premature optimization is any time that you write code that is less readable for the sake of performance, or spend an inordinate amount of time ensuring optimizing it without benchmarking to see if it&amp;rsquo;s slow. &lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve spent a significant amount of time in the past few months working on optimizing code, why? because no one ever thought about optimization, it never occurred to the author, in one case, that querying the same data from a database that had been previously queried, in a loop, outside of a transaction, was inefficient. It never occurred to the author that not refetching from the database to do an on screen sort every time you sort would be inefficient. Why think about what you&amp;rsquo;re writing? because premature optimization is evil, or at least that&amp;rsquo;s what I&amp;rsquo;d be told. &lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s are examples of premature optimization that are not evil. I choose to use EnumMap when I&amp;rsquo;m storing Enum&amp;rsquo;s in a Map, I presume it&amp;rsquo;s more efficient, so I do it, increase in code? a class name to the constructor. StringBuilder is faster than StringBuffer, so when I come across StringBuffer I convert it, increase in code, none. I use dependency injection to wire stateless (or unchanging state) singletons so I&amp;rsquo;m not constantly creating instances, code increase is use of a DI framework. I use onClick handlers to ensure that things happen lazily, only when needed. &lt;/p&gt;&lt;p&gt;Basically what I&amp;rsquo;m saying is that &amp;ldquo;Premature optimization is evil&amp;rdquo; is sadly used anytime when anyone is even thinking about anything that could remotely be considered optimization. I personally optimize my code for paradigmn/pattern matching the problem first (which leads to 2 and 3), readability second, performance last. Making smarter decisions about how to write your code is not premature optimization. &lt;/p&gt;&lt;p&gt;I think the real &amp;ldquo;evil&amp;rdquo; is encouraging people not to think about performance, or to further understand their craft. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Spring to create a full REST API in less than 60 lines of code</title>
      <link>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</link>
      <pubDate>Tue, 02 Sep 2014 22:42:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</guid>
      <description>&lt;p&gt;&lt;p&gt;Spring with Spring Data is awesome. Seriously, I&amp;rsquo;ve never been able to throw up a full HATEOAS REST web service this fast. To start, I&amp;rsquo;ll admit my headliner lie, I&amp;rsquo;m not counting the &lt;code&gt;pom.xml&lt;/code&gt;. &lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;cloc .                                                                 slave-vi&lt;br /&gt;       5 text files.&lt;br /&gt;       5 unique files.&lt;br /&gt;       2 files ignored.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://cloc.sourceforge.net&#34;&gt;http://cloc.sourceforge.net&lt;/a&gt; v 1.62  T=0.04 s (104.8 files/s, 3930.8 lines/s)&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Language                     files          blank        comment           code&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Maven                            1              6              7             65&lt;br /&gt;Java                             3             15              0             57&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;SUM:                             4             21              7            122&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/322b301f810355f6187c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The basics of the web service is we want to be able to create tasks, like those on a todo list, for now we want the simplest tasks possible, in as little code possible. We should use UUID&amp;rsquo;s so that our service can scale horizontally, so that we can easily generate known test ID&amp;rsquo;s and we know that no two entities will share an id if we ever wanted to flatten things. We need to be able to perform basic CRUD on all of our entities as well as list them. &lt;/p&gt; &lt;p&gt; First let&amp;rsquo;s create our Task. &lt;script src=&#34;https://gist.github.com/xenoterracide/0611398e4abbf4ad9153.js&#34;&gt;&lt;/script&gt;As you can see it&amp;rsquo;s incredibly simple, we have our UUID identity, the &lt;code&gt;uuid&lt;/code&gt; and &lt;code&gt;uuid2&lt;/code&gt; basically are &lt;a href=&#34;http://java.dzone.com/articles/hibernate-and-uuid-identifiers&#34;&gt;telling Hibernate and H2/PostgreSQL to use UUID&amp;rsquo;s&lt;/a&gt;. You might ask why limit description to 100 characters, well, since these are quick tasks, I might want to share them  in a tweet, and this allows enough room for a url shortner plus the description. I think the rest is pretty self explanatory. &lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s create our Repository. &lt;script src=&#34;https://gist.github.com/xenoterracide/2fef27d252f906b563d4.js&#34;&gt;&lt;/script&gt;Well that doesn&amp;rsquo;t do anything&amp;hellip; oh but it does, and although it doesn&amp;rsquo;t show it, because this application doesn&amp;rsquo;t need it, there&amp;rsquo;s a nifty method signature parser dsl that allows you to build queries just by writing a method signature. &lt;/p&gt;&lt;/p&gt;Here&amp;rsquo;s our Application. &lt;script src=&#34;https://gist.github.com/xenoterracide/21b5b022a8844b515b96.js&#34;&gt;&lt;/script&gt; &amp;hellip; and pom for dependencies and stuff. &lt;script src=&#34;https://gist.github.com/xenoterracide/14b990fc2b6ad34f206d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the output of some curl commands I ran. &lt;script src=&#34;https://gist.github.com/xenoterracide/feaf505ebc5cc1cf799c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;For a slightly more in depth tutorial you can see the &lt;a href=&#34;http://spring.io/guides/gs/accessing-data-rest/&#34;&gt;official spring date rest getting started page&lt;/a&gt;. In the future I&amp;rsquo;ll try to write about how to actually connect to PostgreSQL and set up API Authentication and Authorization&lt;/p&gt;&lt;p&gt;People are always telling me how verbose Java is, how much less typing their language (especially Perl is). I&amp;rsquo;d love to see a Perl app that can do all this in fewer lines of Perl (restriction, no line may be longer than 120 characters, and must be humanly readable), I personally don&amp;rsquo;t think it can be done at this time (not with full HATEOAS and as many response codes), but I&amp;rsquo;m waiting for the day it can, and can be structured this simply.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Privacy, broken by design</title>
      <link>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</link>
      <pubDate>Tue, 03 Jun 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</guid>
      <description>&lt;p&gt;&lt;p&gt;It is worth prefixing that none of the following arguments apply to anything using the keyword &lt;code&gt;static&lt;/code&gt; which makes things more procedural (or in some cases functional, than Object Oriented.&lt;/p&gt;&lt;p&gt;The suggestion in Java is to give the least required permission, but this,  in my humble opinion, violates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;Open-Closed Principle&lt;/a&gt;. Java has &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&#34;&gt;four privacy levels&lt;/a&gt;. Giving something the least permission required to function is fine in a Security context, privacy in programming however is simply there to discourage developers from doing stupid things. In most cases, unlike security, it only makes them difficult, not impossible. I believe that any SOLID principle should make your code more easily extensible, so while in fact Java&amp;rsquo;s privacy is not in literal violation of Open-Closed, it does make extension more difficult than it otherwise should be, thus violating the spirit of the principle. &lt;/p&gt;&lt;p&gt;Before I continue on to how I think Java&amp;rsquo;s design, and common usage, violates the Open Closed Principle, I should explain how I interpret the Principle, as my interpretation appears to be slightly different from what&amp;rsquo;s on Wikipedia. The Principle as described on Wikipedia appears to be combining it with two other SOLID Principles, namely Liskov Substitution and Interface Segregation. So first let&amp;rsquo;s assume that The principle stands alone, and that although it&amp;rsquo;d be bad design to not be completely SOLID, Open-Closed by itself does not require a subclass to support the same interface. Let&amp;rsquo;s also assume that Not modifying the source to add features is also an unrealistic expectation. The purpose of Open-Closed is to ensure that your subclasses are not modifying the the structure or data of their child classes and that a child may easily add to, or change the behavior it got from its parent (Liskov says that it must be substitutable for its parent). &lt;/p&gt;&lt;p&gt;First let&amp;rsquo;s talk about final, marking a class as final, means you can&amp;rsquo;t extend it. This by the very definition is in violation of Open-Closed, because the class is not Open for extension. Classes such as UUID are marked final, you might ask, why would I want to extend a UUID? maybe I want to give it a toURISafeBase64 method. That wouldn&amp;rsquo;t break any of the orignal behavior, and is almost as legitimately belonging as representing the UUID as hex. What if I wanted to extend a nested final class like an Iterator on a Map? I can&amp;rsquo;t do that, which means I have to completely reimplement the Iterator to add simple functionality. In fact the way those are implemented I have to implement much more than just the Iterator. &lt;/p&gt;&lt;p&gt;It is recommended by the official Java Docs, and the community, to make member variables private unless otherwise necessary. Private variables are only accessible to the current class and nested classes, they are not visible to subclasses, in or out of the package. In my opinion this violates Open-Closed because now, if I subclass I need to reimplement all the fields, or use getters/setters. Getters and Setters for every single attribute are actually almost no better than the attribute itself, and an object that is nothing more than those is an &lt;a href=&#34;http://www.martinfowler.com/bliki/AnemicDomainModel.html&#34;&gt;Anemic&lt;/a&gt;. Now it could be argued that making subclasses call methods makes them more&amp;hellip; impervious to change, because if you change the data structure you can preserve the methods. The problem is that most classes wouldn&amp;rsquo;t use their own getters internally, and thus break this, because then extending that getter won&amp;rsquo;t actually modify the class as completely as desired. Also remember that subclasses are by definition, tightly coupled, usually changes to the superclass require taking a look at the subclasses. So if you are using getters and setters to ensure extensibility and preserve internal/external interface changes, use them exclusively, meaning only they can have raw access, all constructors, and business logic methods must go through them. At that point they are the replacment for direct member access and private won&amp;rsquo;t matter as much (I will probably advocate a variant of this in the next article). However if you still want to access some member data hidden by the class directly, you should ensure that your subclasses can easily do so as well. You should &lt;em&gt;only&lt;/em&gt; make a member private if it would actually cause a bug in any subclass. &lt;/p&gt;&lt;p&gt;So if we go on to assume that all subclasses, even ones in a different package (because you know people using your code are going to extend things) then we should be making all members protected. This would mean that all subclasses could reuse the member variables. Of course the problem is now your data is not encapsulated in &lt;em&gt;your&lt;/em&gt; package, once a member variable is not private, is is available to your entire package. To me this also seems like a bad idea, other classes in my package don&amp;rsquo;t need to see my objects internals unless they&amp;rsquo;re a subclass. So now you have to choose, make all classes easily extended? or protect people who are programming in your package from themselves. You can probably control who&amp;rsquo;s modifying your package and how, and have static code analysis to check that you&amp;rsquo;re not calling obj.foo only this.foo. But nothing can give you back extensibility you&amp;rsquo;ve taken away (outside of adding it back). &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s look at interfaces, interfaces generally have two options, public, or protected. This is fine, but has a problem, protected interfaces are only applicable to the package that has the interface defined. Methods implementing the interface must have the same privacy level. Most of the time what I actually want is an interface which I&amp;rsquo;ve defined globally as a contract, but I want the implementations to only be called by their package. For example, a DAO (Data Access Object) might be able to share the same interface (with judicious generic usage), between entities. However if you do this, you may find that your interface must be public, so it can be between packages, now the DAO itself must have these methods as public, even if it&amp;rsquo;s being called only by something in the same package, because the interface was public so that the interface could be shared. I don&amp;rsquo;t see that you can get away with this whether you use package by feature or package by layer. If you follow this through with previous design thoughts such as everything is an Interface, and those end up being public, and you want nice subclassibility, whether through protected members or through interfaced getters/setters, now everything is public, and we&amp;rsquo;ve completely lost any real encapsulation. &lt;/p&gt;&lt;p&gt;So how could it be done better? have a privacy type subclass which makes the method or member available to only subclasses and not throughout the package. Allow interfaces that have global definitions, but implementations of the methods can be at a package or subclass level. I feel like this could still be accomplished, perhaps by creating an interface type that is a &amp;ldquo;contract&amp;rdquo;, and a new privacy keyword for &amp;ldquo;subclass&amp;rdquo;. Contracts could define that methods be subclass, or protected, in their implementation. At that point you could have all kinds of methods that are still hidden to the general world. You could then build package by feature, have all methods that are required within the package have contracts, but share contracts between features, so all CRUD controllers would have the same method signatures, all repositories would share signatures, etc, etc. &lt;/p&gt;&lt;p&gt;What if I actually want more privacy? well you could not share interfaces between packages, and then have interfaces not be public. You could also not use an interface at all unless it&amp;rsquo;s for a method on your bounded context that must be public. You can also say that ease of extensibility is not a goal and continue to not use your getters/setters internally, and yet make your members private. &lt;/p&gt;&lt;p&gt;You could also say, privacy is irrelevant, if the language is then preventing good, SOLID, design. Specifically here, Open-Closed, Liskov Substitution, and Interface Segregation. If you go this route you&amp;rsquo;ll need conventions, and to trust other developers, because a lot of things will be public or protected. I recommend Perl&amp;rsquo;s convention of prefixing subclass private methods with _ and assuming that all member fields are subclass/trait private and should never be called outside of their inheritance hierarchy. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Documentation! it should be TDDD</title>
      <link>http://blog.xenoterracide.com/post/documentation-it-should-be-tddd/</link>
      <pubDate>Sun, 09 May 2010 22:21:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/documentation-it-should-be-tddd/</guid>
      <description>&lt;p&gt;UPDATE: I shouldn&amp;rsquo;t have said what I said about RJBS and have &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/06/i-am-explicitive-or-formal-apology-to.html&#34;&gt;apologized publicly&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Test Driven Development should be Test and Documentation Driven Development. I don&amp;rsquo;t want to read your code to figure out how to use it. I don&amp;rsquo;t really care if you write the Test, documentation, or the feature first. But you should do all three before moving on to the next one.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m gonna pick on Dist::Zilla this seems like a very good tool. Except it&amp;rsquo;s documentation is so sub par it&amp;rsquo;s not funny. The &lt;a href=&#34;http://dzil.org&#34;&gt;new documentation&lt;/a&gt; is quite good, although, I have not decided that I like the &amp;lsquo;choose your own adventure&amp;rsquo; format. However none of the documentation on &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla/&#34;&gt;CPAN&lt;/a&gt; is good. It ranges from &lt;a href=&#34;http://search.cpan.org/~rjbs/Dist-Zilla-2.101241/lib/Dist/Zilla/Tutorial.pm&#34;&gt;significantly less&lt;/a&gt; than the new tutorial, to virtually  &lt;a href=&#34;http://search.cpan.org/~rjbs/Dist-Zilla-2.101241/lib/Dist/Zilla/Tester.pm&#34;&gt;non-existant&lt;/a&gt;, to &lt;a href=&#34;http://search.cpan.org/~rjbs/Dist-Zilla-2.101241/lib/Dist/Zilla/App/Command/new.pm&#34;&gt;completely inaccurate&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You know what? It&amp;rsquo;s not acceptable not to write documentation, especially not when you were apparently paid to do it and have shown that you are capable of doing it. Some people I&amp;rsquo;ve talked to think not documenting things is ok. I don&amp;rsquo;t think it is, and it&amp;rsquo;s yet another one of my unpopular opinions. Sure you can not document them&amp;hellip; If someone else has volunteered and is actually doing it.&lt;br /&gt;&lt;br /&gt;Yet maybe this is one of the reasons perl has fallen by the wayside. Documentation is usually either cryptic, incomplete, or inaccurate. Even the core docs like &lt;a href=&#34;http://perldoc.perl.org/perlintro.html#Conditional-and-looping-constructs&#34;&gt;perlintro&lt;/a&gt; has inaccurate and potentially damaging information. Why are we so surprised that so many people don&amp;rsquo;t know how to program perl in a modern way if the documentation is so bad?&lt;br /&gt;&lt;br /&gt;Documentation should explain who, what, when, where, why and how. Who should use this module, what they should use it for, when they should (and shouldn&amp;rsquo;t) use it, where they should use it, why they should use it, and how to use it. Unfortunately most documentation fails at all but the how, and the what. &lt;em&gt;Who&lt;/em&gt; is an Abstract, and Description thing, you should consider who doesn&amp;rsquo;t need it. &lt;em&gt;Why&lt;/em&gt; why can be tightly related to who, but really I want to know why this module and not another, consider who needs a templating engine vs why it should (or shouldn&amp;rsquo;t) be HTML::Zoom. When is also closely related to the previous 2 and will probably be answered with them, although consider when to use a for loop vs when to use a while. &lt;em&gt;Where&lt;/em&gt; could be anywhere from top of file, to your view in a catalyst program. How is obviously the actual code and should be covered in the synopsis. Sometimes you&amp;rsquo;ll have to think if you&amp;rsquo;ve answered all these, but if you manage to answer them all in a comprehensive and complete manner then you&amp;rsquo;re documentation is probably good enough to be useful.&lt;br /&gt;&lt;br /&gt;I don&amp;rsquo;t expect people to be perfect in this, but some effort is better than none. Also if you write documentation, you may end up answering less questions, and save people many hours finagling a problem.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m sure even my modules fail to meet my own standards.&lt;br /&gt;&lt;br /&gt;The best documentation I&amp;rsquo;ve seen is PostgreSQL&amp;rsquo;s and Gentoo&amp;rsquo;s.&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;perlintro was fixed in 5.12.1&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick sha1sum with Crypto&#43;&#43;</title>
      <link>http://blog.xenoterracide.com/post/quick-sha1sum-with-crypto/</link>
      <pubDate>Tue, 22 Sep 2009 01:59:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/quick-sha1sum-with-crypto/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on &lt;a href=&#34;http://github.com/xenoterracide/korama&#34;&gt;Korama&lt;/a&gt;. I was originally planning on hashing each music file and using the sha1 for the track primary key. However, after benchmarking an actual implementation. I&amp;rsquo;ve decided that it&amp;rsquo;s too slow, 20 minutes for 3k+ tracks, also my program was about 5 minutes slower than &lt;code&gt;find &amp;hellip; -exec sha1sum&lt;/code&gt; not sure on the reason why. However, since I had problems figuring out how to do it I figure I&amp;rsquo;ll post a basic sha1sum program that I made with the help of people on the &lt;a href=&#34;http://www.cryptopp.com/&#34;&gt;Crypto++&lt;/a&gt; Mailing List.&lt;br /&gt;&lt;br /&gt;Include&amp;rsquo;s are mangled due to blogger filtering&lt;br /&gt;&lt;code&gt;&lt;pre&gt;&lt;br /&gt;#include &amp;lt; cryptopp/sha.h &amp;gt;&lt;br /&gt;#include &amp;lt; cryptopp/hex.h &amp;gt;&lt;br /&gt;#include &amp;lt; cryptopp/files.h &amp;gt;&lt;br /&gt;#include &amp;lt; string &amp;gt;&lt;br /&gt;#include &amp;lt; iostream &amp;gt;&lt;br /&gt;&lt;br /&gt;using namespace std;&lt;br /&gt;&lt;br /&gt;int main(int argc, char *argv[])&lt;br /&gt;{&lt;br /&gt;    char *file = argv[1];&lt;br /&gt;    string result;&lt;br /&gt;    CryptoPP::SHA1 hash;&lt;br /&gt;&lt;br /&gt;    CryptoPP::FileSource( ( file ),true,&lt;br /&gt;        new CryptoPP::HashFilter(&lt;br /&gt;            hash, new CryptoPP::HexEncoder(&lt;br /&gt;                new CryptoPP::StringSink(result), false)&lt;br /&gt;        )&lt;br /&gt;    );&lt;br /&gt;    cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;&lt;br /&gt;    return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;it can be built with.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;g++ sha1.cpp -lcryptopp -o sha1sum&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;and tested with&lt;br /&gt;&lt;br /&gt;&lt;code&gt;./sha1sum filename&lt;/code&gt;&lt;br /&gt;It&amp;rsquo;s not meant to be a exactly compatible implementation of sha1sum. it doesn&amp;rsquo;t output the filename, it isn&amp;rsquo;t capable of handling more than one file argument, and if no argument is provided it crashes. I know I haven&amp;rsquo;t actually explained how the crypo++ code works, but I hope just posting this here will help someone in the future.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>To pointer, or not to pointer: That is the question</title>
      <link>http://blog.xenoterracide.com/post/to-pointer-or-not-to-pointer-that-is-the-question/</link>
      <pubDate>Sat, 27 Jun 2009 17:53:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/to-pointer-or-not-to-pointer-that-is-the-question/</guid>
      <description>&lt;p&gt;For a very long time now I&amp;rsquo;ve been looking for good explanations of pointers, and how the varying kinds differ.I&amp;rsquo;ve finally found a book that does a good job of explaining what they are and how they differ. The book is by Bjarne Stroustrup (the creator of C++) it&amp;rsquo;s called &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Programming-Principles-Practice-Using-C/dp/0321543726?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Programming: Principles and Practice Using C++&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0321543726&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt;. The book is supposed to teach you how to program (become a good programmer) using C++ not teach the C++ language. The question that Stroustrup poses is &lt;cite&gt;How do we choose between using a reference argument and using a pointer argument?&lt;/cite&gt; his answer to the question is quite in depth, however I&amp;rsquo;ll reiterate his summary here in the hopes that it&amp;rsquo;s useful for someone. &lt;blockquote&gt;So, the real answer is: &amp;ldquo;The choice depends on the nature of the the function&amp;rdquo;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;For tiny objects prefer pass-by-value.&lt;/li&gt;&lt;li&gt;For functions where &amp;ldquo;no object&amp;rdquo; (represented by a 0) is a valid argument use a pointer parameter (and remember to test for 0).&lt;/li&gt;&lt;li&gt;Otherwise, use a reference parameter.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;Ok, that alone seems a little confusing. I&amp;rsquo;m just going to use function declarations to denote the differences in code.&lt;br /&gt;&lt;br /&gt;According to him, pass by value is the least error prone, but it copies memory and is therefore more expensive. To do this you&amp;rsquo;d declare a function like &lt;code&gt;int func_name(int x);&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&amp;ldquo;No object&amp;rdquo; in my quote is another term for &amp;ldquo;Null pointer&amp;rdquo; which he defined previous to this but wasn&amp;rsquo;t in my quote. If no argument to the function is valid you&amp;rsquo;d use that. It&amp;rsquo;s declared like &lt;code&gt;int func_name(int* x);&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;The last option is to use a reference pointer. these are declared as &lt;code&gt;int func_name(int&amp;amp; x)&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;I still have some trouble with the what/why/when to use pointers, but I&amp;rsquo;ll probably just go back through this a few times. Stroustrup&amp;rsquo;s explanation is still the best I&amp;rsquo;ve seen. I&amp;rsquo;d suggest his book to any novice programmer. I&amp;rsquo;m not sure if it&amp;rsquo;s the best for someone who&amp;rsquo;s never seen any code as it goes quite fast. It doesn&amp;rsquo;t spend hardly any time at all on language constructs, which most books do. I don&amp;rsquo;t think so fast that you couldn&amp;rsquo;t use it as a &amp;lsquo;first programming book&amp;rsquo; but it might be good to have a book that covers the constructs (like for loop) in depth.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>