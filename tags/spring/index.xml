<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/spring/index.xml</link>
    <description>Recent content in Spring on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Single Repository, one Aggregate</title>
      <link>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</link>
      <pubDate>Thu, 02 Jul 2015 02:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; as defined in &lt;a href=&#34;http://dddcommunity.org/book/evans_2003/&#34;&gt;Domain Driven Design&lt;/a&gt;&amp;nbsp;manages a single &lt;a href=&#34;http://martinfowler.com/bliki/DDD_Aggregate.html&#34;&gt;Aggregate&lt;/a&gt;. An aggregate may contain many entities, and value objects, but will have a single object as its root. Many of the Dao and even now some of the Repository implementations I see do not follow this, they are more likely to have a Repository per entity, than a Repository per aggregate, and of course in some cases this is required for various reasons.&lt;br /&gt;&lt;br /&gt;Ok, to start out we need our POM (or you can use Gradle), which configures our dependencies and plugins. We use a starter for Spring Data JPA, which pulls in Spring Data JPA and all of it&amp;rsquo;s suggested dependencies such as Hibernate. We also need a database and a database driver so we configure H2. Since we are inheriting from the Spring Platform BOM we don&amp;rsquo;t need to specify versions as it can configure them for us. We of course want to use Java 8 and specify our Application class so we will be able to run &lt;code&gt;mvn spring-boot:run&lt;/code&gt; at the end. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/pom.xml?embed=t&#34;&gt;&lt;/script&gt; &lt;br /&gt;Next Let&amp;rsquo;s configure our application to show the SQL that it is running, this isn&amp;rsquo;t required. You need to put &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/resources/application.properties?embed=t&#34;&gt;&lt;/script&gt; Now we need to create our Entities, let&amp;rsquo;s start at the entity Bar that is the deepest part of the Aggregate root. It extends &lt;a href=&#34;http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractPersistable.html&#34;&gt;AbstractPersistable&lt;/a&gt;&amp;nbsp;so that we get an Auto Incrementing or Sequenced id. We also use AbstractPeristable because for our task we require that our entities implement &lt;a href=&#34;http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Persistable.html&#34;&gt;Persistable&lt;/a&gt;, as it changes the behavior of save on the repository if your objects are new.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Bar.java?embed=t&#34;&gt;&lt;/script&gt;Next let&amp;rsquo;s create Foo, it is much the same, but you&amp;rsquo;ll notice the &lt;code&gt;@OneToOne&lt;/code&gt; that specifies &lt;code&gt;CascadeType.ALL&lt;/code&gt;. This is important as without it persist and merge won&amp;rsquo;t work.&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Foo.java?embed=t&#34;&gt;&lt;/script&gt; Alright, let&amp;rsquo;s put together our repository, we could just make a CrudRepository, but let&amp;rsquo;s show off some paging too. You&amp;rsquo;ll notice that you have to pass the Entity and it&amp;rsquo;s Primary Key identifier type to the PagingAndSorting interface, the single method that we specify will find all the Foos by the nested baz property, using a &lt;code&gt;LIKE &amp;lsquo;%mystring%&amp;rsquo;&lt;/code&gt; query. Spring data will parse this interface and make an implementation for you automatically.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/FooRepo.java?embed=t&#34;&gt;&lt;/script&gt; You can create other lastly we do our Application, which is not designed to be a web server (it will exit immediately). The &lt;code&gt;@SpringBootApplication&lt;/code&gt; makes Spring Boot able to start the app and scan for components appropriately. We also Enable JPA repositories using the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt;. It&amp;rsquo;s main method (not recommended to prepopulate data this way), creates and save several Foos with nested bars, then I demonstrate a way that you can page the saved objects 2 at a time whilst filtering by that like statement, only 3 of the 4 entities saved will return. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Application.java?embed=t&#34;&gt;&lt;/script&gt; &lt;a href=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist&#34;&gt;The full source is available here.&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Spring to create a full REST API in less than 60 lines of code</title>
      <link>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</link>
      <pubDate>Tue, 02 Sep 2014 22:42:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</guid>
      <description>&lt;p&gt;&lt;p&gt;Spring with Spring Data is awesome. Seriously, I&amp;rsquo;ve never been able to throw up a full HATEOAS REST web service this fast. To start, I&amp;rsquo;ll admit my headliner lie, I&amp;rsquo;m not counting the &lt;code&gt;pom.xml&lt;/code&gt;. &lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;cloc .                                                                 slave-vi&lt;br /&gt;       5 text files.&lt;br /&gt;       5 unique files.&lt;br /&gt;       2 files ignored.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://cloc.sourceforge.net&#34;&gt;http://cloc.sourceforge.net&lt;/a&gt; v 1.62  T=0.04 s (104.8 files/s, 3930.8 lines/s)&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Language                     files          blank        comment           code&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Maven                            1              6              7             65&lt;br /&gt;Java                             3             15              0             57&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;SUM:                             4             21              7            122&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/322b301f810355f6187c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The basics of the web service is we want to be able to create tasks, like those on a todo list, for now we want the simplest tasks possible, in as little code possible. We should use UUID&amp;rsquo;s so that our service can scale horizontally, so that we can easily generate known test ID&amp;rsquo;s and we know that no two entities will share an id if we ever wanted to flatten things. We need to be able to perform basic CRUD on all of our entities as well as list them. &lt;/p&gt; &lt;p&gt; First let&amp;rsquo;s create our Task. &lt;script src=&#34;https://gist.github.com/xenoterracide/0611398e4abbf4ad9153.js&#34;&gt;&lt;/script&gt;As you can see it&amp;rsquo;s incredibly simple, we have our UUID identity, the &lt;code&gt;uuid&lt;/code&gt; and &lt;code&gt;uuid2&lt;/code&gt; basically are &lt;a href=&#34;http://java.dzone.com/articles/hibernate-and-uuid-identifiers&#34;&gt;telling Hibernate and H2/PostgreSQL to use UUID&amp;rsquo;s&lt;/a&gt;. You might ask why limit description to 100 characters, well, since these are quick tasks, I might want to share them  in a tweet, and this allows enough room for a url shortner plus the description. I think the rest is pretty self explanatory. &lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s create our Repository. &lt;script src=&#34;https://gist.github.com/xenoterracide/2fef27d252f906b563d4.js&#34;&gt;&lt;/script&gt;Well that doesn&amp;rsquo;t do anything&amp;hellip; oh but it does, and although it doesn&amp;rsquo;t show it, because this application doesn&amp;rsquo;t need it, there&amp;rsquo;s a nifty method signature parser dsl that allows you to build queries just by writing a method signature. &lt;/p&gt;&lt;/p&gt;Here&amp;rsquo;s our Application. &lt;script src=&#34;https://gist.github.com/xenoterracide/21b5b022a8844b515b96.js&#34;&gt;&lt;/script&gt; &amp;hellip; and pom for dependencies and stuff. &lt;script src=&#34;https://gist.github.com/xenoterracide/14b990fc2b6ad34f206d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the output of some curl commands I ran. &lt;script src=&#34;https://gist.github.com/xenoterracide/feaf505ebc5cc1cf799c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;For a slightly more in depth tutorial you can see the &lt;a href=&#34;http://spring.io/guides/gs/accessing-data-rest/&#34;&gt;official spring date rest getting started page&lt;/a&gt;. In the future I&amp;rsquo;ll try to write about how to actually connect to PostgreSQL and set up API Authentication and Authorization&lt;/p&gt;&lt;p&gt;People are always telling me how verbose Java is, how much less typing their language (especially Perl is). I&amp;rsquo;d love to see a Perl app that can do all this in fewer lines of Perl (restriction, no line may be longer than 120 characters, and must be humanly readable), I personally don&amp;rsquo;t think it can be done at this time (not with full HATEOAS and as many response codes), but I&amp;rsquo;m waiting for the day it can, and can be structured this simply.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>