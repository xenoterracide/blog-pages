<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/java/index.xml</link>
    <description>Recent content in Java on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Log (CRLF) Injection with SLF4J</title>
      <link>http://blog.xenoterracide.com/post/log-crlf-injection-with-slf4j/</link>
      <pubDate>Mon, 27 Feb 2017 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/log-crlf-injection-with-slf4j/</guid>
      <description>&lt;p&gt;At my job we have a CIO installed policy of remediating issues found by a static analysis tool  and what it finds are
 most targeted at finding security issues. Currently this tool  is Veracode, and I don&amp;rsquo;t recommend it, it misses more
 problems than it finds, and what it finds, including this issue, are often false positives. Our most common issue, is
  CRLF (Carriage Return Line Feed) or other log injection, which we have mitigated in a custom log appender (which
  Veracode doesn&amp;rsquo;t recognize).&lt;/p&gt;

&lt;p&gt;So in order to educate people, I&amp;rsquo;ve made a sample app to demo what you can do, here&amp;rsquo;s the code, if you&amp;rsquo;re familiar with
 SLF4J it should be pretty obvious. We&amp;rsquo;re logging the arguments in various ways passed to the program (note: there&amp;rsquo;s a
  &lt;code&gt;README.md&lt;/code&gt; on how to build it in &lt;a href=&#34;https://bitbucket.org/xenoterracide/loginjectionexample&#34;&gt;repo&lt;/a&gt; )&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;com.xenoterracide.log_injection_example&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.Arrays&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.boot.CommandLineRunner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Logger&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LoggerFactory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getLogger&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Application&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;STARTING&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Runner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpringApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Application&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;@Component&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Runner&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CommandLineRunner&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #a6e22e&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;running with args &amp;#39;{}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;running {}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Arrays&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run the code, it has 2 outputs, one with default SLF4J settings, and the other with Spring Boot&amp;rsquo;s default SLF4J settings. If you run this application with &lt;code&gt;hello&lt;/code&gt; as an argument you&amp;rsquo;d get the following output, there&amp;rsquo;s no injection here, this is obviously what the developer intends for it to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;15:06:16.266 [main] INFO com.xenoterracide.log_injection_example.Application - STARTING
15:06:16.271 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: hello
15:06:16.273 [main] DEBUG com.xenoterracide.log_injection_example.Application - running &#39;hello&#39;
15:06:16.276 [main] ERROR com.xenoterracide.log_injection_example.Application - 
java.lang.IllegalArgumentException: [hello]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31)
 at com.xenoterracide.log_injection_example.Application.main(Application.java:19)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

  .   ____          _            __ _ _
 /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.1.RELEASE)

2017-02-22 15:06:17.138  INFO 41153 --- [           main] c.x.log_injection_example.Application    : Starting Application v1.0-SNAPSHOT on Calebs-MacBook-Pro.local with PID 41153 (/Users/calebcushing/IdeaProjects/loginjectionexample/target/log-injection-example-1.0-SNAPSHOT.jar started by calebcushing in /Users/calebcushing/IdeaProjects/loginjectionexample)
2017-02-22 15:06:17.139  INFO 41153 --- [           main] c.x.log_injection_example.Application    : No active profile set, falling back to default profiles: default
2017-02-22 15:06:17.208  INFO 41153 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:06:17 CST 2017]; root of context hierarchy
2017-02-22 15:06:17.848  INFO 41153 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-02-22 15:06:17.861  INFO 41153 --- [           main] c.x.log_injection_example.Application    : running with args: hello
2017-02-22 15:06:17.864 ERROR 41153 --- [           main] c.x.log_injection_example.Application    : 

java.lang.IllegalArgumentException: [hello]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31) ~[classes!/:1.0-SNAPSHOT]
 at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:776) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:760) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:747) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at com.xenoterracide.log_injection_example.Application.main(Application.java:20) [classes!/:1.0-SNAPSHOT]
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112]
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112]
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112]
 at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]

2017-02-22 15:06:17.868  INFO 41153 --- [           main] c.x.log_injection_example.Application    : Started Application in 1.422 seconds (JVM running for 1.839)
2017-02-22 15:06:17.869  INFO 41153 --- [       Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:06:17 CST 2017]; root of context hierarchy
2017-02-22 15:06:17.870  INFO 41153 --- [       Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to notice here is that Spring Boot doesn&amp;rsquo;t log debug by default, so no help there. Ok, so now let&amp;rsquo;s see what happens if I inject a log by inputing. The newline, after the quote, below is very important.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar target/log-injection-example-1.0-SNAPSHOT.jar &amp;quot;
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that will generate this output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar&amp;quot;
15:13:31.162 [main] INFO com.xenoterracide.log_injection_example.Application - STARTING
15:13:31.167 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: 
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar
15:13:31.168 [main] DEBUG com.xenoterracide.log_injection_example.Application - running &#39;
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar&#39;
15:13:31.170 [main] ERROR com.xenoterracide.log_injection_example.Application - 
java.lang.IllegalArgumentException: [
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31)
 at com.xenoterracide.log_injection_example.Application.main(Application.java:19)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87)
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)

  .   ____          _            __ _ _
 /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  &#39;  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.5.1.RELEASE)

2017-02-22 15:13:31.782  INFO 41187 --- [           main] c.x.log_injection_example.Application    : Starting Application v1.0-SNAPSHOT on Calebs-MacBook-Pro.local with PID 41187 (/Users/calebcushing/IdeaProjects/loginjectionexample/target/log-injection-example-1.0-SNAPSHOT.jar started by calebcushing in /Users/calebcushing/IdeaProjects/loginjectionexample)
2017-02-22 15:13:31.783  INFO 41187 --- [           main] c.x.log_injection_example.Application    : No active profile set, falling back to default profiles: default
2017-02-22 15:13:31.863  INFO 41187 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:13:31 CST 2017]; root of context hierarchy
2017-02-22 15:13:32.504  INFO 41187 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-02-22 15:13:32.516  INFO 41187 --- [           main] c.x.log_injection_example.Application    : running with args: 
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar
2017-02-22 15:13:32.520 ERROR 41187 --- [           main] c.x.log_injection_example.Application    : 

java.lang.IllegalArgumentException: [
11:45:21.873 [main] INFO com.xenoterracide.log_injection_example.Application - running with args: bar]
 at com.xenoterracide.log_injection_example.Application$Runner.run(Application.java:31) ~[classes!/:1.0-SNAPSHOT]
 at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:776) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:760) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:747) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar!/:1.5.1.RELEASE]
 at com.xenoterracide.log_injection_example.Application.main(Application.java:20) [classes!/:1.0-SNAPSHOT]
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112]
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112]
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112]
 at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]
 at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]
 at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [log-injection-example-1.0-SNAPSHOT.jar:1.0-SNAPSHOT]

2017-02-22 15:13:32.524  INFO 41187 --- [           main] c.x.log_injection_example.Application    : Started Application in 1.168 seconds (JVM running for 1.594)
2017-02-22 15:13:32.525  INFO 41187 --- [       Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@41906a77: startup date [Wed Feb 22 15:13:31 CST 2017]; root of context hierarchy
2017-02-22 15:13:32.526  INFO 41187 --- [       Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that in the default SLF4J output we&amp;rsquo;ve created a convincing message, It looks like we have empty string argument, and a second log statement. If you look at the debug message though, it has an unbalanced quote, which will tip your hat to the idea that something strange has happened. This debug statement is not run in our &amp;ldquo;production&amp;rdquo; spring boot. However if you look at the spring boot output the formatting is significantly different. Also this may seem obvious in this contrived example, but would you really notice it if you were reading thousands of lines of logs?&lt;/p&gt;

&lt;p&gt;Log injection gets dangerous in a few scenario&amp;rsquo;s. The first would be if you&amp;rsquo;re using a log analysis tool, it might not pick up the second log line as a fraud, and instead treat it as a real log and the former log as only having an empty string. If they get the log format wrong (like with boot) then the analysis tool might not match the pattern and throw it out. The next danger in log injection is XSS (or other types of injection). Take Docker Cloud (I don&amp;rsquo;t know if it is or isn&amp;rsquo;t vulnerable) it allows you to view your containers logs in a web browser, now imagine I put javascript code that pushes a malicious pdf (or something) to your computer &amp;ldquo;onload&amp;rdquo;. When the system administrator goes in to view these logs this pdf might download and then be opened in a vulnerable viewer. Now you have an admin with a trojan horse on his computer. To be said other types of injection come in if you&amp;rsquo;re saving logs to a database in an unsafe way, or for some reason passing them to a parser that might interpret the content (like regex injection).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Repository, one Aggregate</title>
      <link>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</link>
      <pubDate>Thu, 02 Jul 2015 02:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; as defined in &lt;a href=&#34;http://dddcommunity.org/book/evans_2003/&#34;&gt;Domain Driven Design&lt;/a&gt;&amp;nbsp;manages a single &lt;a href=&#34;http://martinfowler.com/bliki/DDD_Aggregate.html&#34;&gt;Aggregate&lt;/a&gt;. An aggregate may contain many entities, and value objects, but will have a single object as its root. Many of the Dao and even now some of the Repository implementations I see do not follow this, they are more likely to have a Repository per entity, than a Repository per aggregate, and of course in some cases this is required for various reasons.&lt;br /&gt;&lt;br /&gt;Ok, to start out we need our POM (or you can use Gradle), which configures our dependencies and plugins. We use a starter for Spring Data JPA, which pulls in Spring Data JPA and all of it&amp;rsquo;s suggested dependencies such as Hibernate. We also need a database and a database driver so we configure H2. Since we are inheriting from the Spring Platform BOM we don&amp;rsquo;t need to specify versions as it can configure them for us. We of course want to use Java 8 and specify our Application class so we will be able to run &lt;code&gt;mvn spring-boot:run&lt;/code&gt; at the end. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/pom.xml?embed=t&#34;&gt;&lt;/script&gt; &lt;br /&gt;Next Let&amp;rsquo;s configure our application to show the SQL that it is running, this isn&amp;rsquo;t required. You need to put &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/resources/application.properties?embed=t&#34;&gt;&lt;/script&gt; Now we need to create our Entities, let&amp;rsquo;s start at the entity Bar that is the deepest part of the Aggregate root. It extends &lt;a href=&#34;http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractPersistable.html&#34;&gt;AbstractPersistable&lt;/a&gt;&amp;nbsp;so that we get an Auto Incrementing or Sequenced id. We also use AbstractPeristable because for our task we require that our entities implement &lt;a href=&#34;http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Persistable.html&#34;&gt;Persistable&lt;/a&gt;, as it changes the behavior of save on the repository if your objects are new.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Bar.java?embed=t&#34;&gt;&lt;/script&gt;Next let&amp;rsquo;s create Foo, it is much the same, but you&amp;rsquo;ll notice the &lt;code&gt;@OneToOne&lt;/code&gt; that specifies &lt;code&gt;CascadeType.ALL&lt;/code&gt;. This is important as without it persist and merge won&amp;rsquo;t work.&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Foo.java?embed=t&#34;&gt;&lt;/script&gt; Alright, let&amp;rsquo;s put together our repository, we could just make a CrudRepository, but let&amp;rsquo;s show off some paging too. You&amp;rsquo;ll notice that you have to pass the Entity and it&amp;rsquo;s Primary Key identifier type to the PagingAndSorting interface, the single method that we specify will find all the Foos by the nested baz property, using a &lt;code&gt;LIKE &amp;lsquo;%mystring%&amp;rsquo;&lt;/code&gt; query. Spring data will parse this interface and make an implementation for you automatically.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/FooRepo.java?embed=t&#34;&gt;&lt;/script&gt; You can create other lastly we do our Application, which is not designed to be a web server (it will exit immediately). The &lt;code&gt;@SpringBootApplication&lt;/code&gt; makes Spring Boot able to start the app and scan for components appropriately. We also Enable JPA repositories using the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt;. It&amp;rsquo;s main method (not recommended to prepopulate data this way), creates and save several Foos with nested bars, then I demonstrate a way that you can page the saved objects 2 at a time whilst filtering by that like statement, only 3 of the 4 entities saved will return. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Application.java?embed=t&#34;&gt;&lt;/script&gt; &lt;a href=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist&#34;&gt;The full source is available here.&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Integration with Wercker and Maven</title>
      <link>http://blog.xenoterracide.com/post/continuous-integration-with-wercker-and-maven/</link>
      <pubDate>Sat, 20 Jun 2015 14:40:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/continuous-integration-with-wercker-and-maven/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m going to walk you through getting mvn test running in wercker, on the new docker based api.&lt;br /&gt;&lt;br /&gt;First let&amp;rsquo;s talk about what &lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker &lt;/a&gt;&amp;nbsp;is and why you&amp;rsquo;d want to use it. Wercker a continuous integration and deployment web application. It will all you to run any language or stack. It currently is free for both private and public repositories; I am hopeful that once it comes out of beta it will maintain reasonable pricing for small personal private projects (Most CI&amp;rsquo;s are ridiculously priced for hobby projects). It can deploy to any platform.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So where does it fall apart? well although it seems reasonably well documented I&amp;rsquo;ve only rarely gotten something right on the first try using its documentation. This largely revolves around the fact that its YAML parser seems more sensitive to whitespace than a standard YAML parser, and their examples aren&amp;rsquo;t properly spaced, and the validator doesn&amp;rsquo;t report the right line/position of the error. That being said I&amp;rsquo;m going to tell you how to get up and running fast. Also they seem to have a problem keeping their platform up to date, the 1.0 platform only offers an Ubuntu base that is a few years old already. The 2.0 platform is based on docker, so it takes care of that, but has some problems such as it can&amp;rsquo;t process the Dockerfile itself.&lt;br /&gt;&lt;br /&gt;All this said Wercker accomplishes my need of having a continuous integration environment that is cheap enough to work for both my open source and my private hobby projects, no matter what language I might use.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To get started you&amp;rsquo;re going to need a Bitbucket or Github account as well as a wercker account, and a git repo. Before creating the &amp;ldquo;application&amp;rdquo; on Wercker let&amp;rsquo;s actually create our application in a git repo. All you need is a git repo from which you can run &lt;code&gt;mvn test&lt;/code&gt; at the root. To make this simple, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-simple&#34;&gt;here is a spring boot sample project&lt;/a&gt;, you can clone that, and copy the directory I linked into a new project, and create a new git repo and upload it to your git host. &lt;a href=&#34;https://bitbucket.org/xenoterracide/werker-maven-spring-boot-example/src&#34;&gt;Here&amp;rsquo;s a fully configured sample project I made&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So what we&amp;rsquo;re going to focus on is the &lt;code&gt;wercker.yml&lt;/code&gt;, create that file at the root of your git repo. the first thing the file will need is a box, the box is the docker image your code runs in, and will deploy. For this we&amp;rsquo;ll choose the &lt;a href=&#34;https://registry.hub.docker.com/_/maven/&#34;&gt;maven docker image&lt;/a&gt;, all you need to do is put &lt;code&gt;box: maven:latest&lt;/code&gt; at the top of the file. After that we need to add build steps. build steps are individual units of work you need to do to build your project. There are ways to write script steps or complicated custom steps, but those are for another article. We&amp;rsquo;re just going to add the &lt;a href=&#34;https://bitbucket.org/xenoterracide/wercker-step-maven&#34;&gt;maven build step I wrote&lt;/a&gt; that works for 1, and 2.0 Though it works better for 1 as it supports caching dependendencies and I haven&amp;rsquo;t figured out if that&amp;rsquo;s possible in 2. Below is the completed wercker.yml, steps has a 2 space indentation, the step name has a 4 space indentation and a -, and goals has an 8 space indentation, as mentioned spacing is very important.&lt;/div&gt;&lt;div&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/werker-maven-spring-boot-example/src/e4fddd5494d895173d3181914cbf43beff768e25/wercker.yml?embed=t&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;That&amp;rsquo;s it, now go log into Wercker, click create -&amp;gt; application and follow the instructions, when you&amp;rsquo;re done you should be able to push commits, and wercker will run mvn test for you. Here&amp;rsquo;s what &lt;a href=&#34;https://app.wercker.com/#applications/54befcb456767b4663000750&#34;&gt;our sample&lt;/a&gt; looks like when you&amp;rsquo;re done. That&amp;rsquo;s it, simple right? have fun wercking with continuous integration on your projects.&lt;/div&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 ways of implementing Polymorphism</title>
      <link>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</link>
      <pubDate>Tue, 07 Oct 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</guid>
      <description>&lt;p&gt;&lt;p&gt;Firstly what is Polymorphism and why is it so important? Polymorphism is the ability to have a many implementations of a behavior that conform to a single interface. Put in perhaps slightly better, pragmatic terms, you have one implementations of a caller, that can operate on many implementations of a &amp;ldquo;parameter&amp;rdquo;, without conditionals, or changing the callers code. For instance the following, pseudo?, Perl 6-ism &lt;code&gt;method handler( $obj ) { $obj.execute() }&lt;/code&gt;. As you can imagine &lt;code&gt;$obj&lt;/code&gt; can be anything that has an execute method. For this Article I&amp;rsquo;ll give you two implementations and one caller, in either Perl &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt; or Java &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;, boilerplate will be excluded for brevity.&lt;/p&gt;&lt;h1&gt;Inheritance&lt;/h1&gt;&lt;h2&gt;Single Inheritance&lt;/h2&gt;&lt;p&gt;Single inheritance is the most simple and well understood form of Polymorphism. &lt;script src=&#34;https://gist.github.com/xenoterracide/1e5c4cc8cb9f156594a6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Multiple Inheritance&lt;/h2&gt;&lt;p&gt;Multiple inheritance is often considered dangerous, is unavailable in Java and suffers from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&#34;&gt;The diamond problem&lt;/a&gt;. You should really only use this with a &lt;a href=&#34;https://en.wikipedia.org/wiki/C3_linearization&#34;&gt;C3 MRO&lt;/a&gt;. &lt;h1&gt;Flat Composition&lt;/h1&gt;&lt;h2&gt;Interfaces&lt;/h2&gt;&lt;p&gt;Interfaces are probably the third most common form of Polymorhism, they are essentially codified contracts. &lt;script src=&#34;https://gist.github.com/xenoterracide/22661c96ec03bdc5416d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Traits&lt;/h2&gt;&lt;p&gt;These are just the same as Interfaces in Java 8 you say? well yes, that&amp;rsquo;s what Java 8 calls them, &lt;a href=&#34;https://en.wikipedia.org/wiki/Trait_(computer_programming)&#34;&gt;Traits are a list of methods flattened into a class, but they cannot access state&lt;/a&gt;. This basically describes what Java 8 is doing, as you can&amp;rsquo;t access properties from within the interface, well.. at least not unless you do what I show here, which is basically access state through getters and setters. &lt;script src=&#34;https://gist.github.com/xenoterracide/3bc3898ba2c0481d82a1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Mixins&lt;/h2&gt;&lt;p&gt;Mixins are basically traits that can access state, though some mixins (AFAIK Ruby) are implemented sneakily as multiple inheritance, rather than flat list composition. IMHO, Mixins should be implemented using flat list composition. &lt;script src=&#34;https://gist.github.com/xenoterracide/7cf9a94e953a7226b929.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Typeless&lt;/h1&gt;&lt;h2&gt;Duck Typing&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;has $!log&lt;/code&gt; in the Mixin is actually a pretty good example of duck typing, we don&amp;rsquo;t check for debug we are just calling it. Java is basically incapable of doing this, except, you can treat everything as an Object (if that&amp;rsquo;s all you need).&lt;/p&gt;&lt;h2&gt;Function References&lt;/h2&gt;&lt;p&gt;references to functions may or may not be allowed to have varied signatures depending on the language, but so long as they have the same signature they are interchangeable, and thus polymorphic. So why aren&amp;rsquo;t normal functions (procedures), for example, Polymormphic, the problem with procedures is that you have to import the implementation from outside the file, where with polymorphic code, you can create your instance outside the file, pass it into code that&amp;rsquo;s in the file, without changing the code, pass in a different implementation, and it&amp;rsquo;ll continue to work. To modify procedural code, you&amp;rsquo;d have to modify at least the import, and in compiled code that means a rebuild. It&amp;rsquo;s worth noting these aren&amp;rsquo;t so much typeless as their is only one type to be concerned with, a function. &lt;script src=&#34;https://gist.github.com/xenoterracide/0205464271096e6c97a2.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Miscellaneous&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;m personally skeptical of whether these actually fit the definition of Polymorphism, but they sort of do, just in completely different ways from the above&lt;/p&gt;&lt;h2&gt;Method Overloading&lt;/h2&gt;&lt;p&gt;Method overloading is &lt;a href=&#34;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&#34;&gt;called ad hoc polymorphism&lt;/a&gt; and is kind of weird in that what it&amp;rsquo;s really doing is hiding the type change from the programmer. Reality is you&amp;rsquo;re kind of asking for different behavior, but you want to hide that it&amp;rsquo;s different in the caller. However since it means you wouldn&amp;rsquo;t have to change the caller, it counts. &lt;script src=&#34;https://gist.github.com/xenoterracide/fe557d67b981888efb1f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt; &lt;h2&gt;Generics&lt;/h2&gt;&lt;p&gt;I describe generics as class templates, because they remind me of having an HTML template, and then filling in the blanks by passing in variables, the variable happens to be a Type. Perl doesn&amp;rsquo;t have Generics, and I&amp;rsquo;m not aware of plans for it in Perl 6.&lt;script src=&#34;https://gist.github.com/xenoterracide/173c9c178dc903ced098.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Reflection&lt;/h2&gt;&lt;p&gt;Reflection is sort of polymorphic in that you can essentially treat all objects the same, via a single standard API. I don&amp;rsquo;t know that I want to show the kind of Reflective code because it get&amp;rsquo;s real complicated fast, but for example, &lt;code&gt;@Inject&lt;/code&gt; can be annotated in systems with CDI compliant injector, they will reflectivly treat all objects with this the same, and then set the annotated property.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Spring to create a full REST API in less than 60 lines of code</title>
      <link>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</link>
      <pubDate>Tue, 02 Sep 2014 22:42:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</guid>
      <description>&lt;p&gt;&lt;p&gt;Spring with Spring Data is awesome. Seriously, I&amp;rsquo;ve never been able to throw up a full HATEOAS REST web service this fast. To start, I&amp;rsquo;ll admit my headliner lie, I&amp;rsquo;m not counting the &lt;code&gt;pom.xml&lt;/code&gt;. &lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;cloc .                                                                 slave-vi&lt;br /&gt;       5 text files.&lt;br /&gt;       5 unique files.&lt;br /&gt;       2 files ignored.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://cloc.sourceforge.net&#34;&gt;http://cloc.sourceforge.net&lt;/a&gt; v 1.62  T=0.04 s (104.8 files/s, 3930.8 lines/s)&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Language                     files          blank        comment           code&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Maven                            1              6              7             65&lt;br /&gt;Java                             3             15              0             57&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;SUM:                             4             21              7            122&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/322b301f810355f6187c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The basics of the web service is we want to be able to create tasks, like those on a todo list, for now we want the simplest tasks possible, in as little code possible. We should use UUID&amp;rsquo;s so that our service can scale horizontally, so that we can easily generate known test ID&amp;rsquo;s and we know that no two entities will share an id if we ever wanted to flatten things. We need to be able to perform basic CRUD on all of our entities as well as list them. &lt;/p&gt; &lt;p&gt; First let&amp;rsquo;s create our Task. &lt;script src=&#34;https://gist.github.com/xenoterracide/0611398e4abbf4ad9153.js&#34;&gt;&lt;/script&gt;As you can see it&amp;rsquo;s incredibly simple, we have our UUID identity, the &lt;code&gt;uuid&lt;/code&gt; and &lt;code&gt;uuid2&lt;/code&gt; basically are &lt;a href=&#34;http://java.dzone.com/articles/hibernate-and-uuid-identifiers&#34;&gt;telling Hibernate and H2/PostgreSQL to use UUID&amp;rsquo;s&lt;/a&gt;. You might ask why limit description to 100 characters, well, since these are quick tasks, I might want to share them  in a tweet, and this allows enough room for a url shortner plus the description. I think the rest is pretty self explanatory. &lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s create our Repository. &lt;script src=&#34;https://gist.github.com/xenoterracide/2fef27d252f906b563d4.js&#34;&gt;&lt;/script&gt;Well that doesn&amp;rsquo;t do anything&amp;hellip; oh but it does, and although it doesn&amp;rsquo;t show it, because this application doesn&amp;rsquo;t need it, there&amp;rsquo;s a nifty method signature parser dsl that allows you to build queries just by writing a method signature. &lt;/p&gt;&lt;/p&gt;Here&amp;rsquo;s our Application. &lt;script src=&#34;https://gist.github.com/xenoterracide/21b5b022a8844b515b96.js&#34;&gt;&lt;/script&gt; &amp;hellip; and pom for dependencies and stuff. &lt;script src=&#34;https://gist.github.com/xenoterracide/14b990fc2b6ad34f206d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the output of some curl commands I ran. &lt;script src=&#34;https://gist.github.com/xenoterracide/feaf505ebc5cc1cf799c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;For a slightly more in depth tutorial you can see the &lt;a href=&#34;http://spring.io/guides/gs/accessing-data-rest/&#34;&gt;official spring date rest getting started page&lt;/a&gt;. In the future I&amp;rsquo;ll try to write about how to actually connect to PostgreSQL and set up API Authentication and Authorization&lt;/p&gt;&lt;p&gt;People are always telling me how verbose Java is, how much less typing their language (especially Perl is). I&amp;rsquo;d love to see a Perl app that can do all this in fewer lines of Perl (restriction, no line may be longer than 120 characters, and must be humanly readable), I personally don&amp;rsquo;t think it can be done at this time (not with full HATEOAS and as many response codes), but I&amp;rsquo;m waiting for the day it can, and can be structured this simply.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Privacy, broken by design</title>
      <link>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</link>
      <pubDate>Tue, 03 Jun 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</guid>
      <description>&lt;p&gt;&lt;p&gt;It is worth prefixing that none of the following arguments apply to anything using the keyword &lt;code&gt;static&lt;/code&gt; which makes things more procedural (or in some cases functional, than Object Oriented.&lt;/p&gt;&lt;p&gt;The suggestion in Java is to give the least required permission, but this,  in my humble opinion, violates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;Open-Closed Principle&lt;/a&gt;. Java has &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&#34;&gt;four privacy levels&lt;/a&gt;. Giving something the least permission required to function is fine in a Security context, privacy in programming however is simply there to discourage developers from doing stupid things. In most cases, unlike security, it only makes them difficult, not impossible. I believe that any SOLID principle should make your code more easily extensible, so while in fact Java&amp;rsquo;s privacy is not in literal violation of Open-Closed, it does make extension more difficult than it otherwise should be, thus violating the spirit of the principle. &lt;/p&gt;&lt;p&gt;Before I continue on to how I think Java&amp;rsquo;s design, and common usage, violates the Open Closed Principle, I should explain how I interpret the Principle, as my interpretation appears to be slightly different from what&amp;rsquo;s on Wikipedia. The Principle as described on Wikipedia appears to be combining it with two other SOLID Principles, namely Liskov Substitution and Interface Segregation. So first let&amp;rsquo;s assume that The principle stands alone, and that although it&amp;rsquo;d be bad design to not be completely SOLID, Open-Closed by itself does not require a subclass to support the same interface. Let&amp;rsquo;s also assume that Not modifying the source to add features is also an unrealistic expectation. The purpose of Open-Closed is to ensure that your subclasses are not modifying the the structure or data of their child classes and that a child may easily add to, or change the behavior it got from its parent (Liskov says that it must be substitutable for its parent). &lt;/p&gt;&lt;p&gt;First let&amp;rsquo;s talk about final, marking a class as final, means you can&amp;rsquo;t extend it. This by the very definition is in violation of Open-Closed, because the class is not Open for extension. Classes such as UUID are marked final, you might ask, why would I want to extend a UUID? maybe I want to give it a toURISafeBase64 method. That wouldn&amp;rsquo;t break any of the orignal behavior, and is almost as legitimately belonging as representing the UUID as hex. What if I wanted to extend a nested final class like an Iterator on a Map? I can&amp;rsquo;t do that, which means I have to completely reimplement the Iterator to add simple functionality. In fact the way those are implemented I have to implement much more than just the Iterator. &lt;/p&gt;&lt;p&gt;It is recommended by the official Java Docs, and the community, to make member variables private unless otherwise necessary. Private variables are only accessible to the current class and nested classes, they are not visible to subclasses, in or out of the package. In my opinion this violates Open-Closed because now, if I subclass I need to reimplement all the fields, or use getters/setters. Getters and Setters for every single attribute are actually almost no better than the attribute itself, and an object that is nothing more than those is an &lt;a href=&#34;http://www.martinfowler.com/bliki/AnemicDomainModel.html&#34;&gt;Anemic&lt;/a&gt;. Now it could be argued that making subclasses call methods makes them more&amp;hellip; impervious to change, because if you change the data structure you can preserve the methods. The problem is that most classes wouldn&amp;rsquo;t use their own getters internally, and thus break this, because then extending that getter won&amp;rsquo;t actually modify the class as completely as desired. Also remember that subclasses are by definition, tightly coupled, usually changes to the superclass require taking a look at the subclasses. So if you are using getters and setters to ensure extensibility and preserve internal/external interface changes, use them exclusively, meaning only they can have raw access, all constructors, and business logic methods must go through them. At that point they are the replacment for direct member access and private won&amp;rsquo;t matter as much (I will probably advocate a variant of this in the next article). However if you still want to access some member data hidden by the class directly, you should ensure that your subclasses can easily do so as well. You should &lt;em&gt;only&lt;/em&gt; make a member private if it would actually cause a bug in any subclass. &lt;/p&gt;&lt;p&gt;So if we go on to assume that all subclasses, even ones in a different package (because you know people using your code are going to extend things) then we should be making all members protected. This would mean that all subclasses could reuse the member variables. Of course the problem is now your data is not encapsulated in &lt;em&gt;your&lt;/em&gt; package, once a member variable is not private, is is available to your entire package. To me this also seems like a bad idea, other classes in my package don&amp;rsquo;t need to see my objects internals unless they&amp;rsquo;re a subclass. So now you have to choose, make all classes easily extended? or protect people who are programming in your package from themselves. You can probably control who&amp;rsquo;s modifying your package and how, and have static code analysis to check that you&amp;rsquo;re not calling obj.foo only this.foo. But nothing can give you back extensibility you&amp;rsquo;ve taken away (outside of adding it back). &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s look at interfaces, interfaces generally have two options, public, or protected. This is fine, but has a problem, protected interfaces are only applicable to the package that has the interface defined. Methods implementing the interface must have the same privacy level. Most of the time what I actually want is an interface which I&amp;rsquo;ve defined globally as a contract, but I want the implementations to only be called by their package. For example, a DAO (Data Access Object) might be able to share the same interface (with judicious generic usage), between entities. However if you do this, you may find that your interface must be public, so it can be between packages, now the DAO itself must have these methods as public, even if it&amp;rsquo;s being called only by something in the same package, because the interface was public so that the interface could be shared. I don&amp;rsquo;t see that you can get away with this whether you use package by feature or package by layer. If you follow this through with previous design thoughts such as everything is an Interface, and those end up being public, and you want nice subclassibility, whether through protected members or through interfaced getters/setters, now everything is public, and we&amp;rsquo;ve completely lost any real encapsulation. &lt;/p&gt;&lt;p&gt;So how could it be done better? have a privacy type subclass which makes the method or member available to only subclasses and not throughout the package. Allow interfaces that have global definitions, but implementations of the methods can be at a package or subclass level. I feel like this could still be accomplished, perhaps by creating an interface type that is a &amp;ldquo;contract&amp;rdquo;, and a new privacy keyword for &amp;ldquo;subclass&amp;rdquo;. Contracts could define that methods be subclass, or protected, in their implementation. At that point you could have all kinds of methods that are still hidden to the general world. You could then build package by feature, have all methods that are required within the package have contracts, but share contracts between features, so all CRUD controllers would have the same method signatures, all repositories would share signatures, etc, etc. &lt;/p&gt;&lt;p&gt;What if I actually want more privacy? well you could not share interfaces between packages, and then have interfaces not be public. You could also not use an interface at all unless it&amp;rsquo;s for a method on your bounded context that must be public. You can also say that ease of extensibility is not a goal and continue to not use your getters/setters internally, and yet make your members private. &lt;/p&gt;&lt;p&gt;You could also say, privacy is irrelevant, if the language is then preventing good, SOLID, design. Specifically here, Open-Closed, Liskov Substitution, and Interface Segregation. If you go this route you&amp;rsquo;ll need conventions, and to trust other developers, because a lot of things will be public or protected. I recommend Perl&amp;rsquo;s convention of prefixing subclass private methods with _ and assuming that all member fields are subclass/trait private and should never be called outside of their inheritance hierarchy. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matching Hex characters in a Regex</title>
      <link>http://blog.xenoterracide.com/post/matching-hex-characters-in-a-regex/</link>
      <pubDate>Thu, 13 Mar 2014 15:41:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/matching-hex-characters-in-a-regex/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve noticed a common problem with regular expressions and Hex Characters, so I thought I&amp;rsquo;d blog about it. The most common way to regex a UUID, or SHA1 or some other hex encoded binary value is this (and I&amp;rsquo;ve seen this in Perl libraries and StackOverflow answers). &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;[a-f0-9] or [A-F0-9]&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;Neither of these are correct as Hex is case insensitive and both of these regex&amp;rsquo;s are. Hex is most commonly lowercase (unless you&amp;rsquo;re Data::UUID), but that&amp;rsquo;s an aesthetic, not a requirement. The best way to match Hex is using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Regular_expression&#34;&gt;POSIX character class&lt;/a&gt;. &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;[[:xdigit:]] or \x&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;which matches this in a more readable manner, and intent driven manner &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;[A-Fa-f0-9]&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;as a side note it&amp;rsquo;s this in a regex string in Java &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;&amp;ldquo;\p{XDigit}&amp;rdquo;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>