<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/tips/index.xml</link>
    <description>Recent content in Tips on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making re.pl usable</title>
      <link>http://blog.xenoterracide.com/post/making-re.pl-usable/</link>
      <pubDate>Sun, 25 Jul 2010 18:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-re.pl-usable/</guid>
      <description>&lt;p&gt;For starters I&amp;rsquo;m not a super fan of interactive shell&amp;rsquo;s for non-system shells. I don&amp;rsquo;t see the point as much. When I first tried &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL.pm&#34;&gt;Devel::REPL&lt;/a&gt; I didn&amp;rsquo;t like it at all, compared to every other interactive shell I&amp;rsquo;ve used (with the notable exception of Oracle&amp;rsquo;s SQLPLUS, which is the worst shell ever) it was an unfriendly toy not worthy of mention. I couldn&amp;rsquo;t go up in history, there was no tab completion, and all in all the default output was ugly no colors or formatting. I noticed in the docs &lt;blockquote&gt;By default the re.pl program looks for (all of the following code goes in this file)&lt;code&gt;$HOME/.re.pl/repl.rc&lt;/code&gt;, and runs whatever code is in there as if you had entered it at the REPL shell yourself.&lt;/blockquote&gt;and that re.pl has plugins, I also noticed some strange syntax and what seemed to be overly complicated code for just getting a few things working. Sure the file supports perl, but do I really want to write full perl programs in an RC file just to use plugins?&lt;br /&gt;&lt;br /&gt;Well fortunately it&amp;rsquo;s not as complex as all that. First thing you want to do is set some good perl defaults.&lt;script src=&#34;http://gist.github.com/487175.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.012; use warnings;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Since this is our private shell might as well get all the current features of perl. Of course if you want to have other modules always accessible load them here to.&lt;br /&gt;&lt;br /&gt;Now lets get some sanity into the shell by using plugins for REPL. It&amp;rsquo;s really much simpler than the docs say. &lt;script src=&#34;http://gist.github.com/487180.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;load_plugin &amp;lsquo;PluginName&amp;rsquo;;&lt;br /&gt;# or&lt;br /&gt;load_plugin qw(&lt;br /&gt;   Plugin&lt;br /&gt;   NextPlugin&lt;br /&gt;   YetAnotherPlugin&lt;br /&gt;   &amp;hellip;&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Wow that&amp;rsquo;s way easier than what any of the documentation describes.&lt;br /&gt;&lt;br /&gt;Ok let&amp;rsquo;s look at some plugins. First if your typing isn&amp;rsquo;t perfect you&amp;rsquo;ve probably noticed that you can&amp;rsquo;t use your up arrow to go back in history, to fix this you can enable Readline support by loading &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL/Plugin/ReadLineHistory.pm&#34;&gt;Devel::REPL::Plugin::ReadlineHistory&lt;/a&gt; like so, &lt;script src=&#34;http://gist.github.com/487193.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;load_plugin qw(&lt;br /&gt;    ReadLineHistory&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; This will allow you to up arrow to go back through lines you&amp;rsquo;ve previously typed, which you can then edit just like your normal *nix shell prompt. This one thing makes re.pl about 100x less annoying.&lt;br /&gt;&lt;br /&gt;But I wish I had some kind of tab completion so I didn&amp;rsquo;t have to type so much. Hey there&amp;rsquo;s a whole set of completion plugins, lets enable those too.&lt;script src=&#34;http://gist.github.com/487197.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;load_plugin qw(                                                                                     &lt;br /&gt;    Completion                                                                                      &lt;br /&gt;    CompletionDriver::INC                                                                           &lt;br /&gt;    CompletionDriver::LexEnv                                                                        &lt;br /&gt;    CompletionDriver::Keywords                                                                      &lt;br /&gt;    CompletionDriver::Methods                                                                       &lt;br /&gt;    ReadLineHistory                                                                                 &lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;So the Keywords Driver allows you to type &lt;code&gt;pri&amp;lt; tab &amp;gt;&lt;/code&gt; and it&amp;rsquo;ll complete &lt;code&gt;print&lt;/code&gt; plus showing you &lt;code&gt;printf&lt;/code&gt; just like your *nix shell. LexEnv will allow you to auto-complete your variable names and so on. There are a few more besides what I mentioned here.&lt;br /&gt;&lt;br /&gt;Next I&amp;rsquo;ll mention the &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL/Plugin/Colors.pm&#34;&gt;Colors&lt;/a&gt; plugin. You may have noticed when you enter code such as &lt;code&gt; my $var = &amp;lsquo;blah&amp;rsquo;; say $var;&lt;/code&gt; you get the output &lt;pre&gt;&lt;code&gt;blah&lt;br /&gt;1&lt;/code&gt;&lt;/pre&gt;or the output text and return code. well if you enable colors the return code is now in green making it easy to distinguish between output and extra info.&lt;br /&gt;&lt;br /&gt;Last but not least I&amp;rsquo;ll mention &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL/Plugin/DumpHistory.pm&#34;&gt;DumpHistory&lt;/a&gt;, enabling DumpHistory allows you to Dump your input history to the screen or to a file.&lt;br /&gt;&lt;br /&gt;Now we have a fully functioning, &amp;lsquo;user&amp;rsquo; friendly, perl shell.&lt;br /&gt;&lt;br /&gt;For your convenience here&amp;rsquo;s my current file &lt;script src=&#34;http://gist.github.com/487205.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.012;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;load_plugin qw(&lt;br /&gt;    Colors&lt;br /&gt;    Completion&lt;br /&gt;    CompletionDriver::INC&lt;br /&gt;    CompletionDriver::LexEnv&lt;br /&gt;    CompletionDriver::Keywords&lt;br /&gt;    CompletionDriver::Methods&lt;br /&gt;    DumpHistory&lt;br /&gt;    History&lt;br /&gt;    LexEnv&lt;br /&gt;    ReadLineHistory&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dist::Zilla vs xenoterracide</title>
      <link>http://blog.xenoterracide.com/post/distzilla-vs-xenoterracide/</link>
      <pubDate>Wed, 28 Apr 2010 21:32:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/distzilla-vs-xenoterracide/</guid>
      <description>&lt;p&gt;&lt;noscript&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=fXW02XmBGQw&#34;&gt;Yes, I am invincible! &lt;/a&gt;&lt;/noscript&gt;&lt;object width=&#34;640&#34; height=&#34;385&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/fXW02XmBGQw&amp;hl=en_US&amp;fs=1&amp;&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/fXW02XmBGQw&amp;hl=en_US&amp;fs=1&amp;&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;640&#34; height=&#34;385&#34;&gt;&lt;/embed&gt;&lt;/object&gt; I solved &lt;a href=&#34;http://xenoterracide.blogspot.com/2010/04/my-new-lovehate-relationship-with.html&#34;&gt;my problem&lt;/a&gt; with &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla/&#34;&gt;Dist::Zilla&lt;/a&gt;. If you agree with me that you should be able to install from your git repository, without requiring your users to have Dist::Zilla installed here&amp;rsquo;s one way of doing it.&lt;br /&gt;&lt;br /&gt;First install &lt;a href=&#34;http://search.cpan.org/dist/Dist-Zilla-Plugin-CopyTo/lib/Dist/Zilla/Plugin/CopyTo.pm&#34;&gt;Dist::Zilla::Plugin::CopyTo&lt;/a&gt;. Now Edit your &lt;code&gt;dist.ini&lt;/code&gt;. Most people probably use one of the Dist::Zilla bundles. Assuming you use Basic here&amp;rsquo;s what you do.&lt;script src=&#34;http://gist.github.com/382978.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;; remove GatherDir from basic so we can specify it seperately&lt;br /&gt;[@Filter]&lt;br /&gt;    bundle = @Basic&lt;br /&gt;    remove = GatherDir&lt;br /&gt;&lt;br /&gt;; specify the where your ungenerated source lives&lt;br /&gt;[GatherDir]&lt;br /&gt;    root = src&lt;br /&gt;; specify where you want the generated source to live&lt;br /&gt;[CopyTo]&lt;br /&gt;    dir = .&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Now as you can see we use GatherDir to get where the source should come from and CopyTo to tell additional places where the output of the script should be sent to. It will still send to the default directory, that&amp;rsquo;s ok, you can just ignore those files. add . to your repo (making sure to add the default generated location to your ignore list) and commit. now if dzil changes any of these you can see it.&lt;br /&gt;&lt;br /&gt;If you wanted to with git you could use a &lt;code&gt;&lt;a href=&#34;http://blog.nuclearsquid.com/writings/git-new-workdir.html&#34;&gt;git-new-workdir&lt;/a&gt;&lt;/code&gt; and another branch and copy to it and commit this stuff to a different branch. I haven&amp;rsquo;t found another way to do it in a seperate branch yet, although someone said it&amp;rsquo;s possible.&lt;br /&gt;&lt;br /&gt;P.S. 1&lt;br /&gt;If &lt;code&gt;dzil&lt;/code&gt; ever gives you some vague error about some util file&amp;hellip; run &lt;code&gt;dzil clean&lt;/code&gt; I don&amp;rsquo;t know why it was doing that to me occasionally through all this but I spent like 8 hours thinking my config was screwed up when the directory just needed to be cleaned.&lt;br /&gt;&lt;br /&gt;P.S. 2 Thanks to rjbs for putting up with my asininity while I asked a lot of questions and ranted.&lt;br /&gt;&lt;br /&gt;P.S 3&lt;br /&gt;My stuff is 99% working now&amp;hellip; I just have a problem where my licensing is wrong :( I&amp;rsquo;ve set it to Perl_5 but it really should be GPL3 and Artistic2 (or whatever those are in Software::License).&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cat that displays tabs at 4 spaces</title>
      <link>http://blog.xenoterracide.com/post/cat-that-displays-tabs-at-4-spaces/</link>
      <pubDate>Sun, 25 Apr 2010 20:26:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/cat-that-displays-tabs-at-4-spaces/</guid>
      <description>&lt;p&gt;So in the tabs vs spaces war I&amp;rsquo;m squarely on the side of use tabs. tabs have meaning. tabs allow people to set there editor&amp;rsquo;s to whatever space display width their eyes are comfortable with as opposed to what yours are (e.g. you like 2 spaces I like 4). However, I&amp;rsquo;ve heard the argument what about when you cat the file, etc. Well it is actually a bit annoying&amp;hellip; so let&amp;rsquo;s fix it.&lt;br /&gt;&lt;br /&gt;my requirements when I type &lt;code&gt;cat foo&lt;/code&gt; if foo has tabs they will be displayed at 4 spaces, and I can still pass all cli options as I normally would to cat. To do this we&amp;rsquo;re going to create a shell function called &lt;code&gt;etcat()&lt;/code&gt;&lt;script src=&#34;http://gist.github.com/378838.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;etcat() {&lt;br /&gt;    env cat &amp;ldquo;$@&amp;rdquo; | env expand -t 4;&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;I&amp;rsquo;d like to note, that in order for this to work you &lt;em&gt;must&lt;/em&gt; use either an absolute path or a call to &lt;code&gt;env cat&lt;/code&gt; because otherwise the shell will attempt to call cat as a recursive function. I put this in my .alias file and sourced it.&lt;br /&gt;&lt;br /&gt;you can now put &lt;code&gt;alias cat=&amp;ldquo;etcat&amp;rdquo;&lt;/code&gt; in your aliases file, or run etcat. This is to protect you from any problems that could otherwise be caused by overriding cat in scripts you don&amp;rsquo;t control (not that I&amp;rsquo;m actually aware of any for this function).&lt;br /&gt;&lt;br /&gt;P.S. Thanks to @greybot on #bash for the incantation as I was having trouble with the &amp;ldquo;$@&amp;rdquo;&lt;br /&gt;&lt;br /&gt;UPDATE:&lt;br /&gt;changed name of function.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bash and konsole</title>
      <link>http://blog.xenoterracide.com/post/bash-and-konsole/</link>
      <pubDate>Tue, 16 Feb 2010 23:06:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/bash-and-konsole/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve had lots of problems using a multi-tab xterminal, for the casual user I&amp;rsquo;m sure they&amp;rsquo;d not even notice them, or think I&amp;rsquo;m silly, but when you spend all day in a shell they become less so. &lt;br /&gt;&lt;br /&gt;&lt;h2&gt;History&lt;/h2&gt;&lt;br /&gt;one of the big problems I&amp;rsquo;ve had is with history. see when you close a shell then it writes the history. well if you have 5 tabs open each with with a super long history they&amp;rsquo;ll write those histories out in the order they close in. basically what happens is all the history saves at once so one of your open shells histories will be before another&amp;rsquo;s and if each has like 50 entries it can be quite a way back. In fact I&amp;rsquo;m sure I&amp;rsquo;ve had it happen where parts of my history was lost. So what do you do? you have to separate them per tab. One way to do this is with gnu screen. I don&amp;rsquo;t like screen&amp;rsquo;s history because it records the output of the terminal as well as the command, so this wasn&amp;rsquo;t a good solution for me. The solution is that each tab must have its own history file. Well how do we do that? before I get to it I have another problem.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;PS1, umask, and default group&lt;/h2&gt;I also have a need to have different settings depending on what I&amp;rsquo;m working on. If I&amp;rsquo;m working on files that need to be read and written to by my web server they need to have a different group and umask. first I solved this by su - to a different user, then I solved it by having different bashrc&amp;rsquo;s but neither fully solved the history problem.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;howto do it&lt;/h2&gt;first you have to have one konsole profile for each of the different settings you need. so I have one for web development called webdev. Then you have to add an environment variable to it I&amp;rsquo;m going to call it KONSOLE_PROFILE and set that to whatever your profile is called. Neither name really matters so long as they don&amp;rsquo;t conflict with others. Then you need to code your bashrc (or other shell to work with it). I have a shortened sample bashrc that you can use in a &lt;a href=&#34;http://gist.github.com/306270&#34;&gt;gist&lt;/a&gt;&lt;br /&gt;&lt;script src=&#34;http://gist.github.com/306270.js&#34;&gt;&lt;/script&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding a new group to an open shell without logging in and out</title>
      <link>http://blog.xenoterracide.com/post/adding-a-new-group-to-an-open-shell-without-logging-in-and-out/</link>
      <pubDate>Sun, 23 Aug 2009 01:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/adding-a-new-group-to-an-open-shell-without-logging-in-and-out/</guid>
      <description>&lt;p&gt;Most Unix users believe it&amp;rsquo;s impossible to add a group that was recently added to your user account without logging in and logging out. If you&amp;rsquo;re running X and need to give your gui new permissions (like dolphin/konqueoror) this may be true, for the most part. I don&amp;rsquo;t know how to change it for those processes. However, if you need to change it for a shell prompt it&amp;rsquo;s easy. You merely execute the command &lt;code&gt;newgrp &lt;newgroupname&gt;&lt;/code&gt; in an open shell prompt and that prompt will now be loaded with the new group. I believe it also changes the default group that shell is running as. So if you run &lt;code&gt;newgrp http; touch test.txt&lt;/code&gt; your file will be created with the group http instead of whatever your default is. You can change your group back to the default by using the &lt;code&gt;sg&lt;/code&gt; command.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PostgreSQL \edit and Syntax Highlighting</title>
      <link>http://blog.xenoterracide.com/post/postgresql-edit-and-syntax-highlighting/</link>
      <pubDate>Sat, 29 Nov 2008 10:35:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/postgresql-edit-and-syntax-highlighting/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve ever used \edit with PostgreSQL you&amp;rsquo;ve probably noticed that it&amp;rsquo;s not using syntax highlighting that your favorite editor most likely supports. I&amp;rsquo;ve wondered why this is for a while, Postgres uses vim on my system which supports robust highlighting among other things.&lt;br /&gt;&lt;br /&gt;I had a few things suggested to me, such as setting putting settings in my .vimrc, most of which would have forced filetype=sql on files that weren&amp;rsquo;t sql, and would have been active outside of psql.&lt;br /&gt;&lt;br /&gt;When you have a question what&amp;rsquo;s the first thing you should do? RTFM. The answer was in the man page all along.&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;br /&gt;  Tip:  psql searches the environment variables PSQL_EDITOR,&lt;br /&gt;        EDITOR, and VISUAL (in that order) for an editor  to  use.&lt;br /&gt;        If  all  of  them  are  unset, vi is used on Unix systems,&lt;br /&gt;        notepad.exe on Windows systems.&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;so how does this solve the problem? well the only program that uses PSQL_EDITOR is Postgres, and most editors allow you to specify options at startup. In the case of vim, if you want to have use filetype=sql for the default filetype for \edit all you have to do is &lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;export PSQL_EDITOR=&amp;lsquo;vim -c &amp;ldquo;set ft=sql&amp;rdquo;&amp;rsquo;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;of course if you don&amp;rsquo;t use vim or you want to set some different options you&amp;rsquo;ll have to read the documentation for your editor, or operating system.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making secure recoverable passwords</title>
      <link>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords/</link>
      <pubDate>Sun, 27 Apr 2008 14:08:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-secure-recoverable-passwords/</guid>
      <description>&lt;p&gt;&lt;p&gt;For the basic you need a calculator with a decimal to hex function. Your OS should have one built in (scientific mode), many calculator&amp;rsquo;s do to. For advanced you&amp;rsquo;ll need special hashing software, suggestions for it can be found below.&lt;/p&gt;&lt;br /&gt;&lt;table&gt;&lt;br /&gt;  &lt;tr&gt;&lt;br /&gt;    &lt;th&gt;Windows&lt;/th&gt;&lt;br /&gt;    &lt;td&gt;&lt;a href=&#34;http://www.slavasoft.com/hashcalc/index.htm&#34;&gt;HashCalc&lt;/a&gt;&lt;/td&gt;&lt;br /&gt;  &lt;/tr&gt;&lt;br /&gt;  &lt;tr&gt;&lt;br /&gt;    &lt;th&gt;Macintosh&lt;/th&gt;&lt;br /&gt;    &lt;td&gt;&lt;a href=&#34;http://sourceforge.net/projects/machash&#34;&gt;MacHash&lt;/a&gt;&lt;/td&gt;&lt;br /&gt;  &lt;/tr&gt;&lt;br /&gt;  &lt;tr&gt;&lt;br /&gt;    &lt;th&gt;Linux/(&lt;em&gt;nix)&lt;/th&gt;&lt;br /&gt;    &lt;td&gt;&lt;a href=&#34;http://www.gnu.org/software/coreutils/&#34;&gt;Gnu Coreutils&lt;/a&gt;&lt;/td&gt;&lt;br /&gt;  &lt;/tr&gt;&lt;br /&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;Now that we have the software we need. You&amp;rsquo;ll need an 8 digit (minimum) number that you won&amp;rsquo;t forget. Guess what numbers fit the bill perfectly. Dates. All date&amp;rsquo;s can be expressed in 8 digits, but they require a year. The date we&amp;rsquo;ll use (for example) is Linux&amp;rsquo;s Birthday. August 25, 1991 (I recommend something more personal like your anniversary or birthday).&lt;br /&gt;&lt;br /&gt;So we are going to write down the date we picked for the password (note we aren&amp;rsquo;t done yet).&lt;br /&gt;&lt;br /&gt;something like&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Linux BDay&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;Date&amp;rsquo;s can be &lt;a href=&#34;http://en.wikipedia.org/wiki/Calendar_date&#34;&gt;formatted&lt;/a&gt; in several ways, Just make sure to remember the numeric format you use. For our example we&amp;rsquo;ll use the &lt;a href=&#34;http://en.wikipedia.org/wiki/ISO_8601&#34;&gt;ISO 8601&lt;/a&gt; standard. Which leaves our example date in format, YYYYMMDD, looking like 19910825.&lt;br /&gt;&lt;br /&gt;So let&amp;rsquo;s make a note of the format (to throw people off use a diff format say DDMMYYYY).&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Linux Bday ISO&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;whatever you do make sure YOU understand your note, but that it isn&amp;rsquo;t easily understandable by OTHERS.&lt;br /&gt;&lt;br /&gt;alright&amp;hellip; now we&amp;rsquo;re going to take our number and make it hex. So open your calculator enter 19910825, then use the convert to hex function and you should have this 12FD0A9 (if you aren&amp;rsquo;t using our example you may have a different &amp;lsquo;number&amp;rsquo;, or it may not be displayed exactly like this, display&amp;rsquo;s vary between calculators). This is your first basic password. you can use it as is, or you can make it a bit more secure by using one of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Hexadecimal&#34;&gt;hexadecimal notations&lt;/a&gt;. example: 0x12FD0A9. You can add a word or funny characters to either side of it to make it stronger too, just make sure to note anything you add to it.&lt;br /&gt;&lt;br /&gt;Due to a &lt;a href=&#34;http://en.wikipedia.org/wiki/Rainbow_table&#34;&gt;Rainbow Table&lt;/a&gt; database you should make sure your password is at least 8 characters but I would recommend no less than 9.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;But your hex number is less than 9 and what do the programs you listed have to do with this?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;good point&amp;hellip; let&amp;rsquo;s make something a bit more crypto and less predictable.&lt;br /&gt;&lt;br /&gt;Take the same date and plug it in to your hash creator, I&amp;rsquo;m going to use an md5sum for my first example.&lt;br /&gt;&lt;br /&gt;if you put 19910825 into md5sum you get 6f9822851dfc6c1045c6fef827e5d729 (for you nix people enter the number like this &amp;lsquo;echo -n &amp;ldquo;19910825&amp;rdquo; | md5sum&amp;rsquo;&lt;br /&gt;on the cli otherwise you might end up with newline issues because different operating systems use different newlines).&lt;br /&gt;&lt;br /&gt;so lets say you need an 12 character password you could just use the first 12 characters of your hash, example: 6f9822851dfc if you need an 8, example: 6f982285 ,etc etc.&lt;br /&gt;&lt;br /&gt;if a stupid &amp;lsquo;cracker&amp;rsquo; or black hat hacker get his hands on your actual password he might think he hasn&amp;rsquo;t decrypted it fully because it&amp;rsquo;ll look like a hash or memory error. want to throw people off even more just remember you aren&amp;rsquo;t using the first 8 but the first 8 after the first 2 example 9822851d.&lt;br /&gt;&lt;br /&gt;Or use a different has like sha1 or sha512.&lt;br /&gt;&lt;br /&gt;Ultimately you could make your note to yourself like this&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Sha1LinuxBDayISO&lt;/code&gt; to a non IT person this will look like a random password as is.&lt;br /&gt;&lt;br /&gt;Also the cryptographic hashes take words too. So you could do your name. Caleb into an md5sum is&lt;br /&gt;&lt;br /&gt;9ced73b8525de1db8e232ad575baa9dd&lt;br /&gt;&lt;br /&gt;but it&amp;rsquo;s different if I use caleb.&lt;br /&gt;&lt;br /&gt;2f0154d7db348840676529dd72f1c034&lt;br /&gt;&lt;br /&gt;if you always enter them the same you will always get the same result back. I guarantee after a couple days typing your new password you won&amp;rsquo;t need to have it written down. If you work at a place that requires things like monthly changes.. just put the date you changed it on in to create the hash. Just make sure no one knows but the number/word(s) you used and the hash you used or they will be able to duplicate your password. Of course you&amp;rsquo;re smart and you added somthing to it right? like a symbol (!@#$%^&lt;/em&gt;{}|:&amp;rdquo;&amp;lt;&amp;gt;?[]\;&amp;lsquo;,./) will all work find if the auth methods allow it.&lt;br /&gt;&lt;br /&gt;have fun never having a hard time creating passwords again.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>busybox vi</title>
      <link>http://blog.xenoterracide.com/post/busybox-vi/</link>
      <pubDate>Tue, 22 Apr 2008 09:07:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/busybox-vi/</guid>
      <description>&lt;p&gt;although there isn&amp;rsquo;t much to say about it, it&amp;rsquo;s even more limited than the original vi. If you are like me and have been using a vi clone for so long that other editor&amp;rsquo;s are unimaginable. I suggest trying &lt;code&gt;busybox vi&lt;/code&gt; on your *nix cli. At least until you can install vi(m).&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iptables for the average desktop user</title>
      <link>http://blog.xenoterracide.com/post/iptables-for-the-average-desktop-user/</link>
      <pubDate>Tue, 08 Apr 2008 23:20:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/iptables-for-the-average-desktop-user/</guid>
      <description>&lt;p&gt;The Best guide for learning the basics of iptables is here&lt;br /&gt;&lt;a href=&#34;http://www.gentoo.org/doc/en/articles/linux-24-stateful-fw-design.xml&#34;&gt;Linux 2.4 Stateful firewall design&lt;/a&gt; for the most part it continues to apply to the 2.6 kernel. The only things that won&amp;rsquo;t apply to your linux system will be: emerge if you aren&amp;rsquo;t on gentoo, and the kernel options which have changed since 2.4 and even a couple of times during 2.6.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m not going to cover those here. If you need help building your kernel or installing iptables I suggest that you consult with either the iptables home page or even better your distribution. Chances are it is already installed, and may even be configured.&lt;br /&gt;&lt;br /&gt;First Let&amp;rsquo;s see if we have any rules.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;The following commands require root access, and can be run in a root shell, with sudo, or in a shell script by root&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;iptables -L -v&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;your output should look something like this if you have no rules&lt;br /&gt;&lt;code&gt;&lt;br /&gt;Chain INPUT (policy ACCEPT 211 packets, 27413 bytes)&lt;br /&gt; pkts bytes target     prot opt in     out     source               destination &lt;br /&gt;&lt;br /&gt;Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)&lt;br /&gt; pkts bytes target     prot opt in     out     source               destination &lt;br /&gt;&lt;br /&gt;Chain OUTPUT (policy ACCEPT 312 packets, 211K bytes)&lt;br /&gt; pkts bytes target     prot opt in     out     source               destination&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;If it looks different no worries it just means that your distro has already installed rules.&lt;br /&gt;&lt;br /&gt;If so make sure BEFORE CONTINUING to flush them. FIRST check to make sure your policies are set to accept (you can see that in caps above) if they are anything else run &lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;iptables -P INPUT ACCEPT&lt;br /&gt;iptables -P FORWARD ACCEPT&lt;br /&gt;iptables -P OUTPUT ACCEPT&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;now that your policies are clean you should flush the rules&lt;br /&gt;&lt;code&gt;&lt;br /&gt;iptables -F #flush all rules&lt;br /&gt;iptables -X #delete all chains&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;all right now hopefully you are at a clean state. If you have ever used iptables for nat you may not be, but that is beyond the scope of this article.&lt;br /&gt;&lt;br /&gt;Now we need to create rules, since this is for normal deskop users you shouldn&amp;rsquo;t have any services listening, also you shoudn&amp;rsquo;t be routing anything.&lt;br /&gt;&lt;br /&gt;to disable routing with iptables (I&amp;rsquo;m ignoring the kernel setting for this)&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;iptables -P FORWARD DROP &lt;br /&gt;&lt;/code&gt;&lt;br /&gt;# set all forwarded packets to go bye bye if they reach the end of the chain&lt;br /&gt;&lt;br /&gt;the output chain is good on accept for the normal user, only a masochist would want to write rules for it. You generally should trust your outbound traffic.&lt;br /&gt;&lt;br /&gt;Now to secure input&lt;br /&gt;&lt;code&gt;&lt;br /&gt;iptables -A INPUT -m state &amp;ndash;state INVALID -j DROP &lt;br /&gt;iptables -A INPUT -m state &amp;ndash;state RELATED,ESTABLISHED -j ACCEPT&lt;br /&gt;iptables -A INPUT -i lo -j ACCEPT&lt;br /&gt;iptables -P INPUT DROP &lt;br /&gt;&lt;/code&gt;&lt;br /&gt;#this rule drops all packets with a bad state&lt;br /&gt;#accept any packets that have something to do with ones we&amp;rsquo;ve sent on outbound&lt;br /&gt;#accept any packets coming or going on localhost (this can be very important&lt;br /&gt;# set all packets not matching these rules to drop&lt;br /&gt;&lt;br /&gt;Various linux distro&amp;rsquo;s may require you to do something special to save these rules so that they survive a reboot. consult your distributions community.&lt;br /&gt;&lt;br /&gt;If you have rules that you want to keep but also want to use mine I suggest putting mine first, you should do the -A rules in reverse but use a -I for insert.&lt;br /&gt;&lt;br /&gt;When dealing with iptables always take care when applying &lt;code&gt;iptables -P DROP&lt;/code&gt;. You can be locked out of the machine or the internet if you apply this without the appropriate rules in place.&lt;br /&gt;&lt;br /&gt;That&amp;rsquo;s it. your desktop should be secure from an attacker that you aren&amp;rsquo;t allowing in. There are of course other things that you can do to make it even more secure but those are beyond the scope of this tutorial.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>really nice</title>
      <link>http://blog.xenoterracide.com/post/really-nice/</link>
      <pubDate>Wed, 02 Apr 2008 09:36:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/really-nice/</guid>
      <description>&lt;p&gt;if you are using the cfq io scheduler in linux you can use ionice to nice your io. so to really nice something you would do&lt;br /&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;nice -n 19 ionice -c 3 programname&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;this may not be the best idea on all programs but it works. If a program is beating your hd and cpu and you don&amp;rsquo;t want it to run this when starting it.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>