<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Question on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/question/index.xml</link>
    <description>Recent content in Question on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/question/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Teaching Perl - Week 2 ( part2 )</title>
      <link>http://blog.xenoterracide.com/post/teaching-perl---week-2--part2-/</link>
      <pubDate>Sun, 25 Apr 2010 18:41:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/teaching-perl---week-2--part2-/</guid>
      <description>&lt;p&gt;This part2 was prompted by &lt;a href=&#34;http://www.modernperlbooks.com/mt/2010/04/state-and-the-syntax-of-encapsulation.html&#34;&gt;Chromatic&amp;rsquo;s post on state&lt;/a&gt;. I&amp;rsquo;d never heard of &lt;code&gt;state&lt;/code&gt; before, and it&amp;rsquo;s &lt;a href=&#34;http://perldoc.perl.org/functions/state.html&#34;&gt;documentation&lt;/a&gt; is poor. Let&amp;rsquo;s take a look at how &lt;code&gt;state&lt;/code&gt; could affect our game.&lt;script src=&#34;http://gist.github.com/378758.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use feature qw( say state switch );&lt;br /&gt;&lt;br /&gt;say &amp;lsquo;welcome&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;# generate the winning number between 1 and 10&lt;br /&gt;# see perlfaq4 for algorithm details&lt;br /&gt;my $winning_num = 1 + int( rand( (10-1)+1 ) );&lt;br /&gt;&lt;br /&gt;until ( $winning&lt;em&gt;num == state $guess ) {&lt;br /&gt;    say &amp;lsquo;Guess a number between 1 and 10: &amp;lsquo;;&lt;br /&gt;    $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;    # check to see if we have a winner, or the guess is to high, or low.&lt;br /&gt;    given( $guess ) {&lt;br /&gt;        when ( $&lt;/em&gt; &amp;gt; $winning&lt;em&gt;num ) {&lt;br /&gt;            say &amp;lsquo;Too high&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        when ( $&lt;/em&gt; &amp;lt; $winning_num ) {&lt;br /&gt;            say &amp;lsquo;Too low&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        when ( $winning_num ) {&lt;br /&gt;            say &amp;lsquo;You Win!&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;say &amp;lsquo;Game over!&amp;rsquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;As you can see this allows us to make our $guess variable lexically scoped, meaning it&amp;rsquo;s contained within the loop. This however generates some warnings: &lt;code&gt;Use of uninitialized value $guess in numeric eq (==) at ./game.pl line 14.&lt;/code&gt; and if you enter non-numeric input &lt;code&gt;Argument &amp;ldquo;l\n&amp;rdquo; isn&amp;rsquo;t numeric in numeric eq (==) at ./game.pl line 14, &lt;stdin&gt; line 1.&lt;/code&gt;. Both are completely fixable, but lets fix the uninitialized first.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://gist.github.com/378763.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use feature qw( say state switch );&lt;br /&gt;&lt;br /&gt;say &amp;lsquo;welcome&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;# generate the winning number between 1 and 10&lt;br /&gt;# see perlfaq4 for algorithm details&lt;br /&gt;my $winning_num = 1 + int( rand( (10-1)+1 ) );&lt;br /&gt;&lt;br /&gt;until ( $winning&lt;em&gt;num == ( state $guess = 0 ) ) {&lt;br /&gt;    say &amp;lsquo;Guess a number between 1 and 10: &amp;lsquo;;&lt;br /&gt;    $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;    # check to see if we have a winner, or the guess is to high, or low.&lt;br /&gt;    given( $guess ) {&lt;br /&gt;        when ( $&lt;/em&gt; &amp;gt; $winning&lt;em&gt;num ) {&lt;br /&gt;            say &amp;lsquo;Too high&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        when ( $&lt;/em&gt; &amp;lt; $winning_num ) {&lt;br /&gt;            say &amp;lsquo;Too low&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        when ( $winning_num ) {&lt;br /&gt;            say &amp;lsquo;You Win!&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;say &amp;lsquo;Game over!&amp;rsquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; So all we&amp;rsquo;ve had to change is adding parenthesis around &lt;code&gt;state&lt;/code&gt; and assign it to a value. If we had used a &lt;code&gt;my&lt;/code&gt; declaration it would reassign to 0 every time and we&amp;rsquo;d never match the &lt;code&gt;$winning_num&lt;/code&gt;. But since &lt;code&gt;state&lt;/code&gt; will only ever initialize once we don&amp;rsquo;t have that problem. We still have our problem if we enter a character though, let&amp;rsquo;s sanitize that input.&lt;script src=&#34;http://gist.github.com/378768.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use feature qw( say state switch );&lt;br /&gt;&lt;br /&gt;say &amp;lsquo;welcome&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;# generate the winning number between 1 and 10&lt;br /&gt;# see perlfaq4 for algorithm details&lt;br /&gt;my $winning_num = 1 + int( rand( (10-1)+1 ) );&lt;br /&gt;&lt;br /&gt;until ( $winning&lt;em&gt;num == ( state $guess = 0 ) ) {&lt;br /&gt;    say &amp;lsquo;Guess a number between 1 and 10: &amp;lsquo;;&lt;br /&gt;    $guess = readline(*STDIN);&lt;br /&gt;&lt;br /&gt;    # check to see if we have a winner, or the guess is to high, or low.&lt;br /&gt;    given( $guess ) {&lt;br /&gt;        # sanitize input&lt;br /&gt;        # this must be first otherwise it won&amp;rsquo;t work right&lt;br /&gt;        when ( $&lt;/em&gt; !~ /[[:digit:]]/ ) {&lt;br /&gt;            say &amp;lsquo;not a number&amp;rsquo;;&lt;br /&gt;            # set $guess to 0 so we don&amp;rsquo;t have a numerical comparison warning&lt;br /&gt;            $guess = 0;&lt;br /&gt;        }&lt;br /&gt;        when ( $_ &amp;gt; $winning&lt;em&gt;num ) {&lt;br /&gt;            say &amp;lsquo;Too high&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        when ( $&lt;/em&gt; &amp;lt; $winning_num ) {&lt;br /&gt;            say &amp;lsquo;Too low&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        when ( $winning_num ) {&lt;br /&gt;            say &amp;lsquo;You Win!&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;say &amp;lsquo;Game over!&amp;rsquo;;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;So in order to fix the &amp;lsquo;not a numerical comparison&amp;rsquo; issue we check &lt;code&gt;$guess&lt;/code&gt; to see if it&amp;rsquo;s a digit with a regular expression. If it isn&amp;rsquo;t a digit we set it to 0 which is an invalid guess anyways, but fixes the warning. This actually fixes two bugs. Before if you entered a letter it would tell you that it was too low (which I don&amp;rsquo;t actually understand, because aren&amp;rsquo;t characters &amp;gt; numbers? if someone on Iron Man could explain it in a comment.)&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>