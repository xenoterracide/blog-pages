<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tt on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/tt/index.xml</link>
    <description>Recent content in Tt on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/tt/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using ref to fix 5 year old bug</title>
      <link>http://blog.xenoterracide.com/post/using-ref-to-fix-5-year-old-bug/</link>
      <pubDate>Fri, 04 Jun 2010 12:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/using-ref-to-fix-5-year-old-bug/</guid>
      <description>&lt;p&gt;So I haven&amp;rsquo;t been hacking perl for 5 (or more) years but I forked &lt;a href=&#34;http://search.cpan.org/dist/Template-ShowStartStop/lib/Template/ShowStartStop.pm&#34;&gt;Template::ShowStartStop&lt;/a&gt; from &lt;a href=&#34;http://search.cpan.org/dist/Template-Timer/Timer.pm&#34;&gt;Template::Timer&lt;/a&gt; which is that old. since I forked it &lt;a href=&#34;http://github.com/petdance/template-timer/blob/master/t/eval.t&#34;&gt;this test&lt;/a&gt; has bugged me since I didn&amp;rsquo;t really understand the test, the section of code it referred to or the actual problem.&lt;br /&gt;&lt;br /&gt;This is an approximation of the error you&amp;rsquo;d get.&lt;br /&gt;&lt;blockquote&gt;Couldn&amp;rsquo;t render template &amp;ldquo;undef error - Can&amp;rsquo;t call method &amp;ldquo;name&amp;rdquo; on&lt;br /&gt;unblessed reference at /usr/lib/perl5/site_perl/5.8.0/Template/Timer.pm line&lt;br /&gt;66. &amp;ldquo;&lt;/blockquote&gt;This error is actually a copy from &lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=15457&#34;&gt;bug #15457&lt;/a&gt; but I happen to know it&amp;rsquo;s basically the same error you&amp;rsquo;d get with an eval.&lt;br /&gt;&lt;br /&gt;So what&amp;rsquo;s the problem? can you spot it? ( original timer code )&lt;script src=&#34;http://gist.github.com/424808.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;my $template =&lt;br /&gt;    ref($what) eq &amp;lsquo;ARRAY&amp;rsquo;&lt;br /&gt;        ? join( &amp;lsquo; + &amp;lsquo;, @{$what} )&lt;br /&gt;        : ref($what)&lt;br /&gt;            ? $what-&amp;gt;name&lt;br /&gt;            : $what;&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;Ugh! That&amp;rsquo;s ugly, let&amp;rsquo;s take a cue from &lt;a target=&#34;_blank&#34;  href=&#34;http://www.amazon.com/Perl-Best-Practices-Damian-Conway/dp/0596001738?ie=UTF8&amp;tag=xenotsblog-20&amp;link_code=btl&amp;camp=213689&amp;creative=392969&#34;&gt;Perl Best Practices&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=btl&amp;camp=213689&amp;creative=392969&amp;o=1&amp;a=0596001738&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important; padding: 0px !important&#34; /&gt; and format it as a tabular ternary instead.&lt;script src=&#34;http://gist.github.com/424810.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;my $template&lt;br /&gt;  # conditional           # set $template to&lt;br /&gt;  = ref($what) eq &amp;lsquo;ARRAY&amp;rsquo; ? join( &amp;lsquo; + &amp;lsquo;, @{$what} )&lt;br /&gt;  : ref($what)            ? $what-&amp;gt;name&lt;br /&gt;  :                         $what&lt;br /&gt;  ;&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt; Now we can read it&amp;hellip; &lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;https://rt.cpan.org/Public/Bug/Display.html?id=13225&#34;&gt;Bug #13225&lt;/a&gt; suggests a problem with eval and the following fix (which I translated into something more similar to the current code).&lt;script src=&#34;http://gist.github.com/424817.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;my $template&lt;br /&gt;  # conditional           # set $template to&lt;br /&gt;  = ref($what) eq &amp;lsquo;ARRAY&amp;rsquo;  ? join( &amp;lsquo; + &amp;lsquo;, @{$what} )&lt;br /&gt;  : ref($what) eq &amp;lsquo;SCALAR&amp;rsquo; ? &amp;lsquo;(evaluated block)&amp;rsquo;&lt;br /&gt;  : ref($what)             ? $what-&amp;gt;name&lt;br /&gt;  :                          $what&lt;br /&gt;  ;&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;well that should fix our eval problem&amp;hellip; since an eval will be  a reference of type SCALAR. but what happens if it&amp;rsquo;s a reference not of type ARRAY or SCALAR? then we&amp;rsquo;ll still get that error.&lt;br /&gt;&lt;br /&gt;According to the &lt;a href=&#34;http://perldoc.perl.org/functions/ref.html&#34;&gt;ref function documentation&lt;/a&gt;&lt;blockquote&gt;If the referenced object has been blessed into a package, then that package name is returned instead. You can think of ref as a typeof operator.&lt;/blockquote&gt;what this means is I could check what type of object it was that I was normally getting. In order to do this I put $what into the output I get. I found out that most of the time $what is a Template::Document. So now I optimized my code for that situation.&lt;script src=&#34;http://gist.github.com/424830.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;my $template&lt;br /&gt;  # conditional                        # set $template to&lt;br /&gt;  = ref($what) eq &amp;lsquo;Template::Document&amp;rsquo; ? $what-&amp;gt;name&lt;br /&gt;  : ref($what) eq &amp;lsquo;ARRAY&amp;rsquo;              ? join( &amp;lsquo; + &amp;lsquo;, @{$what} )&lt;br /&gt;  : ref($what) eq &amp;lsquo;SCALAR&amp;rsquo;             ? &amp;lsquo;(evaluated block)&amp;rsquo;&lt;br /&gt;  :                                      $what&lt;br /&gt;  ;&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;See the thing is that we really don&amp;rsquo;t want $what-&amp;gt;name method to be called unless it&amp;rsquo;s a Template::Document which actually has that method. I&amp;rsquo;m not sure that I&amp;rsquo;m not missing any tests at this point, but I&amp;rsquo;m pretty confident that, at least, this kind of bug won&amp;rsquo;t crash my module anymore.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing TT Template&#39;s</title>
      <link>http://blog.xenoterracide.com/post/testing-tt-templates/</link>
      <pubDate>Thu, 03 Jun 2010 21:18:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/testing-tt-templates/</guid>
      <description>&lt;p&gt;So the poorly made patch the other day converted my Test::More test to use &lt;a href=&#34;http://search.cpan.org/dist/Template-Toolkit/lib/Template/Test.pm&#34;&gt;Template::Test&lt;/a&gt; which removed quite a bit of code from the test itself. I hadn&amp;rsquo;t seen Template::Test beforehand.&lt;br /&gt;&lt;br /&gt;Here&amp;rsquo;s a very simple example of a test you could write to make sure a template is being output ok.&lt;script src=&#34;http://gist.github.com/424771.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;code&gt;&lt;pre&gt;#!perl&lt;br /&gt;use strict;&lt;br /&gt;use warnings;&lt;br /&gt;use Template::Test;&lt;br /&gt;&lt;br /&gt;my $tt = Template-&amp;gt;new();&lt;br /&gt;&lt;br /&gt;my $vars = {&lt;br /&gt;        var =&amp;gt; &amp;lsquo;world&amp;rsquo;,&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;test_expect(*DATA, $tt, $vars);&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;DATA&lt;/strong&gt;&lt;br /&gt;&amp;ndash;test&amp;ndash;&lt;br /&gt;hello [% var %]&lt;br /&gt;&amp;ndash;expect&amp;ndash;&lt;br /&gt;hello world&lt;/pre&gt;&lt;/code&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;If you want more examples I now have quite a few for &lt;a href=&#34;http://search.cpan.org/dist/Template-ShowStartStop/lib/Template/ShowStartStop.pm&#34;&gt;Template::ShowStartStop&lt;/a&gt; which you can see in the &lt;a href=&#34;http://github.com/xenoterracide/Template-ShowStartStop/tree/master/t/&#34;&gt;Test directory of the master branch&lt;/a&gt;.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>