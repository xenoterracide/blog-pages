<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Oriented Design on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/object-oriented-design/index.xml</link>
    <description>Recent content in Object Oriented Design on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/object-oriented-design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Single Repository, one Aggregate</title>
      <link>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</link>
      <pubDate>Thu, 02 Jul 2015 02:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; as defined in &lt;a href=&#34;http://dddcommunity.org/book/evans_2003/&#34;&gt;Domain Driven Design&lt;/a&gt;&amp;nbsp;manages a single &lt;a href=&#34;http://martinfowler.com/bliki/DDD_Aggregate.html&#34;&gt;Aggregate&lt;/a&gt;. An aggregate may contain many entities, and value objects, but will have a single object as its root. Many of the Dao and even now some of the Repository implementations I see do not follow this, they are more likely to have a Repository per entity, than a Repository per aggregate, and of course in some cases this is required for various reasons.&lt;br /&gt;&lt;br /&gt;Ok, to start out we need our POM (or you can use Gradle), which configures our dependencies and plugins. We use a starter for Spring Data JPA, which pulls in Spring Data JPA and all of it&amp;rsquo;s suggested dependencies such as Hibernate. We also need a database and a database driver so we configure H2. Since we are inheriting from the Spring Platform BOM we don&amp;rsquo;t need to specify versions as it can configure them for us. We of course want to use Java 8 and specify our Application class so we will be able to run &lt;code&gt;mvn spring-boot:run&lt;/code&gt; at the end. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/pom.xml?embed=t&#34;&gt;&lt;/script&gt; &lt;br /&gt;Next Let&amp;rsquo;s configure our application to show the SQL that it is running, this isn&amp;rsquo;t required. You need to put &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/resources/application.properties?embed=t&#34;&gt;&lt;/script&gt; Now we need to create our Entities, let&amp;rsquo;s start at the entity Bar that is the deepest part of the Aggregate root. It extends &lt;a href=&#34;http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractPersistable.html&#34;&gt;AbstractPersistable&lt;/a&gt;&amp;nbsp;so that we get an Auto Incrementing or Sequenced id. We also use AbstractPeristable because for our task we require that our entities implement &lt;a href=&#34;http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Persistable.html&#34;&gt;Persistable&lt;/a&gt;, as it changes the behavior of save on the repository if your objects are new.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Bar.java?embed=t&#34;&gt;&lt;/script&gt;Next let&amp;rsquo;s create Foo, it is much the same, but you&amp;rsquo;ll notice the &lt;code&gt;@OneToOne&lt;/code&gt; that specifies &lt;code&gt;CascadeType.ALL&lt;/code&gt;. This is important as without it persist and merge won&amp;rsquo;t work.&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Foo.java?embed=t&#34;&gt;&lt;/script&gt; Alright, let&amp;rsquo;s put together our repository, we could just make a CrudRepository, but let&amp;rsquo;s show off some paging too. You&amp;rsquo;ll notice that you have to pass the Entity and it&amp;rsquo;s Primary Key identifier type to the PagingAndSorting interface, the single method that we specify will find all the Foos by the nested baz property, using a &lt;code&gt;LIKE &amp;lsquo;%mystring%&amp;rsquo;&lt;/code&gt; query. Spring data will parse this interface and make an implementation for you automatically.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/FooRepo.java?embed=t&#34;&gt;&lt;/script&gt; You can create other lastly we do our Application, which is not designed to be a web server (it will exit immediately). The &lt;code&gt;@SpringBootApplication&lt;/code&gt; makes Spring Boot able to start the app and scan for components appropriately. We also Enable JPA repositories using the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt;. It&amp;rsquo;s main method (not recommended to prepopulate data this way), creates and save several Foos with nested bars, then I demonstrate a way that you can page the saved objects 2 at a time whilst filtering by that like statement, only 3 of the 4 entities saved will return. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Application.java?embed=t&#34;&gt;&lt;/script&gt; &lt;a href=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist&#34;&gt;The full source is available here.&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 ways of implementing Polymorphism</title>
      <link>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</link>
      <pubDate>Tue, 07 Oct 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</guid>
      <description>&lt;p&gt;&lt;p&gt;Firstly what is Polymorphism and why is it so important? Polymorphism is the ability to have a many implementations of a behavior that conform to a single interface. Put in perhaps slightly better, pragmatic terms, you have one implementations of a caller, that can operate on many implementations of a &amp;ldquo;parameter&amp;rdquo;, without conditionals, or changing the callers code. For instance the following, pseudo?, Perl 6-ism &lt;code&gt;method handler( $obj ) { $obj.execute() }&lt;/code&gt;. As you can imagine &lt;code&gt;$obj&lt;/code&gt; can be anything that has an execute method. For this Article I&amp;rsquo;ll give you two implementations and one caller, in either Perl &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt; or Java &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;, boilerplate will be excluded for brevity.&lt;/p&gt;&lt;h1&gt;Inheritance&lt;/h1&gt;&lt;h2&gt;Single Inheritance&lt;/h2&gt;&lt;p&gt;Single inheritance is the most simple and well understood form of Polymorphism. &lt;script src=&#34;https://gist.github.com/xenoterracide/1e5c4cc8cb9f156594a6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Multiple Inheritance&lt;/h2&gt;&lt;p&gt;Multiple inheritance is often considered dangerous, is unavailable in Java and suffers from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&#34;&gt;The diamond problem&lt;/a&gt;. You should really only use this with a &lt;a href=&#34;https://en.wikipedia.org/wiki/C3_linearization&#34;&gt;C3 MRO&lt;/a&gt;. &lt;h1&gt;Flat Composition&lt;/h1&gt;&lt;h2&gt;Interfaces&lt;/h2&gt;&lt;p&gt;Interfaces are probably the third most common form of Polymorhism, they are essentially codified contracts. &lt;script src=&#34;https://gist.github.com/xenoterracide/22661c96ec03bdc5416d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Traits&lt;/h2&gt;&lt;p&gt;These are just the same as Interfaces in Java 8 you say? well yes, that&amp;rsquo;s what Java 8 calls them, &lt;a href=&#34;https://en.wikipedia.org/wiki/Trait_(computer_programming)&#34;&gt;Traits are a list of methods flattened into a class, but they cannot access state&lt;/a&gt;. This basically describes what Java 8 is doing, as you can&amp;rsquo;t access properties from within the interface, well.. at least not unless you do what I show here, which is basically access state through getters and setters. &lt;script src=&#34;https://gist.github.com/xenoterracide/3bc3898ba2c0481d82a1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Mixins&lt;/h2&gt;&lt;p&gt;Mixins are basically traits that can access state, though some mixins (AFAIK Ruby) are implemented sneakily as multiple inheritance, rather than flat list composition. IMHO, Mixins should be implemented using flat list composition. &lt;script src=&#34;https://gist.github.com/xenoterracide/7cf9a94e953a7226b929.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Typeless&lt;/h1&gt;&lt;h2&gt;Duck Typing&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;has $!log&lt;/code&gt; in the Mixin is actually a pretty good example of duck typing, we don&amp;rsquo;t check for debug we are just calling it. Java is basically incapable of doing this, except, you can treat everything as an Object (if that&amp;rsquo;s all you need).&lt;/p&gt;&lt;h2&gt;Function References&lt;/h2&gt;&lt;p&gt;references to functions may or may not be allowed to have varied signatures depending on the language, but so long as they have the same signature they are interchangeable, and thus polymorphic. So why aren&amp;rsquo;t normal functions (procedures), for example, Polymormphic, the problem with procedures is that you have to import the implementation from outside the file, where with polymorphic code, you can create your instance outside the file, pass it into code that&amp;rsquo;s in the file, without changing the code, pass in a different implementation, and it&amp;rsquo;ll continue to work. To modify procedural code, you&amp;rsquo;d have to modify at least the import, and in compiled code that means a rebuild. It&amp;rsquo;s worth noting these aren&amp;rsquo;t so much typeless as their is only one type to be concerned with, a function. &lt;script src=&#34;https://gist.github.com/xenoterracide/0205464271096e6c97a2.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Miscellaneous&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;m personally skeptical of whether these actually fit the definition of Polymorphism, but they sort of do, just in completely different ways from the above&lt;/p&gt;&lt;h2&gt;Method Overloading&lt;/h2&gt;&lt;p&gt;Method overloading is &lt;a href=&#34;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&#34;&gt;called ad hoc polymorphism&lt;/a&gt; and is kind of weird in that what it&amp;rsquo;s really doing is hiding the type change from the programmer. Reality is you&amp;rsquo;re kind of asking for different behavior, but you want to hide that it&amp;rsquo;s different in the caller. However since it means you wouldn&amp;rsquo;t have to change the caller, it counts. &lt;script src=&#34;https://gist.github.com/xenoterracide/fe557d67b981888efb1f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt; &lt;h2&gt;Generics&lt;/h2&gt;&lt;p&gt;I describe generics as class templates, because they remind me of having an HTML template, and then filling in the blanks by passing in variables, the variable happens to be a Type. Perl doesn&amp;rsquo;t have Generics, and I&amp;rsquo;m not aware of plans for it in Perl 6.&lt;script src=&#34;https://gist.github.com/xenoterracide/173c9c178dc903ced098.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Reflection&lt;/h2&gt;&lt;p&gt;Reflection is sort of polymorphic in that you can essentially treat all objects the same, via a single standard API. I don&amp;rsquo;t know that I want to show the kind of Reflective code because it get&amp;rsquo;s real complicated fast, but for example, &lt;code&gt;@Inject&lt;/code&gt; can be annotated in systems with CDI compliant injector, they will reflectivly treat all objects with this the same, and then set the annotated property.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Privacy, broken by design</title>
      <link>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</link>
      <pubDate>Tue, 03 Jun 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</guid>
      <description>&lt;p&gt;&lt;p&gt;It is worth prefixing that none of the following arguments apply to anything using the keyword &lt;code&gt;static&lt;/code&gt; which makes things more procedural (or in some cases functional, than Object Oriented.&lt;/p&gt;&lt;p&gt;The suggestion in Java is to give the least required permission, but this,  in my humble opinion, violates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;Open-Closed Principle&lt;/a&gt;. Java has &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&#34;&gt;four privacy levels&lt;/a&gt;. Giving something the least permission required to function is fine in a Security context, privacy in programming however is simply there to discourage developers from doing stupid things. In most cases, unlike security, it only makes them difficult, not impossible. I believe that any SOLID principle should make your code more easily extensible, so while in fact Java&amp;rsquo;s privacy is not in literal violation of Open-Closed, it does make extension more difficult than it otherwise should be, thus violating the spirit of the principle. &lt;/p&gt;&lt;p&gt;Before I continue on to how I think Java&amp;rsquo;s design, and common usage, violates the Open Closed Principle, I should explain how I interpret the Principle, as my interpretation appears to be slightly different from what&amp;rsquo;s on Wikipedia. The Principle as described on Wikipedia appears to be combining it with two other SOLID Principles, namely Liskov Substitution and Interface Segregation. So first let&amp;rsquo;s assume that The principle stands alone, and that although it&amp;rsquo;d be bad design to not be completely SOLID, Open-Closed by itself does not require a subclass to support the same interface. Let&amp;rsquo;s also assume that Not modifying the source to add features is also an unrealistic expectation. The purpose of Open-Closed is to ensure that your subclasses are not modifying the the structure or data of their child classes and that a child may easily add to, or change the behavior it got from its parent (Liskov says that it must be substitutable for its parent). &lt;/p&gt;&lt;p&gt;First let&amp;rsquo;s talk about final, marking a class as final, means you can&amp;rsquo;t extend it. This by the very definition is in violation of Open-Closed, because the class is not Open for extension. Classes such as UUID are marked final, you might ask, why would I want to extend a UUID? maybe I want to give it a toURISafeBase64 method. That wouldn&amp;rsquo;t break any of the orignal behavior, and is almost as legitimately belonging as representing the UUID as hex. What if I wanted to extend a nested final class like an Iterator on a Map? I can&amp;rsquo;t do that, which means I have to completely reimplement the Iterator to add simple functionality. In fact the way those are implemented I have to implement much more than just the Iterator. &lt;/p&gt;&lt;p&gt;It is recommended by the official Java Docs, and the community, to make member variables private unless otherwise necessary. Private variables are only accessible to the current class and nested classes, they are not visible to subclasses, in or out of the package. In my opinion this violates Open-Closed because now, if I subclass I need to reimplement all the fields, or use getters/setters. Getters and Setters for every single attribute are actually almost no better than the attribute itself, and an object that is nothing more than those is an &lt;a href=&#34;http://www.martinfowler.com/bliki/AnemicDomainModel.html&#34;&gt;Anemic&lt;/a&gt;. Now it could be argued that making subclasses call methods makes them more&amp;hellip; impervious to change, because if you change the data structure you can preserve the methods. The problem is that most classes wouldn&amp;rsquo;t use their own getters internally, and thus break this, because then extending that getter won&amp;rsquo;t actually modify the class as completely as desired. Also remember that subclasses are by definition, tightly coupled, usually changes to the superclass require taking a look at the subclasses. So if you are using getters and setters to ensure extensibility and preserve internal/external interface changes, use them exclusively, meaning only they can have raw access, all constructors, and business logic methods must go through them. At that point they are the replacment for direct member access and private won&amp;rsquo;t matter as much (I will probably advocate a variant of this in the next article). However if you still want to access some member data hidden by the class directly, you should ensure that your subclasses can easily do so as well. You should &lt;em&gt;only&lt;/em&gt; make a member private if it would actually cause a bug in any subclass. &lt;/p&gt;&lt;p&gt;So if we go on to assume that all subclasses, even ones in a different package (because you know people using your code are going to extend things) then we should be making all members protected. This would mean that all subclasses could reuse the member variables. Of course the problem is now your data is not encapsulated in &lt;em&gt;your&lt;/em&gt; package, once a member variable is not private, is is available to your entire package. To me this also seems like a bad idea, other classes in my package don&amp;rsquo;t need to see my objects internals unless they&amp;rsquo;re a subclass. So now you have to choose, make all classes easily extended? or protect people who are programming in your package from themselves. You can probably control who&amp;rsquo;s modifying your package and how, and have static code analysis to check that you&amp;rsquo;re not calling obj.foo only this.foo. But nothing can give you back extensibility you&amp;rsquo;ve taken away (outside of adding it back). &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s look at interfaces, interfaces generally have two options, public, or protected. This is fine, but has a problem, protected interfaces are only applicable to the package that has the interface defined. Methods implementing the interface must have the same privacy level. Most of the time what I actually want is an interface which I&amp;rsquo;ve defined globally as a contract, but I want the implementations to only be called by their package. For example, a DAO (Data Access Object) might be able to share the same interface (with judicious generic usage), between entities. However if you do this, you may find that your interface must be public, so it can be between packages, now the DAO itself must have these methods as public, even if it&amp;rsquo;s being called only by something in the same package, because the interface was public so that the interface could be shared. I don&amp;rsquo;t see that you can get away with this whether you use package by feature or package by layer. If you follow this through with previous design thoughts such as everything is an Interface, and those end up being public, and you want nice subclassibility, whether through protected members or through interfaced getters/setters, now everything is public, and we&amp;rsquo;ve completely lost any real encapsulation. &lt;/p&gt;&lt;p&gt;So how could it be done better? have a privacy type subclass which makes the method or member available to only subclasses and not throughout the package. Allow interfaces that have global definitions, but implementations of the methods can be at a package or subclass level. I feel like this could still be accomplished, perhaps by creating an interface type that is a &amp;ldquo;contract&amp;rdquo;, and a new privacy keyword for &amp;ldquo;subclass&amp;rdquo;. Contracts could define that methods be subclass, or protected, in their implementation. At that point you could have all kinds of methods that are still hidden to the general world. You could then build package by feature, have all methods that are required within the package have contracts, but share contracts between features, so all CRUD controllers would have the same method signatures, all repositories would share signatures, etc, etc. &lt;/p&gt;&lt;p&gt;What if I actually want more privacy? well you could not share interfaces between packages, and then have interfaces not be public. You could also not use an interface at all unless it&amp;rsquo;s for a method on your bounded context that must be public. You can also say that ease of extensibility is not a goal and continue to not use your getters/setters internally, and yet make your members private. &lt;/p&gt;&lt;p&gt;You could also say, privacy is irrelevant, if the language is then preventing good, SOLID, design. Specifically here, Open-Closed, Liskov Substitution, and Interface Segregation. If you go this route you&amp;rsquo;ll need conventions, and to trust other developers, because a lot of things will be public or protected. I recommend Perl&amp;rsquo;s convention of prefixing subclass private methods with _ and assuming that all member fields are subclass/trait private and should never be called outside of their inheritance hierarchy. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Providing with Providers and Bread::Board</title>
      <link>http://blog.xenoterracide.com/post/providing-with-providers-and-breadboard/</link>
      <pubDate>Wed, 23 Oct 2013 05:56:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/providing-with-providers-and-breadboard/</guid>
      <description>&lt;p&gt;&lt;p&gt;So when I started using Dependency Injection the following problem happened, how do I Inject this dependency when the container is not accessible at this point. Ok, that sentence even confused me a little bit, so what do I mean. Let&amp;rsquo;s say I have a &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; for Products that is injected into my controller. Each Product stored has one or more ProductVariants that is part of it&amp;rsquo;s aggregate, which itself has Nested Categories. Loading this entire graph at once would be relatively expensive, so we decide to do some lazy loading via DBI in the classes. One problem, how on earth do we Inject a Database Handle all the way down to Categories. Most of these ways are against DI, but they are solutions to the problem, there are also ways to combine these. Also, your model class having a database handle is probably bad design itself, but I&amp;rsquo;m not going to get into that. Sadly I&amp;rsquo;ve done every one of these &lt;/p&gt;&lt;h2&gt;Manual&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7047751.js&#34;&gt;&lt;/script&gt;Well at least you aren&amp;rsquo;t hard coding the way to read your config file, or your database driver. You&amp;rsquo;re smart enough to rely on an Interface rather than an Implementation. This is fraught with so many problems. Firstly if your web server (assuming it&amp;rsquo;s a web application) is getting any kind of traffic at all you&amp;rsquo;ll end up creating tons of database connections, you&amp;rsquo;ll also be reading that config file every time (ok I forget if Config::Merge caches to memory, it might, but often when I see people design this way, they are basically slurping the file every time). Someday 5 years from now, someone is going to hate you because now they need to support replicants&amp;hellip; and the config needs to support more connection strings, which means modifying every place you&amp;rsquo;ve done this. Also, you&amp;rsquo;ve completely lost the ability to inject your dependencies for whatever reason you may want to. &lt;/p&gt;&lt;p&gt;&lt;h2&gt;Inheritance/Composition&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7048475.js&#34;&gt;&lt;/script&gt;Ok, this is a little bit better than before, at least now you have Inverted your dependencies, you could provide the config or the database handle to the class. You&amp;rsquo;ve also put the code in a centralized place so it&amp;rsquo;s easy to change when you need to. You&amp;rsquo;re still reading the file fairly often, though perhaps less because it now depends on how long Product variant is alive. So what happens if your connection is lost? We still have a connection for each class, a connection that may now be held much longer. Why does Product Variant need access to the config? this is a violation of the Law of Demeter. &lt;/p&gt;&lt;h2&gt;Naive Service Locator&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7048828.js&#34;&gt;&lt;/script&gt;We need to get rid of knowledge of the config. We can do this by using a &lt;a href=&#34;http://martinfowler.com/articles/injection.html#UsingAServiceLocator&#34;&gt;Service Locator&lt;/a&gt;, which is simply a well known service to retrieve other services, usually a global singleton. In our example we&amp;rsquo;re at least smart enough to allow ourselves to change the class out via injection for testing. We no longer have tons of connections or config reads. However, we now have a new problems, what happens when our Application Server forks a process and we lose the database connection? What about when our locator gets more complex, like nested containers, that could change or access, specifically with replication. Also our class is now directly dependent on Bread::Board, and its interface. At least we&amp;rsquo;ve stopped caring how our database handle is built. Our locator is a global singleton, and we can&amp;rsquo;t change our Container class for testing. &lt;/p&gt;&lt;h2&gt;Robust Service Locator&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7049630.js&#34;&gt;&lt;/script&gt;Ok, so this is much better we can now configure which locator instance we use at runtime. We have removed the dependency on the Bread::board interface. There is no longer a problem with database connections being dropped. However, our container is still a global singleton, and our class still knows about it, which again, law of Demeter. &lt;/p&gt;&lt;h2&gt;Dependency Injection and Pass it down&lt;/h2&gt;&lt;p&gt;For now I&amp;rsquo;ve been basically ignoring other classes because with all of these other approaches they aren&amp;rsquo;t really a concern because you would do the same thing in every class, fetch your service. Much of the code is required here anyways, we always would have to do the sql, the transforms the loops. Dependency inversion is the opposite, do not think of how to retrieve the dependency instead have the dependency provided. But this becomes tricky to think of when you&amp;rsquo;re 3 or more levels deep in your hierarchy. One way to do it simply pass the reference. We create a specific problem here, our Repository lifecycle is a singleton so we need to ensure re-connection, thus we must inject the connector which means we are immediately dependent on the DBIx::Connector interface. This doesn&amp;rsquo;t seem that tricky until you add more than one service, which still may not seem that bad, until you have to add one later, and oh my god, now you&amp;rsquo;re modifying several classes. &lt;script src=&#34;https://gist.github.com/xenoterracide/7051143.js&#34;&gt;&lt;/script&gt;&lt;h2&gt;Dependency Injection with Providers&lt;/h2&gt;&lt;p&gt;This next and final sample show&amp;rsquo;s one way of doing this with Providers. A little context on a Provider first, a Provider is simply an object that can be used to retrieve a an instance of an object you need. It&amp;rsquo;s really just a kind of factory, but tends to be specific to dependency injection, in scenarios where you need a new instance of an object each time. It seems that it might also work well for other cases, such as objects with a longer lifespan than a new instance on every request from the injector, but shorter than a permanent singleton. In short a provider should be able to provide you with an instance on request, without requiring to to depend on retrieval. &lt;/p&gt;&lt;p&gt;The code that I&amp;rsquo;m demonstrating will not work currently practical scenario, meaning one where variant parameters are required. &lt;a href=&#34;https://github.com/stevan/BreadBoard/issues/28&#34;&gt;I&amp;rsquo;ve opened a bug about resolving the issue&lt;/a&gt;. In the mean time, the patch is simple and you could apply it yourself. You could use &lt;code&gt;BUILDARGS&lt;/code&gt; to rename an alternate key to the primary hashkey, in your models. You could also just define each model service one at a time instead of looping them, and actually validating their parameters. &lt;/p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7052294.js&#34;&gt;&lt;/script&gt;&lt;p&gt;You may note that I&amp;rsquo;ve removed the config, this was simply so I could build the code out so it works in completion. It maybe advantageous not to put config processing code in the Dependency injector, but rather provide the config to Bread::Board::Declare at the constructor via required services. This way of doing things requires much more code, but is also much more flexible. Every piece of the model, even those hat could not normally be accessed by the injector, can now have it&amp;rsquo;s dependencies injected to it. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moose Interface Pattern with parameter enforcement</title>
      <link>http://blog.xenoterracide.com/post/moose-interface-pattern-with-parameter-enforcement/</link>
      <pubDate>Sat, 25 May 2013 13:29:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/moose-interface-pattern-with-parameter-enforcement/</guid>
      <description>&lt;p&gt;Moose interfaces are problematic, for 2 reasons.&lt;br /&gt;&lt;br /&gt;1. They are compile time, but runtime features such as attribute delegation could provide the interface (role ordering is the real problem here)&lt;br /&gt;2. They don&amp;rsquo;t ensure anything other than the method name.&lt;br /&gt;&lt;br /&gt;I think this problem can be solved better by using &lt;code&gt;around&lt;/code&gt; instead of &lt;code&gt;requires&lt;/code&gt; &lt;script src=&#34;https://gist.github.com/xenoterracide/5649931.js&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;Package Interface::Create;&lt;br /&gt;use Moose::Role;&lt;br /&gt;use Type::Params    qw( compile       );&lt;br /&gt;use Types::Standard qw( slurpy HashRef);&lt;br /&gt; &lt;br /&gt;around create =&amp;gt; sub {&lt;br /&gt;  my $orig = shift;&lt;br /&gt; my $self = shift;&lt;br /&gt; &lt;br /&gt; state $check = compile( slurpy HashRef );&lt;br /&gt; my ( $obj&lt;em&gt;args ) = $check-&amp;gt;( @&lt;/em&gt; );&lt;br /&gt; &lt;br /&gt; return $self-&amp;gt;$orig( $obj_args );&lt;br /&gt;};&lt;br /&gt;1;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Ordering of course still matters here as you can have multiple &lt;code&gt;around&lt;/code&gt; modifiers on a method. This will throw an exception if method is missing or if the types passed in are not correct.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inversion of Control Principle</title>
      <link>http://blog.xenoterracide.com/post/inversion-of-control-principle/</link>
      <pubDate>Thu, 03 Jan 2013 21:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/inversion-of-control-principle/</guid>
      <description>&lt;p&gt;&lt;p&gt;If you&amp;rsquo;re not familiar with the term &amp;ldquo;Inversion of Control&amp;rdquo;( IoC ) or &amp;ldquo;Dependency Injection&amp;rdquo; ( DI )you may wish to start with &lt;a href=&#34;http://martinfowler.com/articles/injection.html&#34;&gt;Martin Fowler&amp;rsquo;s post on the subject&lt;/a&gt;. If you&amp;rsquo;re looking for a way to do it with Perl,  &lt;a href=&#34;https://metacpan.org/module/Bread::Board::Manual::Concepts&#34;&gt;Bread::Board&lt;/a&gt; is the way to go. This post however is about the theory behind it, and a path to grokitude if you&amp;rsquo;re finding the concepts challenging. I should advise that I am not yet a buddha on implementation. &lt;/p&gt;&lt;h2&gt;What is it?&lt;/h2&gt;&lt;p&gt;Now that you&amp;rsquo;re familiar with an understanding of the terms that is not mine (or even if you didn&amp;rsquo;t bother), you may be wondering what I mean by &amp;ldquo;Inversion of Control Principle&amp;rdquo;, seeing as how we have the Dependency Injection Pattern and Inversion of Control Containers. I&amp;rsquo;m not sure if anyone actually uses the term &amp;ldquo;Inversion of Control Principle&amp;rdquo;, though google seems to suggest I am not the first. &lt;/p&gt;&lt;p&gt;The essence of the Inversion of Control Principle is do not attempt to control your code, let its callers control it. Give your caller as much power as you can. &lt;/p&gt;&lt;p&gt;This is of course not a very academic statement&lt;/p&gt;&lt;h3&gt;Dependency Inversion&lt;/h3&gt;&lt;p&gt;An important piece of the Inversion of Control Principle is the common &amp;ldquo;Dependency  Inversion&amp;rdquo;. It is defined as: &lt;blockquote&gt;&lt;ol&gt;  &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt;  &lt;li&gt;Abstractions should not depend upon details. Details should depend upon abstractions.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;In more laymans terms depend on an interface and not a concrete implementation. For the Perler&amp;rsquo;s. Do not depend on LWP or DBI, but depend on their interface. This is covered more in my post on &lt;a href=&#34;http://www.xenoterracide.com/2012/11/interface-driven-design.html&#34;&gt;Interface Driven Design&lt;/a&gt;. &lt;/p&gt;&lt;h3&gt;Lifecycle Inversion of Control&lt;/h3&gt;&lt;p&gt;A second piece of Inversion of Control is do not attempt to control your objects lifecycle. This means, do not enforce a singleton pattern, do not enforce a flyweight pattern, do not enforce an instance. Your objects should be instances always, if you want a singleton put it at the top level of your application or use a Dependency Injection framework to manage the lifecycle. Also package variables that are not constants are evil, they will bite you because they are essentially singletons. Always make your objects instances and let their client code determine their lifecycle. &lt;/p&gt;&lt;h2&gt;How do I do it?&lt;/h2&gt;&lt;p&gt;Well you don&amp;rsquo;t have to use a fancy IoC/DI framework to do it. Those are simple tools to make life easier after you&amp;rsquo;ve designed your software to be consumed by them. To properly invert your control you first start by letting go. Huh? yeah I know.&lt;/p&gt;&lt;p&gt;You start by ensuring that your software has as few concrete dependencies as possible. Like I said you depend on interfaces. Some concrete dependencies are unavoidable, but try to make them uninteresting, or architecturally significant.&lt;/p&gt;&lt;h3&gt;With Perl&lt;/h3&gt;&lt;p&gt;Start by ensuring that concrete dependencies can be easily replaced at runtime. The easiest way to accomplish this is by allowing them to be passed to your constructor. when using Moose I tend to use lazy loading defaults a lot. Here&amp;rsquo;s an example from cybersource. &lt;script src=&#34;https://gist.github.com/4008988.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;sub _build_cybs_wsdl {&lt;br /&gt;    my $self = shift;&lt;br /&gt; &lt;br /&gt;    my $dir = $self-&amp;gt;_production ? &amp;lsquo;production&amp;rsquo; : &amp;lsquo;test&amp;rsquo;;&lt;br /&gt; &lt;br /&gt;    load &amp;lsquo;File::ShareDir::ProjectDistDir&amp;rsquo;, &amp;lsquo;dist_file&amp;rsquo;;&lt;br /&gt;    return load_class(&amp;lsquo;Path::Class::File&amp;rsquo;)-&amp;gt;new(&lt;br /&gt;            dist&lt;em&gt;file(&lt;br /&gt;                &amp;lsquo;Business-CyberSource&amp;rsquo;,&lt;br /&gt;                $dir&lt;br /&gt;                . &amp;lsquo;/&amp;rsquo;&lt;br /&gt;                . &amp;lsquo;CyberSourceTransaction&lt;/em&gt;&amp;lsquo;&lt;br /&gt;                . $self-&amp;gt;cybs_api_version&lt;br /&gt;                . &amp;lsquo;.wsdl&amp;rsquo;&lt;br /&gt;            )&lt;br /&gt;        );&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;has cybs_wsdl =&amp;gt; (&lt;br /&gt;    required  =&amp;gt; 0,&lt;br /&gt;    lazy      =&amp;gt; 1,&lt;br /&gt;    is        =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    isa       =&amp;gt; File,&lt;br /&gt;    builder   =&amp;gt; &amp;lsquo;_build_cybs_wsdl&amp;rsquo;,&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;Although I don&amp;rsquo;t consider it likely that anyone will ever need to use another WSDL for Cybersource, one could easily inject a new Path::Class::File to one when creating the client at the constructor. Another perfect example is the Client itself. It&amp;rsquo;s designed to be useable as a singleton, because I never intend for someone to need to instantiate it twice, however I have not made it a singleton and internally I&amp;rsquo;m not aware of any code that it actually is treated as such (it appears to usually be instantiated at every request ). &lt;/p&gt;&lt;p&gt;Prefer Class, and Object interfaces to functional ones. Here&amp;rsquo;s some code that demonstrates why. &lt;script src=&#34;https://gist.github.com/4009088.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;# this works&lt;br /&gt;&lt;br /&gt;use Class::Load 0.20 &amp;lsquo;load_class&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;my $var = &amp;lsquo;baz&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;my $class = &amp;lsquo;Foo::Bar&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;my $result = load_class( $class )-&amp;gt;class_method( $var ); # works wonders with -&amp;gt;new&lt;br /&gt;&lt;br /&gt;# sometimes this will work, but not always. Try this with the various Dumper functions and see which ones work.&lt;br /&gt;&lt;br /&gt;use Module::Load &amp;lsquo;load&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;my $package = &amp;lsquo;Foo::Bar&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;load $package, &amp;lsquo;function&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;my $result = function( $var ); # seems to only work if Foo::Bar&amp;rsquo;s exporter works right, many packages have to be exported at compile time not runtime&lt;br /&gt;&lt;br /&gt;# perl doesn&amp;rsquo;t like stuff like this or really anything where I&amp;rsquo;ve tried substituting the package name into calling a function. at least not with strict on. This is a large reason I&amp;rsquo;d avoid functional interfaces. They are hard to substitute at runtime. &lt;br /&gt;&lt;br /&gt;load( $package );&lt;br /&gt;&lt;br /&gt;my $function = $package . &amp;lsquo;::&amp;rsquo; . &amp;lsquo;function&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;$function-&amp;gt;( $var );&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;p&gt;I have even better real examples, such as my one in interfaces where I replaced LWP with the AnyEvent::LWP&amp;hellip; but unfortunately that code has not been released to the public. The examples given are basically the same principle. &lt;/p&gt;&lt;h2&gt;Dependency Injection Frameworks&lt;/h2&gt;&lt;p&gt;Dependency Injection Frameworks are not required to use the Inversion of Control Principle they simply make injecting your dependencies and managing lifecycles easier. It also allows you to do concrete class substitution from one place along with deciding that objects lifecyle, and have it&amp;rsquo;s dependencies inserted. When using a DI framework you should strive to call it only once per controller. Though a book that I&amp;rsquo;ve read suggests this is Domain Model controller and not an MVC controller, I was unable to make a full distinction.&lt;/p&gt; &lt;p&gt;This example runs particularly slow, probably due to reasons that people hate moose, however, if you remove the loop at the end you&amp;rsquo;ll notice executing one time is about the same as ten, which means that most of this is due to class compiling and loading, actual runtime is fast (or at least, fast enough). &lt;/p&gt; &lt;p&gt;The important thing to pick up is how the Order object requires a &lt;code&gt;payment_gateway&lt;/code&gt; that does &lt;code&gt;submit&lt;/code&gt;, but it doesn&amp;rsquo;t know how to get that object, or what the implementation will be. Our Dependency Injection framework then simply provides that dependency as needed. It would be trivial to replace our implementation of payment gateway with a different one. &lt;/p&gt; &lt;p&gt;The code is commented, to explain what it&amp;rsquo;s doing where.&lt;/p&gt;&lt;script src=&#34;https://gist.github.com/4053667.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;use 5.014;&lt;br /&gt;use warnings;&lt;br /&gt;use Class::Load &amp;lsquo;load_class&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;package PaymentGateway {&lt;br /&gt;    use Moose;&lt;br /&gt;&lt;br /&gt;    sub submit {&lt;br /&gt;        return int( rand(2) );&lt;br /&gt;    }&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;package Order {&lt;br /&gt;    use Moose;&lt;br /&gt;&lt;br /&gt;    sub make_payment {&lt;br /&gt;        my $self = shift;&lt;br /&gt;&lt;br /&gt;        return $self-&amp;gt;_payment_gateway-&amp;gt;submit( $self );&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    has _payment_gateway =&amp;gt; (&lt;br /&gt;        isa      =&amp;gt; &amp;lsquo;Object&amp;rsquo;,&lt;br /&gt;        is       =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        required =&amp;gt; 1,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;package AppContainer {&lt;br /&gt;    use Moose;&lt;br /&gt;    extends &amp;lsquo;Bread::Board::Container&amp;rsquo;;&lt;br /&gt;&lt;br /&gt;    use Bread::Board; #import sugar&lt;br /&gt;&lt;br /&gt;    sub _build_config {&lt;br /&gt;        my $self = shift;&lt;br /&gt;&lt;br /&gt;        # hardcode for example&lt;br /&gt;        return {&lt;br /&gt;            username   =&amp;gt; &amp;lsquo;foo&amp;rsquo;,&lt;br /&gt;            password   =&amp;gt; &amp;lsquo;bar&amp;rsquo;,&lt;br /&gt;        };&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    has _config =&amp;gt; (&lt;br /&gt;        isa     =&amp;gt; &amp;lsquo;HashRef&amp;rsquo;,&lt;br /&gt;        is      =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;        lazy    =&amp;gt; 1,&lt;br /&gt;        builder =&amp;gt; &amp;lsquo;_build_config&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    sub BUILD {&lt;br /&gt;        my $self = shift;&lt;br /&gt;&lt;br /&gt;        # container can take a container as a parameter. if you do this it&lt;br /&gt;        # will simply add to the container it tooks as a paramter&lt;br /&gt;        # this will be our root container /&lt;br /&gt;        container $self =&amp;gt; as {&lt;br /&gt;            # subcontainer path to will be /model&lt;br /&gt;            container model =&amp;gt; as {&lt;br /&gt;&lt;br /&gt;                #  order uses constructor injection&lt;br /&gt;                service order =&amp;gt; (&lt;br /&gt;                    class =&amp;gt; &amp;lsquo;Order&amp;rsquo;,&lt;br /&gt;                    dependencies =&amp;gt; {&lt;br /&gt;                        # use full path&lt;br /&gt;                        _payment_gateway =&amp;gt;&lt;br /&gt;                            depends_on(&amp;lsquo;/remote/payment_gateway&amp;rsquo;),&lt;br /&gt;                    },&lt;br /&gt;                );&lt;br /&gt;            };&lt;br /&gt;            # another subcontainer /service&lt;br /&gt;            container remote =&amp;gt; as {&lt;br /&gt;                service username   =&amp;gt; $self-&amp;gt;_config-&amp;gt;{username};&lt;br /&gt;                service password   =&amp;gt; $self-&amp;gt;_config-&amp;gt;{password};&lt;br /&gt;&lt;br /&gt;                service payment_gateway =&amp;gt; (&lt;br /&gt;                    class        =&amp;gt; &amp;lsquo;PaymentGateway&amp;rsquo;,&lt;br /&gt;                    # we don&amp;rsquo;t need more than one instance&lt;br /&gt;                    lifecycle    =&amp;gt; &amp;lsquo;Singleton&amp;rsquo;,&lt;br /&gt;                    dependencies =&amp;gt; {&lt;br /&gt;                        username   =&amp;gt; depends_on(&amp;lsquo;username&amp;rsquo;),&lt;br /&gt;                        password   =&amp;gt; depends_on(&amp;lsquo;password&amp;rsquo;),&lt;br /&gt;                    },&lt;br /&gt;                );&lt;br /&gt;            };&lt;br /&gt;        };&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;package Controller {&lt;br /&gt;    # this could be any framework controller&lt;br /&gt;    use Moose;&lt;br /&gt;&lt;br /&gt;    has _c =&amp;gt; (&lt;br /&gt;        isa  =&amp;gt; &amp;lsquo;Bread::Board::Container&amp;rsquo;,&lt;br /&gt;        is   =&amp;gt; &amp;lsquo;ro&amp;rsquo;,&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    sub process_order {&lt;br /&gt;        my $self = shift;&lt;br /&gt;&lt;br /&gt;        my $order = $self-&amp;gt;_c-&amp;gt;resolve( service =&amp;gt; &amp;lsquo;/model/order&amp;rsquo; );&lt;br /&gt;&lt;br /&gt;        if ( $order-&amp;gt;make_payment ) {&lt;br /&gt;            say &amp;lsquo;payment succeeded&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;        else {&lt;br /&gt;            say &amp;lsquo;payment failed&amp;rsquo;;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    &lt;strong&gt;PACKAGE&lt;/strong&gt;-&amp;gt;meta-&amp;gt;make_immutable;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;my $app = AppContainer-&amp;gt;new({ name =&amp;gt; &amp;lsquo;app&amp;rsquo; });&lt;br /&gt;&lt;br /&gt;# controller has not idea there&amp;rsquo;s only one app containerr&lt;br /&gt;my $controller = Controller-&amp;gt;new( _c =&amp;gt; $app );&lt;br /&gt;&lt;br /&gt;for ( my $i = 0; $i &amp;lt; 10 ; $i++ ) {&lt;br /&gt;    $controller-&amp;gt;process_order;&lt;br /&gt;}&lt;br /&gt;1;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Business::CyberSource API is stabilizing as of 0.7.x</title>
      <link>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</link>
      <pubDate>Wed, 07 Nov 2012 21:15:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/businesscybersource-api-is-stabilizing-as-of-0.7.x/</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;a href=&#34;https://metacpan.org/module/Business::CyberSource&#34;&gt;Business::CyberSource&lt;/a&gt; (BC) has been going through API changes for a while now. If you&amp;rsquo;re using it you&amp;rsquo;ve probably noticed this and wondered why? The reason behind it was when I first made it I wanted it to be extremely simple to use, and I was realistically a Junior programmer. Over the past year I learned a lot about API design and Object Oriented Programming, as well as payment gateways and credit card transaction processing. From the first production ready release I knew that it had design problems due to a large quantity of duplicated code, but at the time I didn&amp;rsquo;t know how to get rid of it. &lt;/p&gt;&lt;h2&gt;Domain Driven Design&lt;/h2&gt;&lt;p&gt;My first refactor used some principles I learned from &lt;a href=&#34;http://www.amazon.com/gp/product/0321125215/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0321125215&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; I changed the design of the objects to be more clear for experts in CyberSource. I also started restructuring them to more closely match the remote model. This meant making Requests and Responses to be made up of nested objects (Responses were only done as of 0.7.x). Another Change regarding this was to rename the &lt;code&gt;submit&lt;/code&gt; method to &lt;code&gt;run_transaction&lt;/code&gt; which is the name of the Remote Procedure call that is executed. &lt;h2&gt;Composite Design Pattern&lt;/h2&gt;&lt;p&gt;By making the Requests up of nested objects it allowed me to use the Composite Pattern from &lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633612&amp;linkCode=as2&amp;tag=xenotsblog-20&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=xenotsblog-20&amp;l=as2&amp;o=1&amp;a=0201633612&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; to serialize all of the objects into a simple nested hashref that &lt;a href=&#34;https://metacpan.org/module/XML::Compile::SOAP&#34;&gt;XML::Compile::SOAP&lt;/a&gt; expects. Moving to these smaller objects that could &lt;code&gt;serialize&lt;/code&gt; allowed me to also add more offline tests. &lt;/p&gt;&lt;h2&gt;Dependency Injection in Tests&lt;/h2&gt;&lt;p&gt;Most of the tests for BC start out exactly the same, except for one change, the value in the amount part of the Credit Card Authorization. This is because CyberSource&amp;rsquo;s Test API uses special amounts to allow you to test getting different responses. e.g. something like (I&amp;rsquo;d have to look it up) 5000.05 is maybe a REJECT with a special processor code and cv code. Because of this I wired up my tests using &lt;a href=&#34;https://metacpan.org/module/Bread::Board&#34;&gt;Bread::Board&lt;/a&gt; to reduce the amount of boilerplate code in all tests that require actual remote interaction. &lt;/p&gt;&lt;h2&gt;The Impact&lt;/h2&gt;&lt;p&gt;Ultimately changing my &lt;a href=&#34;http://martinfowler.com/eaaCatalog/remoteFacade.html&#34;&gt;Remote Facade&lt;/a&gt; to make use of more design patterns and be designed after it&amp;rsquo;s niche domain has allowed me to have both simpler, deduplicated, more robust, more correct, and easier to modify code. Some things were not possible in earlier versions, or would have been incredibly complex to add. Now it&amp;rsquo;ll simply be an issue of adding a Moose attribute to add a feature present in the WSDL. Before certain calls could not return all of information that was in the actual SOAP response, now everything should be accessible. &lt;/p&gt;&lt;h2&gt;Possible Bugs&lt;/h2&gt;&lt;p&gt;One of the possible bugs of this last refactor is that I use &lt;a href=&#34;https://metacpan.org/module/MooseX::StrictConstructor&#34;&gt;MooseX::StrictConstructor&lt;/a&gt; for all of my Moose objects. It is possible now that the XML::Compile::SOAP hash is simply passed to the Response Object that if a key I didn&amp;rsquo;t account for were present that an exception would be thrown. If this is thrown on anything other than a 102 Invalid Field response, then it is a bug in BC and should be reported. I could have turned StrictConstructor off on the responses, but I believe that throwing the exceptions may ultimately make BC a better library. Also with a test suite that totals over 1400 (including generated generic ) tests, I&amp;rsquo;m fairly confident that there will be no problems in production. &lt;/p&gt;&lt;h2&gt;New Debugging&lt;/h2&gt;&lt;p&gt;In order to aid in finding bugs and diagnosing problems when they happen cybersource now has 2 debug setting levels. These can be set by having debug be 0 (off), 1 (request/response hash), 2 (full soap payloads). These should not be turned on in production and because they will print out Credit Card numbers. &lt;/p&gt;&lt;h2&gt;In Trial&lt;/h2&gt;&lt;p&gt;Currently I&amp;rsquo;ve left BC v0.7.5 in trial, but barring any bugs being reported, or cpan testers tests failing, I&amp;rsquo;ll probably release v.0.7.6 as stable early early next week.&lt;/p&gt;&lt;h2&gt;Stable API&lt;/h2&gt;&lt;p&gt;I do not forsee any more major API changes in the future of BC, all of my original problems have been weeded out. This means I&amp;rsquo;ll be able to focus on features and documentation with future work. It is possible that some changes to exceptions and error handling may happen, but I don&amp;rsquo;t see that being a big issue. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interface Driven Design</title>
      <link>http://blog.xenoterracide.com/post/interface-driven-design/</link>
      <pubDate>Sat, 03 Nov 2012 05:37:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/interface-driven-design/</guid>
      <description>&lt;p&gt;&lt;h2&gt;What is Interface Driven Design?&lt;/h2&gt;&lt;p&gt;Interface Driven Design simply means that you should design your software around a flexible, easy to use, easy to understand interface. This is easy to achieve if your objects are of &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt; design. There is a simple table and reference link if you&amp;rsquo;re not familiar with the principles. &lt;/p&gt;&lt;h2&gt;My Work is SOLID already&lt;/h2&gt;&lt;p&gt;Then you&amp;rsquo;re on the right track but it&amp;rsquo;s not enough if you don&amp;rsquo;t fully marry the concept to best practices. I&amp;rsquo;ve seen quite a bit of work that&amp;rsquo;s SOLID enough but fails to provide good interfaces. &lt;/p&gt;&lt;h2&gt;Why is this so important?&lt;/h2&gt;&lt;p&gt;Getting your interfaces correct is important because someone should be able to replace your code with new code, or subclassed code and it should still work. &lt;/p&gt;&lt;h3&gt;Example: LWP::UserAgent and Mojo::Useragent&lt;/h3&gt;&lt;p&gt;These two libraries do exactly the same thing, they provide an HTTP Client. However, they do not conform to the same interface. This means That if you&amp;rsquo;re using Mojolicious to write a web application, but require an external library to interface with a remote API, because its interface will make your development easier, you cannot change it&amp;rsquo;s use of LWP::UserAgent to Mojo::Useragent. Now you&amp;rsquo;ve added another dependency and complexity to your application. &lt;/p&gt;&lt;h3&gt;Example: DBI&lt;/h3&gt;&lt;p&gt;DBI is an example of a common interface to many different database drivers that do similar things, but underlyingly with different syntax. This allows you to use a common interface and ignore the differences in implementation between, say DBD::mysql and DBD::Pg. &lt;/p&gt;&lt;h2&gt;How do I get there?&lt;/h2&gt;&lt;p&gt;To begin, and as a general rule your interface should conform to style choices in the language you&amp;rsquo;re using. Meaning that in Perl you should use &lt;code&gt;$obj-&amp;gt;foo&lt;em&gt;bar&lt;/code&gt; not &lt;code&gt;$obj-&amp;gt;getFooBar&lt;/code&gt; as it is the style most objects use. &lt;h3&gt;Domain Driven Design&lt;/h3&gt;&lt;p&gt;The first thing I suggest doing is design your initial interface using Domain Driven Design. Look at the common language used to describe the thing that you&amp;rsquo;re building, and name your package, classes, methods, functions, after words from the common language. You&amp;rsquo;re writing a new HTTP client? you probably have some concept of POST, so &lt;code&gt;$client-&amp;gt;post&lt;/code&gt; makes a lot of sense. If you&amp;rsquo;re writing a billing system you may have some concept of Invoice-&amp;gt;process. When doing Domain Driven Design your Interface should be easy to understand by an Expert in that domain (regardless of whether they are technically savvy ). Example if I told a Billing expert I was writing the code for Invoice-&amp;gt;process they probably would have no idea what the internals meant, but they should easily understand the purpose and a general idea of what it actually does. (note: having an Invoice object might be bad, as an invoice is a request for payment on a Sale, and a receipt is a record of, therefore they are just views on a Sale, but that&amp;rsquo;s a more complex notion) &lt;/p&gt;&lt;h3&gt;Pure Fabrication&lt;/h3&gt;&lt;p&gt;Unfortunately sometimes what you&amp;rsquo;re creating has no real world equivalent (actually HTTP is an example that is now more of its own domain). So you&amp;rsquo;re making it up as you go. In this case you need to create objects that are a &amp;lt;a href=&amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/GRASP&#34;&gt;http://en.wikipedia.org/wiki/GRASP&lt;/a&gt;&lt;/em&gt;(object-oriented_design)#Pure_Fabrication&amp;rdquo;&amp;gt;Pure Fabrication&lt;/a&gt;. When creating interfaces for these I suggest looking to patterns, simple interfaces, and the interfaces for similar things in other projects, or languages. Use names that are as descriptive as you can get. &lt;/p&gt;&lt;h3&gt;Existing Interfaces&lt;/h3&gt;&lt;p&gt;You want to do this whenever there is an existing implementation that&amp;rsquo;s not good enough, but has a decent interface. Perfect examples are DBI and LWP. They both have  good interfaces, but there&amp;rsquo;s a chance that the implementation isn&amp;rsquo;t good enough (or you have need of a nonexistant driver).&lt;/p&gt;&lt;p&gt;An example with be AnyEvent::HTTP::LWP::UserAgent. If you&amp;rsquo;re using AnyEvent you&amp;rsquo;ll probably know you don&amp;rsquo;t want LWP&amp;rsquo;s blocking interface, but unfortunately the library you need to use uses LWP, what a dilemma. You could rewrite the library entirely to use AnyEvent::HTTP, but this will be both tedious and error prone. However, Anyevent::HTTP::LWP::UserAgent provides an LWP Interface, this means that you can simply substitute it in the library (hopefully the library made this easy by following the Inversion of Control Principle to be discussed in a future post). &lt;/p&gt;&lt;p&gt;Like AnyEvent::HTTP::LWP::UserAgent you may need to build a Facade interface that mimicks another interface. It would be better to start with this interface, but then again sometimes that&amp;rsquo;s not ideal either. &lt;/p&gt;&lt;h3&gt;Combinations&lt;/h3&gt;&lt;p&gt;Sometimes you have to combine all of these strategies. Business::OnlinePayment::CyberSource (BOPC) and Business::CyberSource ( things I&amp;rsquo;m responsible for ) are good examples. Business::CyberSource was written because BOPC 2.x was no longer maintained and relied on a proprietary library which was not 64 bit compatible. I decided that I did not like the Business::OnlinePayment interface (and still don&amp;rsquo;t to be honest ) and so set out to create a new one. &lt;/p&gt;&lt;p&gt;My first attempts was in retrospect focussed more on creating a perlish API than a Model driven API. In the long run this caused significant pain and resulted in some bad code. As of version 0.7.x (in TRIAL) Business::CyberSource&amp;rsquo;s API is modeled after the remote API that CyberSource provides, and as such it has become much easier for me to provide access to new remote API features. Because I have continued work on ensuring that my Interface only relies on it&amp;rsquo;s own interfaces it should now be trivial to replace any single piece of Business::CyberSources API. Don&amp;rsquo;t want to use my request objects? you could simply pass an object that can serialize to a hashref that looks like what XML::Compile::SOAP expects. Any Expert at CyberSource should be able to read and understand my API (not tested), where they might not understand BOPC&amp;rsquo;s. Unfortunately to get to this point I&amp;rsquo;ve had to break my interface several times. &lt;/p&gt;&lt;p&gt;Later due to new business concerns we had  a need to conform to Business::OnlinePayments Interface, and so we rewrote BOPC to use Business::CyberSource as the backend. It does not provide access to all of the features, but it can be used in anything that knows how to use a Business::OnlinePayment API. I would have preferred to have this done sooner, but due to tuits and business constraints it was put off. &lt;/p&gt;&lt;p&gt;If you read the Source of either of these you will find a few fabrications, such as the use of Factories. &lt;/p&gt;&lt;h2&gt;Interface as a Language Feature&lt;/h2&gt;&lt;p&gt;Many languages support specifying the interface via a language feature. If your language supports this you should take advantage of it. Unfortunately Perl&amp;rsquo;s simple &lt;code&gt;can&lt;/code&gt; support really isn&amp;rsquo;t enough, and Moose&amp;rsquo;s Interface as Role support doesn&amp;rsquo;t really work due to ordering issues. (I implemented the interface but unfortunately due to ordering my implementation is runtime and happens comes after the compiletime requirement ). I will say though that I believe it is more important to provide the actual calling convention in a dynamic language like Perl, than use of an actual interface. At least with Moose I feel that an interface is (generally) as concrete as the isa for the class, and so I don&amp;rsquo;t bother checking them, they are an implementation detail. &lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Ultimately the goal is to create easy interfaces to understand, use, and properly reflective of the problem. By doing so you also make concrete implementations easy to update and reuse without breaking your clients. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>