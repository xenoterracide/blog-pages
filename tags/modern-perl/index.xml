<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modern Perl on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/modern-perl/index.xml</link>
    <description>Recent content in Modern Perl on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/modern-perl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Making re.pl usable</title>
      <link>http://blog.xenoterracide.com/post/making-re.pl-usable/</link>
      <pubDate>Sun, 25 Jul 2010 18:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/making-re.pl-usable/</guid>
      <description>&lt;p&gt;For starters I&amp;rsquo;m not a super fan of interactive shell&amp;rsquo;s for non-system shells. I don&amp;rsquo;t see the point as much. When I first tried &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL.pm&#34;&gt;Devel::REPL&lt;/a&gt; I didn&amp;rsquo;t like it at all, compared to every other interactive shell I&amp;rsquo;ve used (with the notable exception of Oracle&amp;rsquo;s SQLPLUS, which is the worst shell ever) it was an unfriendly toy not worthy of mention. I couldn&amp;rsquo;t go up in history, there was no tab completion, and all in all the default output was ugly no colors or formatting. I noticed in the docs &lt;blockquote&gt;By default the re.pl program looks for (all of the following code goes in this file)&lt;code&gt;$HOME/.re.pl/repl.rc&lt;/code&gt;, and runs whatever code is in there as if you had entered it at the REPL shell yourself.&lt;/blockquote&gt;and that re.pl has plugins, I also noticed some strange syntax and what seemed to be overly complicated code for just getting a few things working. Sure the file supports perl, but do I really want to write full perl programs in an RC file just to use plugins?&lt;br /&gt;&lt;br /&gt;Well fortunately it&amp;rsquo;s not as complex as all that. First thing you want to do is set some good perl defaults.&lt;script src=&#34;http://gist.github.com/487175.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.012; use warnings;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Since this is our private shell might as well get all the current features of perl. Of course if you want to have other modules always accessible load them here to.&lt;br /&gt;&lt;br /&gt;Now lets get some sanity into the shell by using plugins for REPL. It&amp;rsquo;s really much simpler than the docs say. &lt;script src=&#34;http://gist.github.com/487180.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;load_plugin &amp;lsquo;PluginName&amp;rsquo;;&lt;br /&gt;# or&lt;br /&gt;load_plugin qw(&lt;br /&gt;   Plugin&lt;br /&gt;   NextPlugin&lt;br /&gt;   YetAnotherPlugin&lt;br /&gt;   &amp;hellip;&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; Wow that&amp;rsquo;s way easier than what any of the documentation describes.&lt;br /&gt;&lt;br /&gt;Ok let&amp;rsquo;s look at some plugins. First if your typing isn&amp;rsquo;t perfect you&amp;rsquo;ve probably noticed that you can&amp;rsquo;t use your up arrow to go back in history, to fix this you can enable Readline support by loading &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL/Plugin/ReadLineHistory.pm&#34;&gt;Devel::REPL::Plugin::ReadlineHistory&lt;/a&gt; like so, &lt;script src=&#34;http://gist.github.com/487193.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;load_plugin qw(&lt;br /&gt;    ReadLineHistory&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt; This will allow you to up arrow to go back through lines you&amp;rsquo;ve previously typed, which you can then edit just like your normal *nix shell prompt. This one thing makes re.pl about 100x less annoying.&lt;br /&gt;&lt;br /&gt;But I wish I had some kind of tab completion so I didn&amp;rsquo;t have to type so much. Hey there&amp;rsquo;s a whole set of completion plugins, lets enable those too.&lt;script src=&#34;http://gist.github.com/487197.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;load_plugin qw(                                                                                     &lt;br /&gt;    Completion                                                                                      &lt;br /&gt;    CompletionDriver::INC                                                                           &lt;br /&gt;    CompletionDriver::LexEnv                                                                        &lt;br /&gt;    CompletionDriver::Keywords                                                                      &lt;br /&gt;    CompletionDriver::Methods                                                                       &lt;br /&gt;    ReadLineHistory                                                                                 &lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;br /&gt;&lt;br /&gt;So the Keywords Driver allows you to type &lt;code&gt;pri&amp;lt; tab &amp;gt;&lt;/code&gt; and it&amp;rsquo;ll complete &lt;code&gt;print&lt;/code&gt; plus showing you &lt;code&gt;printf&lt;/code&gt; just like your *nix shell. LexEnv will allow you to auto-complete your variable names and so on. There are a few more besides what I mentioned here.&lt;br /&gt;&lt;br /&gt;Next I&amp;rsquo;ll mention the &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL/Plugin/Colors.pm&#34;&gt;Colors&lt;/a&gt; plugin. You may have noticed when you enter code such as &lt;code&gt; my $var = &amp;lsquo;blah&amp;rsquo;; say $var;&lt;/code&gt; you get the output &lt;pre&gt;&lt;code&gt;blah&lt;br /&gt;1&lt;/code&gt;&lt;/pre&gt;or the output text and return code. well if you enable colors the return code is now in green making it easy to distinguish between output and extra info.&lt;br /&gt;&lt;br /&gt;Last but not least I&amp;rsquo;ll mention &lt;a href=&#34;http://search.cpan.org/dist/Devel-REPL/lib/Devel/REPL/Plugin/DumpHistory.pm&#34;&gt;DumpHistory&lt;/a&gt;, enabling DumpHistory allows you to Dump your input history to the screen or to a file.&lt;br /&gt;&lt;br /&gt;Now we have a fully functioning, &amp;lsquo;user&amp;rsquo; friendly, perl shell.&lt;br /&gt;&lt;br /&gt;For your convenience here&amp;rsquo;s my current file &lt;script src=&#34;http://gist.github.com/487205.js&#34;&gt; &lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;use 5.012;&lt;br /&gt;use warnings;&lt;br /&gt;&lt;br /&gt;load_plugin qw(&lt;br /&gt;    Colors&lt;br /&gt;    Completion&lt;br /&gt;    CompletionDriver::INC&lt;br /&gt;    CompletionDriver::LexEnv&lt;br /&gt;    CompletionDriver::Keywords&lt;br /&gt;    CompletionDriver::Methods&lt;br /&gt;    DumpHistory&lt;br /&gt;    History&lt;br /&gt;    LexEnv&lt;br /&gt;    ReadLineHistory&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>