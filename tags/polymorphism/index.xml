<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Polymorphism on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/polymorphism/index.xml</link>
    <description>Recent content in Polymorphism on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/polymorphism/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10 ways of implementing Polymorphism</title>
      <link>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</link>
      <pubDate>Tue, 07 Oct 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</guid>
      <description>&lt;p&gt;&lt;p&gt;Firstly what is Polymorphism and why is it so important? Polymorphism is the ability to have a many implementations of a behavior that conform to a single interface. Put in perhaps slightly better, pragmatic terms, you have one implementations of a caller, that can operate on many implementations of a &amp;ldquo;parameter&amp;rdquo;, without conditionals, or changing the callers code. For instance the following, pseudo?, Perl 6-ism &lt;code&gt;method handler( $obj ) { $obj.execute() }&lt;/code&gt;. As you can imagine &lt;code&gt;$obj&lt;/code&gt; can be anything that has an execute method. For this Article I&amp;rsquo;ll give you two implementations and one caller, in either Perl &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt; or Java &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;, boilerplate will be excluded for brevity.&lt;/p&gt;&lt;h1&gt;Inheritance&lt;/h1&gt;&lt;h2&gt;Single Inheritance&lt;/h2&gt;&lt;p&gt;Single inheritance is the most simple and well understood form of Polymorphism. &lt;script src=&#34;https://gist.github.com/xenoterracide/1e5c4cc8cb9f156594a6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Multiple Inheritance&lt;/h2&gt;&lt;p&gt;Multiple inheritance is often considered dangerous, is unavailable in Java and suffers from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&#34;&gt;The diamond problem&lt;/a&gt;. You should really only use this with a &lt;a href=&#34;https://en.wikipedia.org/wiki/C3_linearization&#34;&gt;C3 MRO&lt;/a&gt;. &lt;h1&gt;Flat Composition&lt;/h1&gt;&lt;h2&gt;Interfaces&lt;/h2&gt;&lt;p&gt;Interfaces are probably the third most common form of Polymorhism, they are essentially codified contracts. &lt;script src=&#34;https://gist.github.com/xenoterracide/22661c96ec03bdc5416d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Traits&lt;/h2&gt;&lt;p&gt;These are just the same as Interfaces in Java 8 you say? well yes, that&amp;rsquo;s what Java 8 calls them, &lt;a href=&#34;https://en.wikipedia.org/wiki/Trait_(computer_programming)&#34;&gt;Traits are a list of methods flattened into a class, but they cannot access state&lt;/a&gt;. This basically describes what Java 8 is doing, as you can&amp;rsquo;t access properties from within the interface, well.. at least not unless you do what I show here, which is basically access state through getters and setters. &lt;script src=&#34;https://gist.github.com/xenoterracide/3bc3898ba2c0481d82a1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Mixins&lt;/h2&gt;&lt;p&gt;Mixins are basically traits that can access state, though some mixins (AFAIK Ruby) are implemented sneakily as multiple inheritance, rather than flat list composition. IMHO, Mixins should be implemented using flat list composition. &lt;script src=&#34;https://gist.github.com/xenoterracide/7cf9a94e953a7226b929.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Typeless&lt;/h1&gt;&lt;h2&gt;Duck Typing&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;has $!log&lt;/code&gt; in the Mixin is actually a pretty good example of duck typing, we don&amp;rsquo;t check for debug we are just calling it. Java is basically incapable of doing this, except, you can treat everything as an Object (if that&amp;rsquo;s all you need).&lt;/p&gt;&lt;h2&gt;Function References&lt;/h2&gt;&lt;p&gt;references to functions may or may not be allowed to have varied signatures depending on the language, but so long as they have the same signature they are interchangeable, and thus polymorphic. So why aren&amp;rsquo;t normal functions (procedures), for example, Polymormphic, the problem with procedures is that you have to import the implementation from outside the file, where with polymorphic code, you can create your instance outside the file, pass it into code that&amp;rsquo;s in the file, without changing the code, pass in a different implementation, and it&amp;rsquo;ll continue to work. To modify procedural code, you&amp;rsquo;d have to modify at least the import, and in compiled code that means a rebuild. It&amp;rsquo;s worth noting these aren&amp;rsquo;t so much typeless as their is only one type to be concerned with, a function. &lt;script src=&#34;https://gist.github.com/xenoterracide/0205464271096e6c97a2.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Miscellaneous&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;m personally skeptical of whether these actually fit the definition of Polymorphism, but they sort of do, just in completely different ways from the above&lt;/p&gt;&lt;h2&gt;Method Overloading&lt;/h2&gt;&lt;p&gt;Method overloading is &lt;a href=&#34;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&#34;&gt;called ad hoc polymorphism&lt;/a&gt; and is kind of weird in that what it&amp;rsquo;s really doing is hiding the type change from the programmer. Reality is you&amp;rsquo;re kind of asking for different behavior, but you want to hide that it&amp;rsquo;s different in the caller. However since it means you wouldn&amp;rsquo;t have to change the caller, it counts. &lt;script src=&#34;https://gist.github.com/xenoterracide/fe557d67b981888efb1f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt; &lt;h2&gt;Generics&lt;/h2&gt;&lt;p&gt;I describe generics as class templates, because they remind me of having an HTML template, and then filling in the blanks by passing in variables, the variable happens to be a Type. Perl doesn&amp;rsquo;t have Generics, and I&amp;rsquo;m not aware of plans for it in Perl 6.&lt;script src=&#34;https://gist.github.com/xenoterracide/173c9c178dc903ced098.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Reflection&lt;/h2&gt;&lt;p&gt;Reflection is sort of polymorphic in that you can essentially treat all objects the same, via a single standard API. I don&amp;rsquo;t know that I want to show the kind of Reflective code because it get&amp;rsquo;s real complicated fast, but for example, &lt;code&gt;@Inject&lt;/code&gt; can be annotated in systems with CDI compliant injector, they will reflectivly treat all objects with this the same, and then set the annotated property.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Privacy, broken by design</title>
      <link>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</link>
      <pubDate>Tue, 03 Jun 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</guid>
      <description>&lt;p&gt;&lt;p&gt;It is worth prefixing that none of the following arguments apply to anything using the keyword &lt;code&gt;static&lt;/code&gt; which makes things more procedural (or in some cases functional, than Object Oriented.&lt;/p&gt;&lt;p&gt;The suggestion in Java is to give the least required permission, but this,  in my humble opinion, violates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;Open-Closed Principle&lt;/a&gt;. Java has &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&#34;&gt;four privacy levels&lt;/a&gt;. Giving something the least permission required to function is fine in a Security context, privacy in programming however is simply there to discourage developers from doing stupid things. In most cases, unlike security, it only makes them difficult, not impossible. I believe that any SOLID principle should make your code more easily extensible, so while in fact Java&amp;rsquo;s privacy is not in literal violation of Open-Closed, it does make extension more difficult than it otherwise should be, thus violating the spirit of the principle. &lt;/p&gt;&lt;p&gt;Before I continue on to how I think Java&amp;rsquo;s design, and common usage, violates the Open Closed Principle, I should explain how I interpret the Principle, as my interpretation appears to be slightly different from what&amp;rsquo;s on Wikipedia. The Principle as described on Wikipedia appears to be combining it with two other SOLID Principles, namely Liskov Substitution and Interface Segregation. So first let&amp;rsquo;s assume that The principle stands alone, and that although it&amp;rsquo;d be bad design to not be completely SOLID, Open-Closed by itself does not require a subclass to support the same interface. Let&amp;rsquo;s also assume that Not modifying the source to add features is also an unrealistic expectation. The purpose of Open-Closed is to ensure that your subclasses are not modifying the the structure or data of their child classes and that a child may easily add to, or change the behavior it got from its parent (Liskov says that it must be substitutable for its parent). &lt;/p&gt;&lt;p&gt;First let&amp;rsquo;s talk about final, marking a class as final, means you can&amp;rsquo;t extend it. This by the very definition is in violation of Open-Closed, because the class is not Open for extension. Classes such as UUID are marked final, you might ask, why would I want to extend a UUID? maybe I want to give it a toURISafeBase64 method. That wouldn&amp;rsquo;t break any of the orignal behavior, and is almost as legitimately belonging as representing the UUID as hex. What if I wanted to extend a nested final class like an Iterator on a Map? I can&amp;rsquo;t do that, which means I have to completely reimplement the Iterator to add simple functionality. In fact the way those are implemented I have to implement much more than just the Iterator. &lt;/p&gt;&lt;p&gt;It is recommended by the official Java Docs, and the community, to make member variables private unless otherwise necessary. Private variables are only accessible to the current class and nested classes, they are not visible to subclasses, in or out of the package. In my opinion this violates Open-Closed because now, if I subclass I need to reimplement all the fields, or use getters/setters. Getters and Setters for every single attribute are actually almost no better than the attribute itself, and an object that is nothing more than those is an &lt;a href=&#34;http://www.martinfowler.com/bliki/AnemicDomainModel.html&#34;&gt;Anemic&lt;/a&gt;. Now it could be argued that making subclasses call methods makes them more&amp;hellip; impervious to change, because if you change the data structure you can preserve the methods. The problem is that most classes wouldn&amp;rsquo;t use their own getters internally, and thus break this, because then extending that getter won&amp;rsquo;t actually modify the class as completely as desired. Also remember that subclasses are by definition, tightly coupled, usually changes to the superclass require taking a look at the subclasses. So if you are using getters and setters to ensure extensibility and preserve internal/external interface changes, use them exclusively, meaning only they can have raw access, all constructors, and business logic methods must go through them. At that point they are the replacment for direct member access and private won&amp;rsquo;t matter as much (I will probably advocate a variant of this in the next article). However if you still want to access some member data hidden by the class directly, you should ensure that your subclasses can easily do so as well. You should &lt;em&gt;only&lt;/em&gt; make a member private if it would actually cause a bug in any subclass. &lt;/p&gt;&lt;p&gt;So if we go on to assume that all subclasses, even ones in a different package (because you know people using your code are going to extend things) then we should be making all members protected. This would mean that all subclasses could reuse the member variables. Of course the problem is now your data is not encapsulated in &lt;em&gt;your&lt;/em&gt; package, once a member variable is not private, is is available to your entire package. To me this also seems like a bad idea, other classes in my package don&amp;rsquo;t need to see my objects internals unless they&amp;rsquo;re a subclass. So now you have to choose, make all classes easily extended? or protect people who are programming in your package from themselves. You can probably control who&amp;rsquo;s modifying your package and how, and have static code analysis to check that you&amp;rsquo;re not calling obj.foo only this.foo. But nothing can give you back extensibility you&amp;rsquo;ve taken away (outside of adding it back). &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s look at interfaces, interfaces generally have two options, public, or protected. This is fine, but has a problem, protected interfaces are only applicable to the package that has the interface defined. Methods implementing the interface must have the same privacy level. Most of the time what I actually want is an interface which I&amp;rsquo;ve defined globally as a contract, but I want the implementations to only be called by their package. For example, a DAO (Data Access Object) might be able to share the same interface (with judicious generic usage), between entities. However if you do this, you may find that your interface must be public, so it can be between packages, now the DAO itself must have these methods as public, even if it&amp;rsquo;s being called only by something in the same package, because the interface was public so that the interface could be shared. I don&amp;rsquo;t see that you can get away with this whether you use package by feature or package by layer. If you follow this through with previous design thoughts such as everything is an Interface, and those end up being public, and you want nice subclassibility, whether through protected members or through interfaced getters/setters, now everything is public, and we&amp;rsquo;ve completely lost any real encapsulation. &lt;/p&gt;&lt;p&gt;So how could it be done better? have a privacy type subclass which makes the method or member available to only subclasses and not throughout the package. Allow interfaces that have global definitions, but implementations of the methods can be at a package or subclass level. I feel like this could still be accomplished, perhaps by creating an interface type that is a &amp;ldquo;contract&amp;rdquo;, and a new privacy keyword for &amp;ldquo;subclass&amp;rdquo;. Contracts could define that methods be subclass, or protected, in their implementation. At that point you could have all kinds of methods that are still hidden to the general world. You could then build package by feature, have all methods that are required within the package have contracts, but share contracts between features, so all CRUD controllers would have the same method signatures, all repositories would share signatures, etc, etc. &lt;/p&gt;&lt;p&gt;What if I actually want more privacy? well you could not share interfaces between packages, and then have interfaces not be public. You could also not use an interface at all unless it&amp;rsquo;s for a method on your bounded context that must be public. You can also say that ease of extensibility is not a goal and continue to not use your getters/setters internally, and yet make your members private. &lt;/p&gt;&lt;p&gt;You could also say, privacy is irrelevant, if the language is then preventing good, SOLID, design. Specifically here, Open-Closed, Liskov Substitution, and Interface Segregation. If you go this route you&amp;rsquo;ll need conventions, and to trust other developers, because a lot of things will be public or protected. I recommend Perl&amp;rsquo;s convention of prefixing subclass private methods with _ and assuming that all member fields are subclass/trait private and should never be called outside of their inheritance hierarchy. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>