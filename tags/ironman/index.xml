<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ironman on Caleb Cushing&#39;s blog</title>
    <link>http://blog.xenoterracide.com/tags/ironman/index.xml</link>
    <description>Recent content in Ironman on Caleb Cushing&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.xenoterracide.com/tags/ironman/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Falsehoods programmers believe about versions</title>
      <link>http://blog.xenoterracide.com/post/falsehoods-programmers-believe-about-versions/</link>
      <pubDate>Tue, 04 Aug 2015 10:40:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/falsehoods-programmers-believe-about-versions/</guid>
      <description>&lt;p&gt;given &lt;a href=&#34;http://blog.codinghorror.com/doing-terrible-things-to-your-code/&#34;&gt;Jeff Atwoods recent blog post&lt;/a&gt;&amp;nbsp; and an inspiration today for me to write a &amp;ldquo;falsehoods&amp;rdquo; about versions. I&amp;rsquo;ve decided to put mine in a &lt;a href=&#34;https://github.com/xenoterracide/falsehoods&#34;&gt;git repository&lt;/a&gt;. &amp;nbsp;If you&amp;rsquo;d like to contribute yours please feel free to send me a pull request, it&amp;rsquo;d be greatly appreciated.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/falsehoods/src/8551434cf3fbe31597273dc21ad1e80833a705e5/versions.md?embed=t&#34;&gt;&lt;/script&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Repository, one Aggregate</title>
      <link>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</link>
      <pubDate>Thu, 02 Jul 2015 02:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/single-repository-one-aggregate/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; as defined in &lt;a href=&#34;http://dddcommunity.org/book/evans_2003/&#34;&gt;Domain Driven Design&lt;/a&gt;&amp;nbsp;manages a single &lt;a href=&#34;http://martinfowler.com/bliki/DDD_Aggregate.html&#34;&gt;Aggregate&lt;/a&gt;. An aggregate may contain many entities, and value objects, but will have a single object as its root. Many of the Dao and even now some of the Repository implementations I see do not follow this, they are more likely to have a Repository per entity, than a Repository per aggregate, and of course in some cases this is required for various reasons.&lt;br /&gt;&lt;br /&gt;Ok, to start out we need our POM (or you can use Gradle), which configures our dependencies and plugins. We use a starter for Spring Data JPA, which pulls in Spring Data JPA and all of it&amp;rsquo;s suggested dependencies such as Hibernate. We also need a database and a database driver so we configure H2. Since we are inheriting from the Spring Platform BOM we don&amp;rsquo;t need to specify versions as it can configure them for us. We of course want to use Java 8 and specify our Application class so we will be able to run &lt;code&gt;mvn spring-boot:run&lt;/code&gt; at the end. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/pom.xml?embed=t&#34;&gt;&lt;/script&gt; &lt;br /&gt;Next Let&amp;rsquo;s configure our application to show the SQL that it is running, this isn&amp;rsquo;t required. You need to put &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/resources/application.properties?embed=t&#34;&gt;&lt;/script&gt; Now we need to create our Entities, let&amp;rsquo;s start at the entity Bar that is the deepest part of the Aggregate root. It extends &lt;a href=&#34;http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/AbstractPersistable.html&#34;&gt;AbstractPersistable&lt;/a&gt;&amp;nbsp;so that we get an Auto Incrementing or Sequenced id. We also use AbstractPeristable because for our task we require that our entities implement &lt;a href=&#34;http://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Persistable.html&#34;&gt;Persistable&lt;/a&gt;, as it changes the behavior of save on the repository if your objects are new.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Bar.java?embed=t&#34;&gt;&lt;/script&gt;Next let&amp;rsquo;s create Foo, it is much the same, but you&amp;rsquo;ll notice the &lt;code&gt;@OneToOne&lt;/code&gt; that specifies &lt;code&gt;CascadeType.ALL&lt;/code&gt;. This is important as without it persist and merge won&amp;rsquo;t work.&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Foo.java?embed=t&#34;&gt;&lt;/script&gt; Alright, let&amp;rsquo;s put together our repository, we could just make a CrudRepository, but let&amp;rsquo;s show off some paging too. You&amp;rsquo;ll notice that you have to pass the Entity and it&amp;rsquo;s Primary Key identifier type to the PagingAndSorting interface, the single method that we specify will find all the Foos by the nested baz property, using a &lt;code&gt;LIKE &amp;lsquo;%mystring%&amp;rsquo;&lt;/code&gt; query. Spring data will parse this interface and make an implementation for you automatically.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/FooRepo.java?embed=t&#34;&gt;&lt;/script&gt; You can create other lastly we do our Application, which is not designed to be a web server (it will exit immediately). The &lt;code&gt;@SpringBootApplication&lt;/code&gt; makes Spring Boot able to start the app and scan for components appropriately. We also Enable JPA repositories using the &lt;code&gt;@EnableJpaRepositories&lt;/code&gt;. It&amp;rsquo;s main method (not recommended to prepopulate data this way), creates and save several Foos with nested bars, then I demonstrate a way that you can page the saved objects 2 at a time whilst filtering by that like statement, only 3 of the 4 entities saved will return. &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist/src/15cb2c11f5f29d9ac6cee2bf33c984b2b857afea/src/main/java/com/xenoterracide/Application.java?embed=t&#34;&gt;&lt;/script&gt; &lt;a href=&#34;https://bitbucket.org/xenoterracide/spring-data-aggregate-persist&#34;&gt;The full source is available here.&lt;/a&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Integration with Wercker and Maven</title>
      <link>http://blog.xenoterracide.com/post/continuous-integration-with-wercker-and-maven/</link>
      <pubDate>Sat, 20 Jun 2015 14:40:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/continuous-integration-with-wercker-and-maven/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m going to walk you through getting mvn test running in wercker, on the new docker based api.&lt;br /&gt;&lt;br /&gt;First let&amp;rsquo;s talk about what &lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker &lt;/a&gt;&amp;nbsp;is and why you&amp;rsquo;d want to use it. Wercker a continuous integration and deployment web application. It will all you to run any language or stack. It currently is free for both private and public repositories; I am hopeful that once it comes out of beta it will maintain reasonable pricing for small personal private projects (Most CI&amp;rsquo;s are ridiculously priced for hobby projects). It can deploy to any platform.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So where does it fall apart? well although it seems reasonably well documented I&amp;rsquo;ve only rarely gotten something right on the first try using its documentation. This largely revolves around the fact that its YAML parser seems more sensitive to whitespace than a standard YAML parser, and their examples aren&amp;rsquo;t properly spaced, and the validator doesn&amp;rsquo;t report the right line/position of the error. That being said I&amp;rsquo;m going to tell you how to get up and running fast. Also they seem to have a problem keeping their platform up to date, the 1.0 platform only offers an Ubuntu base that is a few years old already. The 2.0 platform is based on docker, so it takes care of that, but has some problems such as it can&amp;rsquo;t process the Dockerfile itself.&lt;br /&gt;&lt;br /&gt;All this said Wercker accomplishes my need of having a continuous integration environment that is cheap enough to work for both my open source and my private hobby projects, no matter what language I might use.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To get started you&amp;rsquo;re going to need a Bitbucket or Github account as well as a wercker account, and a git repo. Before creating the &amp;ldquo;application&amp;rdquo; on Wercker let&amp;rsquo;s actually create our application in a git repo. All you need is a git repo from which you can run &lt;code&gt;mvn test&lt;/code&gt; at the root. To make this simple, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-simple&#34;&gt;here is a spring boot sample project&lt;/a&gt;, you can clone that, and copy the directory I linked into a new project, and create a new git repo and upload it to your git host. &lt;a href=&#34;https://bitbucket.org/xenoterracide/werker-maven-spring-boot-example/src&#34;&gt;Here&amp;rsquo;s a fully configured sample project I made&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So what we&amp;rsquo;re going to focus on is the &lt;code&gt;wercker.yml&lt;/code&gt;, create that file at the root of your git repo. the first thing the file will need is a box, the box is the docker image your code runs in, and will deploy. For this we&amp;rsquo;ll choose the &lt;a href=&#34;https://registry.hub.docker.com/_/maven/&#34;&gt;maven docker image&lt;/a&gt;, all you need to do is put &lt;code&gt;box: maven:latest&lt;/code&gt; at the top of the file. After that we need to add build steps. build steps are individual units of work you need to do to build your project. There are ways to write script steps or complicated custom steps, but those are for another article. We&amp;rsquo;re just going to add the &lt;a href=&#34;https://bitbucket.org/xenoterracide/wercker-step-maven&#34;&gt;maven build step I wrote&lt;/a&gt; that works for 1, and 2.0 Though it works better for 1 as it supports caching dependendencies and I haven&amp;rsquo;t figured out if that&amp;rsquo;s possible in 2. Below is the completed wercker.yml, steps has a 2 space indentation, the step name has a 4 space indentation and a -, and goals has an 8 space indentation, as mentioned spacing is very important.&lt;/div&gt;&lt;div&gt;&lt;script src=&#34;https://bitbucket.org/xenoterracide/werker-maven-spring-boot-example/src/e4fddd5494d895173d3181914cbf43beff768e25/wercker.yml?embed=t&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;That&amp;rsquo;s it, now go log into Wercker, click create -&amp;gt; application and follow the instructions, when you&amp;rsquo;re done you should be able to push commits, and wercker will run mvn test for you. Here&amp;rsquo;s what &lt;a href=&#34;https://app.wercker.com/#applications/54befcb456767b4663000750&#34;&gt;our sample&lt;/a&gt; looks like when you&amp;rsquo;re done. That&amp;rsquo;s it, simple right? have fun wercking with continuous integration on your projects.&lt;/div&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Abandoning all Perl modules</title>
      <link>http://blog.xenoterracide.com/post/abandoning-all-perl-modules/</link>
      <pubDate>Sun, 03 May 2015 15:26:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/abandoning-all-perl-modules/</guid>
      <description>&lt;p&gt;As of today I have decided to remove myself as maintainer/comaintainer of all my Perl modules. Feel free to adopt &lt;a href=&#34;https://metacpan.org/author/XENO&#34;&gt;them&lt;/a&gt;.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Premature optimization is not evil</title>
      <link>http://blog.xenoterracide.com/post/premature-optimization-is-not-evil/</link>
      <pubDate>Wed, 07 Jan 2015 20:46:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/premature-optimization-is-not-evil/</guid>
      <description>&lt;p&gt;&lt;p&gt;Or rather people should stop saying this because most of the people that say it don&amp;rsquo;t actually seem to actually know what is meant by &amp;ldquo;Premature Optimization&amp;rdquo; or how to determine when it is evil. I&amp;rsquo;ve heard people say premature optimization is evil to asking. &amp;ldquo;Is there a 3rd party library that does this more efficiently?&amp;rdquo; (knowing if there are better options is premature optimization?), &amp;ldquo;Thinking about architecting your app for horizontal scalability is premature optimization&amp;rdquo; (it is if the design is significantly more complex, but if it&amp;rsquo;s just between using REST and ensuring stateless (which is about the same complexity up front, but it&amp;rsquo;d be harder to convert later)), &amp;ldquo;wanting to do Dependency Injection is..&amp;rdquo;, &amp;ldquo;making that code easier to read and simpler and thus faster&amp;rdquo;, and on and on. On the other hand, no one seems to think that requiring Redis, Mongodb, and NodeJS because it&amp;rsquo;s webscale is premature optimization, even if the clustering is horribly convoluted and you end up in callback hell (not saying you are, just saying). Basically, you&amp;rsquo;re not asking to do the thing that everyone else is doing, is premature optimization. &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s talk about what the hell premature optimization is. Premature spending a week making sure you can spin up infinite instances on AWS because someday you might get slashdotted. Premature optimization is writing a method in a less than clear manner because you think it&amp;rsquo;s faster. Premature optimization is rewriting String.format to StringBuilder because StringBuilder is faster. Premature optimization is any time that you write code that is less readable for the sake of performance, or spend an inordinate amount of time ensuring optimizing it without benchmarking to see if it&amp;rsquo;s slow. &lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve spent a significant amount of time in the past few months working on optimizing code, why? because no one ever thought about optimization, it never occurred to the author, in one case, that querying the same data from a database that had been previously queried, in a loop, outside of a transaction, was inefficient. It never occurred to the author that not refetching from the database to do an on screen sort every time you sort would be inefficient. Why think about what you&amp;rsquo;re writing? because premature optimization is evil, or at least that&amp;rsquo;s what I&amp;rsquo;d be told. &lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s are examples of premature optimization that are not evil. I choose to use EnumMap when I&amp;rsquo;m storing Enum&amp;rsquo;s in a Map, I presume it&amp;rsquo;s more efficient, so I do it, increase in code? a class name to the constructor. StringBuilder is faster than StringBuffer, so when I come across StringBuffer I convert it, increase in code, none. I use dependency injection to wire stateless (or unchanging state) singletons so I&amp;rsquo;m not constantly creating instances, code increase is use of a DI framework. I use onClick handlers to ensure that things happen lazily, only when needed. &lt;/p&gt;&lt;p&gt;Basically what I&amp;rsquo;m saying is that &amp;ldquo;Premature optimization is evil&amp;rdquo; is sadly used anytime when anyone is even thinking about anything that could remotely be considered optimization. I personally optimize my code for paradigmn/pattern matching the problem first (which leads to 2 and 3), readability second, performance last. Making smarter decisions about how to write your code is not premature optimization. &lt;/p&gt;&lt;p&gt;I think the real &amp;ldquo;evil&amp;rdquo; is encouraging people not to think about performance, or to further understand their craft. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 ways of implementing Polymorphism</title>
      <link>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</link>
      <pubDate>Tue, 07 Oct 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/10-ways-of-implementing-polymorphism/</guid>
      <description>&lt;p&gt;&lt;p&gt;Firstly what is Polymorphism and why is it so important? Polymorphism is the ability to have a many implementations of a behavior that conform to a single interface. Put in perhaps slightly better, pragmatic terms, you have one implementations of a caller, that can operate on many implementations of a &amp;ldquo;parameter&amp;rdquo;, without conditionals, or changing the callers code. For instance the following, pseudo?, Perl 6-ism &lt;code&gt;method handler( $obj ) { $obj.execute() }&lt;/code&gt;. As you can imagine &lt;code&gt;$obj&lt;/code&gt; can be anything that has an execute method. For this Article I&amp;rsquo;ll give you two implementations and one caller, in either Perl &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt; or Java &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;, boilerplate will be excluded for brevity.&lt;/p&gt;&lt;h1&gt;Inheritance&lt;/h1&gt;&lt;h2&gt;Single Inheritance&lt;/h2&gt;&lt;p&gt;Single inheritance is the most simple and well understood form of Polymorphism. &lt;script src=&#34;https://gist.github.com/xenoterracide/1e5c4cc8cb9f156594a6.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Multiple Inheritance&lt;/h2&gt;&lt;p&gt;Multiple inheritance is often considered dangerous, is unavailable in Java and suffers from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&#34;&gt;The diamond problem&lt;/a&gt;. You should really only use this with a &lt;a href=&#34;https://en.wikipedia.org/wiki/C3_linearization&#34;&gt;C3 MRO&lt;/a&gt;. &lt;h1&gt;Flat Composition&lt;/h1&gt;&lt;h2&gt;Interfaces&lt;/h2&gt;&lt;p&gt;Interfaces are probably the third most common form of Polymorhism, they are essentially codified contracts. &lt;script src=&#34;https://gist.github.com/xenoterracide/22661c96ec03bdc5416d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Traits&lt;/h2&gt;&lt;p&gt;These are just the same as Interfaces in Java 8 you say? well yes, that&amp;rsquo;s what Java 8 calls them, &lt;a href=&#34;https://en.wikipedia.org/wiki/Trait_(computer_programming)&#34;&gt;Traits are a list of methods flattened into a class, but they cannot access state&lt;/a&gt;. This basically describes what Java 8 is doing, as you can&amp;rsquo;t access properties from within the interface, well.. at least not unless you do what I show here, which is basically access state through getters and setters. &lt;script src=&#34;https://gist.github.com/xenoterracide/3bc3898ba2c0481d82a1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Mixins&lt;/h2&gt;&lt;p&gt;Mixins are basically traits that can access state, though some mixins (AFAIK Ruby) are implemented sneakily as multiple inheritance, rather than flat list composition. IMHO, Mixins should be implemented using flat list composition. &lt;script src=&#34;https://gist.github.com/xenoterracide/7cf9a94e953a7226b929.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Typeless&lt;/h1&gt;&lt;h2&gt;Duck Typing&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;has $!log&lt;/code&gt; in the Mixin is actually a pretty good example of duck typing, we don&amp;rsquo;t check for debug we are just calling it. Java is basically incapable of doing this, except, you can treat everything as an Object (if that&amp;rsquo;s all you need).&lt;/p&gt;&lt;h2&gt;Function References&lt;/h2&gt;&lt;p&gt;references to functions may or may not be allowed to have varied signatures depending on the language, but so long as they have the same signature they are interchangeable, and thus polymorphic. So why aren&amp;rsquo;t normal functions (procedures), for example, Polymormphic, the problem with procedures is that you have to import the implementation from outside the file, where with polymorphic code, you can create your instance outside the file, pass it into code that&amp;rsquo;s in the file, without changing the code, pass in a different implementation, and it&amp;rsquo;ll continue to work. To modify procedural code, you&amp;rsquo;d have to modify at least the import, and in compiled code that means a rebuild. It&amp;rsquo;s worth noting these aren&amp;rsquo;t so much typeless as their is only one type to be concerned with, a function. &lt;script src=&#34;https://gist.github.com/xenoterracide/0205464271096e6c97a2.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;Miscellaneous&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;m personally skeptical of whether these actually fit the definition of Polymorphism, but they sort of do, just in completely different ways from the above&lt;/p&gt;&lt;h2&gt;Method Overloading&lt;/h2&gt;&lt;p&gt;Method overloading is &lt;a href=&#34;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&#34;&gt;called ad hoc polymorphism&lt;/a&gt; and is kind of weird in that what it&amp;rsquo;s really doing is hiding the type change from the programmer. Reality is you&amp;rsquo;re kind of asking for different behavior, but you want to hide that it&amp;rsquo;s different in the caller. However since it means you wouldn&amp;rsquo;t have to change the caller, it counts. &lt;script src=&#34;https://gist.github.com/xenoterracide/fe557d67b981888efb1f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt; &lt;h2&gt;Generics&lt;/h2&gt;&lt;p&gt;I describe generics as class templates, because they remind me of having an HTML template, and then filling in the blanks by passing in variables, the variable happens to be a Type. Perl doesn&amp;rsquo;t have Generics, and I&amp;rsquo;m not aware of plans for it in Perl 6.&lt;script src=&#34;https://gist.github.com/xenoterracide/173c9c178dc903ced098.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;Reflection&lt;/h2&gt;&lt;p&gt;Reflection is sort of polymorphic in that you can essentially treat all objects the same, via a single standard API. I don&amp;rsquo;t know that I want to show the kind of Reflective code because it get&amp;rsquo;s real complicated fast, but for example, &lt;code&gt;@Inject&lt;/code&gt; can be annotated in systems with CDI compliant injector, they will reflectivly treat all objects with this the same, and then set the annotated property.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celebrity nude scandal, on security, an analogy</title>
      <link>http://blog.xenoterracide.com/post/celebrity-nude-scandal-on-security-an-analogy/</link>
      <pubDate>Sat, 20 Sep 2014 11:25:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/celebrity-nude-scandal-on-security-an-analogy/</guid>
      <description>&lt;p&gt;Though I won&amp;rsquo;t say they aren&amp;rsquo;t victims of a crime&amp;hellip;  What the victims did is fundamentally the equivalent of using skeleton keys in the modern day. What apple did or rather didn&amp;rsquo;t do, is prevent that. Apple could have used a tool like cracklib, and said at the time of password creation, this is too short, this is not random enough, we are refusing to allow you to put this skeleton key lock on your front door.  So while I think that the perp should be prosecuted to the full extend of the law, it should be like a Breaking &amp;amp; Entering where the door was left unlocked.   Apple should be sued for not requiring secure passwords. Imagine if your lock company installed them wrong, and because of that you got broken into, they didn&amp;rsquo;t do their job correctly. Would people just stand for that? No, I don&amp;rsquo;t think so. Somehow physical locks are seen as easier to understand, and all this computer mumbo jumbo is hard, event though I suspect most people can&amp;rsquo;t tell you why a deadbolt is a better lock.   People should realize Skeleton keys are no longer secure, even if they look cool, and are easy to use, it&amp;rsquo;s better to use a password manager (&lt;a href=&#34;http://lastpass.com&#34;&gt;http://lastpass.com&lt;/a&gt; is what I use) with a randomly generated password for all other sites (I&amp;rsquo;d say 16 characters, though I think 12 is the current suggested). Fundamentally this setup is a deadbolt with a different key required for each door, but one keychain. You can also do multifactor, which is like a key with a chip in it that will refuse to start your car if it&amp;rsquo;s the wrong chip, so making a physical copy of the key (password) isn&amp;rsquo;t enough.&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Spring to create a full REST API in less than 60 lines of code</title>
      <link>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</link>
      <pubDate>Tue, 02 Sep 2014 22:42:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/using-spring-to-create-a-full-rest-api-in-less-than-60-lines-of-code/</guid>
      <description>&lt;p&gt;&lt;p&gt;Spring with Spring Data is awesome. Seriously, I&amp;rsquo;ve never been able to throw up a full HATEOAS REST web service this fast. To start, I&amp;rsquo;ll admit my headliner lie, I&amp;rsquo;m not counting the &lt;code&gt;pom.xml&lt;/code&gt;. &lt;noscript&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;cloc .                                                                 slave-vi&lt;br /&gt;       5 text files.&lt;br /&gt;       5 unique files.&lt;br /&gt;       2 files ignored.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://cloc.sourceforge.net&#34;&gt;http://cloc.sourceforge.net&lt;/a&gt; v 1.62  T=0.04 s (104.8 files/s, 3930.8 lines/s)&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Language                     files          blank        comment           code&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;Maven                            1              6              7             65&lt;br /&gt;Java                             3             15              0             57&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;SUM:                             4             21              7            122&lt;br /&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/322b301f810355f6187c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The basics of the web service is we want to be able to create tasks, like those on a todo list, for now we want the simplest tasks possible, in as little code possible. We should use UUID&amp;rsquo;s so that our service can scale horizontally, so that we can easily generate known test ID&amp;rsquo;s and we know that no two entities will share an id if we ever wanted to flatten things. We need to be able to perform basic CRUD on all of our entities as well as list them. &lt;/p&gt; &lt;p&gt; First let&amp;rsquo;s create our Task. &lt;script src=&#34;https://gist.github.com/xenoterracide/0611398e4abbf4ad9153.js&#34;&gt;&lt;/script&gt;As you can see it&amp;rsquo;s incredibly simple, we have our UUID identity, the &lt;code&gt;uuid&lt;/code&gt; and &lt;code&gt;uuid2&lt;/code&gt; basically are &lt;a href=&#34;http://java.dzone.com/articles/hibernate-and-uuid-identifiers&#34;&gt;telling Hibernate and H2/PostgreSQL to use UUID&amp;rsquo;s&lt;/a&gt;. You might ask why limit description to 100 characters, well, since these are quick tasks, I might want to share them  in a tweet, and this allows enough room for a url shortner plus the description. I think the rest is pretty self explanatory. &lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s create our Repository. &lt;script src=&#34;https://gist.github.com/xenoterracide/2fef27d252f906b563d4.js&#34;&gt;&lt;/script&gt;Well that doesn&amp;rsquo;t do anything&amp;hellip; oh but it does, and although it doesn&amp;rsquo;t show it, because this application doesn&amp;rsquo;t need it, there&amp;rsquo;s a nifty method signature parser dsl that allows you to build queries just by writing a method signature. &lt;/p&gt;&lt;/p&gt;Here&amp;rsquo;s our Application. &lt;script src=&#34;https://gist.github.com/xenoterracide/21b5b022a8844b515b96.js&#34;&gt;&lt;/script&gt; &amp;hellip; and pom for dependencies and stuff. &lt;script src=&#34;https://gist.github.com/xenoterracide/14b990fc2b6ad34f206d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the output of some curl commands I ran. &lt;script src=&#34;https://gist.github.com/xenoterracide/feaf505ebc5cc1cf799c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;For a slightly more in depth tutorial you can see the &lt;a href=&#34;http://spring.io/guides/gs/accessing-data-rest/&#34;&gt;official spring date rest getting started page&lt;/a&gt;. In the future I&amp;rsquo;ll try to write about how to actually connect to PostgreSQL and set up API Authentication and Authorization&lt;/p&gt;&lt;p&gt;People are always telling me how verbose Java is, how much less typing their language (especially Perl is). I&amp;rsquo;d love to see a Perl app that can do all this in fewer lines of Perl (restriction, no line may be longer than 120 characters, and must be humanly readable), I personally don&amp;rsquo;t think it can be done at this time (not with full HATEOAS and as many response codes), but I&amp;rsquo;m waiting for the day it can, and can be structured this simply.&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing deprecation notices in perl, optionally with Moose</title>
      <link>http://blog.xenoterracide.com/post/writing-deprecation-notices-in-perl-optionally-with-moose/</link>
      <pubDate>Tue, 01 Jul 2014 08:49:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/writing-deprecation-notices-in-perl-optionally-with-moose/</guid>
      <description>&lt;p&gt;&lt;p&gt;Sometimes you want to remove behavior from your code in a future version, here&amp;rsquo;s the right way to do it.  &lt;script src=&#34;https://gist.github.com/xenoterracide/aea326f4ab7f21229576.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the quick of how it works, the &lt;code&gt;before&lt;/code&gt; has to come after attributes because the methods aren&amp;rsquo;t yet created. Using &lt;code&gt;before&lt;/code&gt; also means it&amp;rsquo;ll always run with your method, without actually touching your method, insuring no accidental consequences to your method. The &lt;code&gt;@CARP_NOT&lt;/code&gt; ensures that the warning thrown doesn&amp;rsquo;t show a line number in your package, or from within where Method Modifiers are actually run. &lt;code&gt;warnings::warnif( &amp;lsquo;deprecated&amp;rsquo;&lt;/code&gt;, ensures that these warnings are only emitted if you have the deprecated category enabled. But what if people don&amp;rsquo;t have warnings enabled? um&amp;hellip; oh well? that&amp;rsquo;s there problem because what if people do and they want to silence these until they can get to them. I highly suggest putting the name of the method being called and it&amp;rsquo;s successor into the message so that people know how to correct their code. &lt;/p&gt;&lt;p&gt;If you don&amp;rsquo;t want Moose, just don&amp;rsquo;t use the method modifier and put &lt;code&gt;warnings:warnif&lt;/code&gt; directly in your code. if you&amp;rsquo;re using a different AOP before, modify &lt;code&gt;@CARP_NOT&lt;/code&gt; to have the correct module. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Privacy, broken by design</title>
      <link>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</link>
      <pubDate>Tue, 03 Jun 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/java-privacy-broken-by-design/</guid>
      <description>&lt;p&gt;&lt;p&gt;It is worth prefixing that none of the following arguments apply to anything using the keyword &lt;code&gt;static&lt;/code&gt; which makes things more procedural (or in some cases functional, than Object Oriented.&lt;/p&gt;&lt;p&gt;The suggestion in Java is to give the least required permission, but this,  in my humble opinion, violates the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;Open-Closed Principle&lt;/a&gt;. Java has &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&#34;&gt;four privacy levels&lt;/a&gt;. Giving something the least permission required to function is fine in a Security context, privacy in programming however is simply there to discourage developers from doing stupid things. In most cases, unlike security, it only makes them difficult, not impossible. I believe that any SOLID principle should make your code more easily extensible, so while in fact Java&amp;rsquo;s privacy is not in literal violation of Open-Closed, it does make extension more difficult than it otherwise should be, thus violating the spirit of the principle. &lt;/p&gt;&lt;p&gt;Before I continue on to how I think Java&amp;rsquo;s design, and common usage, violates the Open Closed Principle, I should explain how I interpret the Principle, as my interpretation appears to be slightly different from what&amp;rsquo;s on Wikipedia. The Principle as described on Wikipedia appears to be combining it with two other SOLID Principles, namely Liskov Substitution and Interface Segregation. So first let&amp;rsquo;s assume that The principle stands alone, and that although it&amp;rsquo;d be bad design to not be completely SOLID, Open-Closed by itself does not require a subclass to support the same interface. Let&amp;rsquo;s also assume that Not modifying the source to add features is also an unrealistic expectation. The purpose of Open-Closed is to ensure that your subclasses are not modifying the the structure or data of their child classes and that a child may easily add to, or change the behavior it got from its parent (Liskov says that it must be substitutable for its parent). &lt;/p&gt;&lt;p&gt;First let&amp;rsquo;s talk about final, marking a class as final, means you can&amp;rsquo;t extend it. This by the very definition is in violation of Open-Closed, because the class is not Open for extension. Classes such as UUID are marked final, you might ask, why would I want to extend a UUID? maybe I want to give it a toURISafeBase64 method. That wouldn&amp;rsquo;t break any of the orignal behavior, and is almost as legitimately belonging as representing the UUID as hex. What if I wanted to extend a nested final class like an Iterator on a Map? I can&amp;rsquo;t do that, which means I have to completely reimplement the Iterator to add simple functionality. In fact the way those are implemented I have to implement much more than just the Iterator. &lt;/p&gt;&lt;p&gt;It is recommended by the official Java Docs, and the community, to make member variables private unless otherwise necessary. Private variables are only accessible to the current class and nested classes, they are not visible to subclasses, in or out of the package. In my opinion this violates Open-Closed because now, if I subclass I need to reimplement all the fields, or use getters/setters. Getters and Setters for every single attribute are actually almost no better than the attribute itself, and an object that is nothing more than those is an &lt;a href=&#34;http://www.martinfowler.com/bliki/AnemicDomainModel.html&#34;&gt;Anemic&lt;/a&gt;. Now it could be argued that making subclasses call methods makes them more&amp;hellip; impervious to change, because if you change the data structure you can preserve the methods. The problem is that most classes wouldn&amp;rsquo;t use their own getters internally, and thus break this, because then extending that getter won&amp;rsquo;t actually modify the class as completely as desired. Also remember that subclasses are by definition, tightly coupled, usually changes to the superclass require taking a look at the subclasses. So if you are using getters and setters to ensure extensibility and preserve internal/external interface changes, use them exclusively, meaning only they can have raw access, all constructors, and business logic methods must go through them. At that point they are the replacment for direct member access and private won&amp;rsquo;t matter as much (I will probably advocate a variant of this in the next article). However if you still want to access some member data hidden by the class directly, you should ensure that your subclasses can easily do so as well. You should &lt;em&gt;only&lt;/em&gt; make a member private if it would actually cause a bug in any subclass. &lt;/p&gt;&lt;p&gt;So if we go on to assume that all subclasses, even ones in a different package (because you know people using your code are going to extend things) then we should be making all members protected. This would mean that all subclasses could reuse the member variables. Of course the problem is now your data is not encapsulated in &lt;em&gt;your&lt;/em&gt; package, once a member variable is not private, is is available to your entire package. To me this also seems like a bad idea, other classes in my package don&amp;rsquo;t need to see my objects internals unless they&amp;rsquo;re a subclass. So now you have to choose, make all classes easily extended? or protect people who are programming in your package from themselves. You can probably control who&amp;rsquo;s modifying your package and how, and have static code analysis to check that you&amp;rsquo;re not calling obj.foo only this.foo. But nothing can give you back extensibility you&amp;rsquo;ve taken away (outside of adding it back). &lt;/p&gt;&lt;p&gt;So let&amp;rsquo;s look at interfaces, interfaces generally have two options, public, or protected. This is fine, but has a problem, protected interfaces are only applicable to the package that has the interface defined. Methods implementing the interface must have the same privacy level. Most of the time what I actually want is an interface which I&amp;rsquo;ve defined globally as a contract, but I want the implementations to only be called by their package. For example, a DAO (Data Access Object) might be able to share the same interface (with judicious generic usage), between entities. However if you do this, you may find that your interface must be public, so it can be between packages, now the DAO itself must have these methods as public, even if it&amp;rsquo;s being called only by something in the same package, because the interface was public so that the interface could be shared. I don&amp;rsquo;t see that you can get away with this whether you use package by feature or package by layer. If you follow this through with previous design thoughts such as everything is an Interface, and those end up being public, and you want nice subclassibility, whether through protected members or through interfaced getters/setters, now everything is public, and we&amp;rsquo;ve completely lost any real encapsulation. &lt;/p&gt;&lt;p&gt;So how could it be done better? have a privacy type subclass which makes the method or member available to only subclasses and not throughout the package. Allow interfaces that have global definitions, but implementations of the methods can be at a package or subclass level. I feel like this could still be accomplished, perhaps by creating an interface type that is a &amp;ldquo;contract&amp;rdquo;, and a new privacy keyword for &amp;ldquo;subclass&amp;rdquo;. Contracts could define that methods be subclass, or protected, in their implementation. At that point you could have all kinds of methods that are still hidden to the general world. You could then build package by feature, have all methods that are required within the package have contracts, but share contracts between features, so all CRUD controllers would have the same method signatures, all repositories would share signatures, etc, etc. &lt;/p&gt;&lt;p&gt;What if I actually want more privacy? well you could not share interfaces between packages, and then have interfaces not be public. You could also not use an interface at all unless it&amp;rsquo;s for a method on your bounded context that must be public. You can also say that ease of extensibility is not a goal and continue to not use your getters/setters internally, and yet make your members private. &lt;/p&gt;&lt;p&gt;You could also say, privacy is irrelevant, if the language is then preventing good, SOLID, design. Specifically here, Open-Closed, Liskov Substitution, and Interface Segregation. If you go this route you&amp;rsquo;ll need conventions, and to trust other developers, because a lot of things will be public or protected. I recommend Perl&amp;rsquo;s convention of prefixing subclass private methods with _ and assuming that all member fields are subclass/trait private and should never be called outside of their inheritance hierarchy. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two Hundred Posts</title>
      <link>http://blog.xenoterracide.com/post/two-hundred-posts/</link>
      <pubDate>Tue, 06 May 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/two-hundred-posts/</guid>
      <description>&lt;p&gt;&lt;p&gt;My blog is 6 years old and 200 posts, and over 120k hits, Probably my first &lt;em&gt;interesting&lt;/em&gt; post is &lt;a href=&#34;http://www.xenoterracide.com/2008/03/wiped-out-svn.html&#34;&gt;when decided I was switching to git from svn,&lt;/a&gt; and it&amp;rsquo;s not very interesting, and I think much more poorly written than I write things now. Since then I&amp;rsquo;ve re-skinned the blog to new templates at least twice. I now list books that I recommend on the right side of my blog, and I&amp;rsquo;ve ensured that all content is clearly licensed under the creative commons. Personally I&amp;rsquo;ve moved from being a student, to system administrator, to Perl developer, and am now building things with Java and potentially Ruby.&lt;/p&gt;&lt;p&gt;Given that I&amp;rsquo;m now building things in Java and Ruby their may be posts that are about those technologies and the good and bad things I&amp;rsquo;ve found out about them. One thing I&amp;rsquo;ll say is that some of the Java as a language hate is as unfounded as the hate for Perl. All languages have good and bad things about them, even Perl 6 has warts in its design. &lt;/p&gt;&lt;p&gt;Since Java is my full time job now, and I have little reason to be doing Perl as I&amp;rsquo;ve been unhappy with the Perl 5 Framework landscape, I&amp;rsquo;m unlikely to continue developing features for my Perl 5 modules. If you&amp;rsquo;re interested in becoming a comaintainer on any of my modules, my requirement is that you show interest in the module by contributing high quality patches to that module. I&amp;rsquo;d like to see evidence that I won&amp;rsquo;t have to come back and fix things later, and that your interest is sincere. If you&amp;rsquo;re not interested in being a comaint patches are still welcome. &lt;/p&gt;&lt;p&gt;I haven&amp;rsquo;t found frameworks that I&amp;rsquo;m completely happy with in any other language either, at this point I&amp;rsquo;m considering making a very minor project developing a full framework for Perl 6. This framework (probably split into components) would be built on a new Dependency Injection module, using what I&amp;rsquo;ve learned from Bread::Board, AngularJS, and Java&amp;rsquo;s CDI. It would also include an ORM that is based on Data Mapper principles and make high use of introspection. I would like to mention I have some doubt in myself making serious traction, but we&amp;rsquo;ll see&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>REST, ROA, and HATEOAS often leads to bad webservice design</title>
      <link>http://blog.xenoterracide.com/post/rest-roa-and-hateoas-often-leads-to-bad-webservice-design/</link>
      <pubDate>Wed, 02 Apr 2014 04:00:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/rest-roa-and-hateoas-often-leads-to-bad-webservice-design/</guid>
      <description>&lt;p&gt;&lt;p&gt;This is not to say that they are bad, but I find that all too frequently the resulting API&amp;rsquo;s are poorly designed due to forgetting one thing, RPC (Remote Procedure Call) is expensive. Now by RPC, I do not mean custom messaging formats such as SOAP, or XML-RPC, I mean calling a method on a remote server. Do not think that just because you are using HTTP as the message format with something like XML or JSON, that calling &lt;code&gt;GET /resource&lt;/code&gt;, is significantly all that different from calling get_resource in a SOAP call. The frequent idempotence also does not mean that you&amp;rsquo;re not actually doing RPC as often good method design server side also implies idempotence, e.g. adding an object to a Set in Java will not result in the object being added twice if you add it twice. All calls to a remote is a form of RPC. The most expensive part of RPC is creating a new connection, just how depends on the protocol. This is why web sockets, for instance, is much cheaper than repeated calls (there are other reasons and expenses too, like maintaining many connections). &lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve worked with a few Resource Oriented Architecture (ROA) web services, and they each suffered from the same flawed design, an excessive number of RPC calls was required to do seemingly simple tasks. This is caused by the, misguided, belief that every single aggregate should be it&amp;rsquo;s own resource and that components of the aggregate should also have it&amp;rsquo;s own resource, and that those should be the only access to the underlying aggregate. In one case working with an ROA we had to do about 5 RPC calls for every single product we wanted to create, and we were bulk creating. This problem was aggravated by the lack of an idempotent PUT for most resources. &lt;/p&gt;&lt;p&gt;The reality is, with a good API design we could have created all, of the objects we needed with a single API call to a bulk interface. I&amp;rsquo;m talking the RESTful equivalent to a &lt;a href=&#34;http://download.java.net/jdk8/docs/api/java/util/Collection.html#addAll-java.util.Collection-&#34;&gt;Java &lt;code&gt;Collection.addAll( objs[] )&lt;/code&gt;&lt;/a&gt;. In fact if you use addAll on a Set, the result of multiple same calls is idempotent, the same object will not be added twice. It would be really easy to write this given a good ORM, and a good interface so that you could do a &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; to &lt;code&gt;/entities&lt;/code&gt;.  this is a significant improvement to a design where you&amp;rsquo;d have to do a PUT or POST for every single item you wanted to create. &lt;code&gt;DELETE&lt;/code&gt; may be the only place where I&amp;rsquo;d consider not doing a bulk request, and it is generally able to be completed asynchronously. You may of course consider limiting the number of entities acted on in a request, so if you need to create 1000 entities, it might take 10 requests doing 100 at a time, this is still better for both the client and the server than doing 1000 requests. &lt;/p&gt;&lt;p&gt;The choice between &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; depends on whether you believe that the call to &lt;code&gt;GET&lt;/code&gt; must return the exact same view as &lt;code&gt;PUT&lt;/code&gt;, meaning that a &lt;code&gt;PUT&lt;/code&gt; would delete resources not included (for a single aggregate that&amp;rsquo;s probably true), or should the behavior be equivalent to addAll or replacing the reference to the collection with a new one. Remember &lt;code&gt;PUT&lt;/code&gt; must be idempotent, this &lt;em&gt;only&lt;/em&gt; means that subsequent calls using the exact same arguments should result in the exact same result. You may want to consider using a different URI for manipulating your entity collections in these ways. &lt;/p&gt;&lt;p&gt;Another problem that was encountered with a web service we encountered is it had sub resources, that had to exist prior to creating the resource we needed to create, akin to tags. Not having a idempotent put to that resource meant we were doing create on exception update. But given the simplicity of this resource it would have been even better to just allow the api to take the final object representation of that resource, instead of requiring the id, and done a lookup by name, or a create or update, under the hood. Doing this is more difficult logic wise, and impossible if there&amp;rsquo;s no natural key (because you can&amp;rsquo;t look it up). &lt;/p&gt;&lt;p&gt;You probably are asking yourself, but how do I handle errors for these things. Well, the way I see it you have three options. One requests are a transaction, so you wrap your database code with a transaction, and it either succeeds or fails, you can return a 200 on success, ensure HATEOAS, with links to any new resources in the response. Two, you could allow partial success, and return the successful objects. Three you could return a custom message envelope payload, this isn&amp;rsquo;t very RESTful because it&amp;rsquo;s a protocol on top of HTTP (it&amp;rsquo;s more like SOAP). &lt;p&gt;I&amp;rsquo;m currently working on designing a new REST Web Service, and I&amp;rsquo;ve decided that no page load, or &amp;ldquo;single conceptual action&amp;rdquo; should take more than 6 API requests. This number is not arbitrary, it&amp;rsquo;s the &lt;a href=&#34;http://www.browserscope.org/?category=network&#34;&gt;median concurrent connection amount, per host name, for consumer web browsers&lt;/a&gt;. Even that number is too many, but I felt that I needed to alot more than one request allowed due to some completely different actions that may need to occur on a page load. &lt;/p&gt;&lt;p&gt;Keep on with the Resource Oriented REST with HATEOAS, just try to think of how to minify the number of calls you make by designing less granular resources&lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matching Hex characters in a Regex</title>
      <link>http://blog.xenoterracide.com/post/matching-hex-characters-in-a-regex/</link>
      <pubDate>Thu, 13 Mar 2014 15:41:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/matching-hex-characters-in-a-regex/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve noticed a common problem with regular expressions and Hex Characters, so I thought I&amp;rsquo;d blog about it. The most common way to regex a UUID, or SHA1 or some other hex encoded binary value is this (and I&amp;rsquo;ve seen this in Perl libraries and StackOverflow answers). &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;[a-f0-9] or [A-F0-9]&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;Neither of these are correct as Hex is case insensitive and both of these regex&amp;rsquo;s are. Hex is most commonly lowercase (unless you&amp;rsquo;re Data::UUID), but that&amp;rsquo;s an aesthetic, not a requirement. The best way to match Hex is using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Regular_expression&#34;&gt;POSIX character class&lt;/a&gt;. &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;[[:xdigit:]] or \x&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;which matches this in a more readable manner, and intent driven manner &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;[A-Fa-f0-9]&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;as a side note it&amp;rsquo;s this in a regex string in Java &lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;&amp;ldquo;\p{XDigit}&amp;rdquo;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Would You Miss Autoderef in 5.20? solutions in search of a problem</title>
      <link>http://blog.xenoterracide.com/post/would-you-miss-autoderef-in-5.20-solutions-in-search-of-a-problem/</link>
      <pubDate>Sat, 02 Nov 2013 02:13:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/would-you-miss-autoderef-in-5.20-solutions-in-search-of-a-problem/</guid>
      <description>&lt;p&gt;&lt;p&gt;This is a response to Chromatics blog post &lt;a href=&#34;http://www.modernperlbooks.com/mt/2013/11/would-you-miss-autoderef-in-520.html&#34;&gt;Would You Miss Autoderef in 5.20?&lt;/a&gt;, because I can&amp;rsquo;t ever get comments to work on his MT for something like a year (500, or some blogger openid incompat).&lt;/p&gt; &lt;p&gt;In all honesty I don&amp;rsquo;t find either particularly interesting. I&amp;rsquo;ve too often been targeting 5.8 or 5.10 for syntax&amp;hellip; @{ $foo } is really the most I&amp;rsquo;ve ever needed, @$foo is nicer, but beyond that don&amp;rsquo;t need it. I can&amp;rsquo;t figure out the value of either autoderef or postfix deref, neither of these seem to be solving actual pain points, I think perhaps they&amp;rsquo;re a solution in search of a problem.  Maybe I just need someone to point out a good use case that this stuff is solving.&lt;/p&gt; &lt;p&gt; Where are the things I actually need? Here&amp;rsquo;s hoping that 5.20 will get method signatures, or exception handling or maybe figure out how to get given/when out of experimental, something useful. &lt;/p&gt;&lt;p&gt;I really do appreciate all the hard work the people who are improving core perl are doing, and it&amp;rsquo;s all needed. Things like &lt;code&gt;&lt;strong&gt;SUB&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;my sub {}&lt;/code&gt; are absolutely awesome, as well as all the work on unicode, and other general improvements. Maybe lexical subs will be moved to stable? but I doubt it. Basically I want something that I can point to my friends outside of the echo chamber, something they could look at and say, yeah that&amp;rsquo;s cool, Perl is moving forward. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Providing with Providers and Bread::Board</title>
      <link>http://blog.xenoterracide.com/post/providing-with-providers-and-breadboard/</link>
      <pubDate>Wed, 23 Oct 2013 05:56:00 +0000</pubDate>
      
      <guid>http://blog.xenoterracide.com/post/providing-with-providers-and-breadboard/</guid>
      <description>&lt;p&gt;&lt;p&gt;So when I started using Dependency Injection the following problem happened, how do I Inject this dependency when the container is not accessible at this point. Ok, that sentence even confused me a little bit, so what do I mean. Let&amp;rsquo;s say I have a &lt;a href=&#34;http://www.martinfowler.com/eaaCatalog/repository.html&#34;&gt;Repository&lt;/a&gt; for Products that is injected into my controller. Each Product stored has one or more ProductVariants that is part of it&amp;rsquo;s aggregate, which itself has Nested Categories. Loading this entire graph at once would be relatively expensive, so we decide to do some lazy loading via DBI in the classes. One problem, how on earth do we Inject a Database Handle all the way down to Categories. Most of these ways are against DI, but they are solutions to the problem, there are also ways to combine these. Also, your model class having a database handle is probably bad design itself, but I&amp;rsquo;m not going to get into that. Sadly I&amp;rsquo;ve done every one of these &lt;/p&gt;&lt;h2&gt;Manual&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7047751.js&#34;&gt;&lt;/script&gt;Well at least you aren&amp;rsquo;t hard coding the way to read your config file, or your database driver. You&amp;rsquo;re smart enough to rely on an Interface rather than an Implementation. This is fraught with so many problems. Firstly if your web server (assuming it&amp;rsquo;s a web application) is getting any kind of traffic at all you&amp;rsquo;ll end up creating tons of database connections, you&amp;rsquo;ll also be reading that config file every time (ok I forget if Config::Merge caches to memory, it might, but often when I see people design this way, they are basically slurping the file every time). Someday 5 years from now, someone is going to hate you because now they need to support replicants&amp;hellip; and the config needs to support more connection strings, which means modifying every place you&amp;rsquo;ve done this. Also, you&amp;rsquo;ve completely lost the ability to inject your dependencies for whatever reason you may want to. &lt;/p&gt;&lt;p&gt;&lt;h2&gt;Inheritance/Composition&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7048475.js&#34;&gt;&lt;/script&gt;Ok, this is a little bit better than before, at least now you have Inverted your dependencies, you could provide the config or the database handle to the class. You&amp;rsquo;ve also put the code in a centralized place so it&amp;rsquo;s easy to change when you need to. You&amp;rsquo;re still reading the file fairly often, though perhaps less because it now depends on how long Product variant is alive. So what happens if your connection is lost? We still have a connection for each class, a connection that may now be held much longer. Why does Product Variant need access to the config? this is a violation of the Law of Demeter. &lt;/p&gt;&lt;h2&gt;Naive Service Locator&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7048828.js&#34;&gt;&lt;/script&gt;We need to get rid of knowledge of the config. We can do this by using a &lt;a href=&#34;http://martinfowler.com/articles/injection.html#UsingAServiceLocator&#34;&gt;Service Locator&lt;/a&gt;, which is simply a well known service to retrieve other services, usually a global singleton. In our example we&amp;rsquo;re at least smart enough to allow ourselves to change the class out via injection for testing. We no longer have tons of connections or config reads. However, we now have a new problems, what happens when our Application Server forks a process and we lose the database connection? What about when our locator gets more complex, like nested containers, that could change or access, specifically with replication. Also our class is now directly dependent on Bread::Board, and its interface. At least we&amp;rsquo;ve stopped caring how our database handle is built. Our locator is a global singleton, and we can&amp;rsquo;t change our Container class for testing. &lt;/p&gt;&lt;h2&gt;Robust Service Locator&lt;/h2&gt;&lt;p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7049630.js&#34;&gt;&lt;/script&gt;Ok, so this is much better we can now configure which locator instance we use at runtime. We have removed the dependency on the Bread::board interface. There is no longer a problem with database connections being dropped. However, our container is still a global singleton, and our class still knows about it, which again, law of Demeter. &lt;/p&gt;&lt;h2&gt;Dependency Injection and Pass it down&lt;/h2&gt;&lt;p&gt;For now I&amp;rsquo;ve been basically ignoring other classes because with all of these other approaches they aren&amp;rsquo;t really a concern because you would do the same thing in every class, fetch your service. Much of the code is required here anyways, we always would have to do the sql, the transforms the loops. Dependency inversion is the opposite, do not think of how to retrieve the dependency instead have the dependency provided. But this becomes tricky to think of when you&amp;rsquo;re 3 or more levels deep in your hierarchy. One way to do it simply pass the reference. We create a specific problem here, our Repository lifecycle is a singleton so we need to ensure re-connection, thus we must inject the connector which means we are immediately dependent on the DBIx::Connector interface. This doesn&amp;rsquo;t seem that tricky until you add more than one service, which still may not seem that bad, until you have to add one later, and oh my god, now you&amp;rsquo;re modifying several classes. &lt;script src=&#34;https://gist.github.com/xenoterracide/7051143.js&#34;&gt;&lt;/script&gt;&lt;h2&gt;Dependency Injection with Providers&lt;/h2&gt;&lt;p&gt;This next and final sample show&amp;rsquo;s one way of doing this with Providers. A little context on a Provider first, a Provider is simply an object that can be used to retrieve a an instance of an object you need. It&amp;rsquo;s really just a kind of factory, but tends to be specific to dependency injection, in scenarios where you need a new instance of an object each time. It seems that it might also work well for other cases, such as objects with a longer lifespan than a new instance on every request from the injector, but shorter than a permanent singleton. In short a provider should be able to provide you with an instance on request, without requiring to to depend on retrieval. &lt;/p&gt;&lt;p&gt;The code that I&amp;rsquo;m demonstrating will not work currently practical scenario, meaning one where variant parameters are required. &lt;a href=&#34;https://github.com/stevan/BreadBoard/issues/28&#34;&gt;I&amp;rsquo;ve opened a bug about resolving the issue&lt;/a&gt;. In the mean time, the patch is simple and you could apply it yourself. You could use &lt;code&gt;BUILDARGS&lt;/code&gt; to rename an alternate key to the primary hashkey, in your models. You could also just define each model service one at a time instead of looping them, and actually validating their parameters. &lt;/p&gt;&lt;script src=&#34;https://gist.github.com/xenoterracide/7052294.js&#34;&gt;&lt;/script&gt;&lt;p&gt;You may note that I&amp;rsquo;ve removed the config, this was simply so I could build the code out so it works in completion. It maybe advantageous not to put config processing code in the Dependency injector, but rather provide the config to Bread::Board::Declare at the constructor via required services. This way of doing things requires much more code, but is also much more flexible. Every piece of the model, even those hat could not normally be accessed by the injector, can now have it&amp;rsquo;s dependencies injected to it. &lt;/p&gt;&lt;div class=&#34;blogger-post-footer&#34;&gt;&lt;br /&gt;&amp;ndash;&lt;br /&gt;
This &lt;span xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34; href=&#34;http://purl.org/dc/dcmitype/Text&#34; rel=&#34;dc:type&#34;&gt;work&lt;/span&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.xenoterracide.com&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Caleb Cushing&lt;/a&gt; is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>